///This code is auto generated by CDF.
///Please don't alter the contents of this file

using System.Collections.Generic;
using System;
using System.Data;
using System.Data.SqlClient;
using DCC.UMB.CDF.DB;
using System.Text;
namespace DCC.DBFacade
{
    public class RMS_APPDbFacade
    {
        private List<string> dbTasks = new List<string>();
        public IDbManager ObjDBManager = null;
        public DCCSqlDataReader ExecuteSelectQuery(SQLSelectQuery sqlSelectQuery) { return ObjDBManager.ExecuteReaderSQL(sqlSelectQuery.GetSQLSelectQuery()); }
        public void BeginTrans() { ObjDBManager.BeginTrans(); }
        public void CommitTrans() { ObjDBManager.CommitTrans(); }
        public void RollbackTrans() { ObjDBManager.RollbackTrans(); }
        public void AddDbTask(string task) { this.dbTasks.Add(task); }
        public void AddDbTasks(List<string> tasks) { this.dbTasks.AddRange(tasks); }
        public void ClearDbTasks() { this.dbTasks.Clear(); }
        public RMS_APPDbFacade(string applicationID) { this.ObjDBManager = DCC.UMB.CDF.Utils.UtilityManager.CreateDBManagerInstance(applicationID); }
        public DataSet ExecuteDbTasks()
        {
            StringBuilder sb = new StringBuilder();
            if (this.dbTasks.Count == 0) { this.AddDbTask("select 'No tasks were defined'"); }
            foreach (string task in this.dbTasks)
            {
                sb.Append(task + ";");
                sb.AppendLine();
                sb.AppendLine();
            }
            return ObjDBManager.ExecuteSQL(sb.ToString());
        }

        public DataSet Abc(System.Int32? a,
                                        ref System.Int32 b)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter a_Parameter = ObjDBManager.CreateSqlParameter("a", a, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(a_Parameter);
            SqlParameter b_Parameter = ObjDBManager.CreateSqlParameter("b", b, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(b_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Abc", sqlParameters);
            b = (System.Int32)b_Parameter.Value;

            return dset;
        }

        public string AbcAsTask(System.Int32? a,
                                            ref System.Int32 b)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter a_Parameter = ObjDBManager.CreateSqlParameter("a", a, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(a_Parameter);
            SqlParameter b_Parameter = ObjDBManager.CreateSqlParameter("b", b, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(b_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Abc", sqlParameters);
            b = (System.Int32)b_Parameter.Value;

            return taskString;
        }



        public DataSet ACC_51(System.String departments_ids_xml,
                                            System.String in_sewadar_type_ids_xml,
                                            System.String in_status_id_xml,
                                            System.Int32? from_id,
                                            System.Int32? to_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter in_sewadar_type_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_type_ids_xml", in_sewadar_type_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_type_ids_xml_Parameter);
            SqlParameter in_status_id_xml_Parameter = ObjDBManager.CreateSqlParameter("in_status_id_xml", in_status_id_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_status_id_xml_Parameter);
            SqlParameter from_id_Parameter = ObjDBManager.CreateSqlParameter("from_id", from_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(from_id_Parameter);
            SqlParameter to_id_Parameter = ObjDBManager.CreateSqlParameter("to_id", to_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(to_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("ACC_51", sqlParameters);

            return dset;
        }

        public string ACC_51AsTask(System.String departments_ids_xml,
                                                System.String in_sewadar_type_ids_xml,
                                                System.String in_status_id_xml,
                                                System.Int32? from_id,
                                                System.Int32? to_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter in_sewadar_type_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_type_ids_xml", in_sewadar_type_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_type_ids_xml_Parameter);
            SqlParameter in_status_id_xml_Parameter = ObjDBManager.CreateSqlParameter("in_status_id_xml", in_status_id_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_status_id_xml_Parameter);
            SqlParameter from_id_Parameter = ObjDBManager.CreateSqlParameter("from_id", from_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(from_id_Parameter);
            SqlParameter to_id_Parameter = ObjDBManager.CreateSqlParameter("to_id", to_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(to_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("ACC_51", sqlParameters);

            return taskString;
        }



        public System.String ComputeHousingLocationDisplayText(System.Int32? inputId)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter inputId_Parameter = ObjDBManager.CreateSqlParameter("inputId", inputId, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(inputId_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.ComputeHousingLocationDisplayText(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public DataSet ContractDetails_SelPr(System.Int32? in_sewadar_id,
                                                        System.DateTime? Contract_Year)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_id", in_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_id_Parameter);
            SqlParameter Contract_Year_Parameter = ObjDBManager.CreateSqlParameter("Contract_Year", Contract_Year, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(Contract_Year_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("ContractDetails_SelPr", sqlParameters);

            return dset;
        }

        public string ContractDetails_SelPrAsTask(System.Int32? in_sewadar_id,
                                                                System.DateTime? Contract_Year)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_id", in_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_id_Parameter);
            SqlParameter Contract_Year_Parameter = ObjDBManager.CreateSqlParameter("Contract_Year", Contract_Year, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(Contract_Year_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("ContractDetails_SelPr", sqlParameters);

            return taskString;
        }



        public DataSet DelAddress(System.Int32? person_id,
                                                System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelAddress", sqlParameters);

            return dset;
        }

        public string DelAddressAsTask(System.Int32? person_id,
                                                    System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelAddress", sqlParameters);

            return taskString;
        }



        public DataSet DeladdresseesAndaddressee_place_holders(System.Int32? addressee_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter addressee_id_Parameter = ObjDBManager.CreateSqlParameter("addressee_id", addressee_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(addressee_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DeladdresseesAndaddressee_place_holders", sqlParameters);

            return dset;
        }

        public string DeladdresseesAndaddressee_place_holdersAsTask(System.Int32? addressee_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter addressee_id_Parameter = ObjDBManager.CreateSqlParameter("addressee_id", addressee_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(addressee_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DeladdresseesAndaddressee_place_holders", sqlParameters);

            return taskString;
        }



        public DataSet DelChildren_facilities(System.Int16? children_facility_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter children_facility_id_Parameter = ObjDBManager.CreateSqlParameter("children_facility_id", children_facility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(children_facility_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelChildren_facilities", sqlParameters);

            return dset;
        }

        public string DelChildren_facilitiesAsTask(System.Int16? children_facility_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter children_facility_id_Parameter = ObjDBManager.CreateSqlParameter("children_facility_id", children_facility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(children_facility_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelChildren_facilities", sqlParameters);

            return taskString;
        }



        public DataSet DelChildrenEligibleFacilities(System.Int32? dependant_id,
                                                                System.Int16? Facility_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter Facility_id_Parameter = ObjDBManager.CreateSqlParameter("Facility_id", Facility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(Facility_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelChildrenEligibleFacilities", sqlParameters);

            return dset;
        }

        public string DelChildrenEligibleFacilitiesAsTask(System.Int32? dependant_id,
                                                                        System.Int16? Facility_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter Facility_id_Parameter = ObjDBManager.CreateSqlParameter("Facility_id", Facility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(Facility_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelChildrenEligibleFacilities", sqlParameters);

            return taskString;
        }



        public DataSet DelChildrenEligibleFacility(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelChildrenEligibleFacility", sqlParameters);

            return dset;
        }

        public string DelChildrenEligibleFacilityAsTask(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelChildrenEligibleFacility", sqlParameters);

            return taskString;
        }



        public DataSet DelChildrenGrantDisbursement(System.Int32? disbursement_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter disbursement_id_Parameter = ObjDBManager.CreateSqlParameter("disbursement_id", disbursement_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(disbursement_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelChildrenGrantDisbursement", sqlParameters);

            return dset;
        }

        public string DelChildrenGrantDisbursementAsTask(System.Int32? disbursement_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter disbursement_id_Parameter = ObjDBManager.CreateSqlParameter("disbursement_id", disbursement_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(disbursement_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelChildrenGrantDisbursement", sqlParameters);

            return taskString;
        }



        public DataSet DelChildrenResults(System.Int32? dependant_id,
                                                        System.Int16? qualification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelChildrenResults", sqlParameters);

            return dset;
        }

        public string DelChildrenResultsAsTask(System.Int32? dependant_id,
                                                            System.Int16? qualification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelChildrenResults", sqlParameters);

            return taskString;
        }



        public DataSet DelConfidentialInformation(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelConfidentialInformation", sqlParameters);

            return dset;
        }

        public string DelConfidentialInformationAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelConfidentialInformation", sqlParameters);

            return taskString;
        }



        public DataSet DelContractDetails(System.Int32? sewadar_id,
                                                        System.Int16? contract_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter contract_id_Parameter = ObjDBManager.CreateSqlParameter("contract_id", contract_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(contract_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelContractDetails", sqlParameters);

            return dset;
        }

        public string DelContractDetailsAsTask(System.Int32? sewadar_id,
                                                            System.Int16? contract_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter contract_id_Parameter = ObjDBManager.CreateSqlParameter("contract_id", contract_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(contract_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelContractDetails", sqlParameters);

            return taskString;
        }



        public DataSet DeleteTestProc(System.Int32? id,
                                                    System.String name,
                                                    System.String lastname,
                                                    System.Int32? age,
                                                    System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter id_Parameter = ObjDBManager.CreateSqlParameter("id", id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(id_Parameter);
            SqlParameter name_Parameter = ObjDBManager.CreateSqlParameter("name", name, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(name_Parameter);
            SqlParameter lastname_Parameter = ObjDBManager.CreateSqlParameter("lastname", lastname, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(lastname_Parameter);
            SqlParameter age_Parameter = ObjDBManager.CreateSqlParameter("age", age, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(age_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DeleteTestProc", sqlParameters);

            return dset;
        }

        public string DeleteTestProcAsTask(System.Int32? id,
                                                        System.String name,
                                                        System.String lastname,
                                                        System.Int32? age,
                                                        System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter id_Parameter = ObjDBManager.CreateSqlParameter("id", id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(id_Parameter);
            SqlParameter name_Parameter = ObjDBManager.CreateSqlParameter("name", name, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(name_Parameter);
            SqlParameter lastname_Parameter = ObjDBManager.CreateSqlParameter("lastname", lastname, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(lastname_Parameter);
            SqlParameter age_Parameter = ObjDBManager.CreateSqlParameter("age", age, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(age_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DeleteTestProc", sqlParameters);

            return taskString;
        }



        public DataSet DelExperienceDetails(System.Int32? person_id,
                                                        System.String screen_id,
                                                        System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelExperienceDetails", sqlParameters);

            return dset;
        }

        public string DelExperienceDetailsAsTask(System.Int32? person_id,
                                                            System.String screen_id,
                                                            System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelExperienceDetails", sqlParameters);

            return taskString;
        }



        public DataSet DelGrades(System.Int32? grade_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(grade_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelGrades", sqlParameters);

            return dset;
        }

        public string DelGradesAsTask(System.Int32? grade_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(grade_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelGrades", sqlParameters);

            return taskString;
        }



        public DataSet DelHouseTypes(System.Int16? housing_type_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_type_id_Parameter = ObjDBManager.CreateSqlParameter("housing_type_id", housing_type_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(housing_type_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelHouseTypes", sqlParameters);

            return dset;
        }

        public string DelHouseTypesAsTask(System.Int16? housing_type_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_type_id_Parameter = ObjDBManager.CreateSqlParameter("housing_type_id", housing_type_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(housing_type_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelHouseTypes", sqlParameters);

            return taskString;
        }



        public DataSet DelHousingPurposes(System.Int16? housing_purpose_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_purpose_id_Parameter = ObjDBManager.CreateSqlParameter("housing_purpose_id", housing_purpose_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(housing_purpose_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelHousingPurposes", sqlParameters);

            return dset;
        }

        public string DelHousingPurposesAsTask(System.Int16? housing_purpose_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_purpose_id_Parameter = ObjDBManager.CreateSqlParameter("housing_purpose_id", housing_purpose_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(housing_purpose_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelHousingPurposes", sqlParameters);

            return taskString;
        }



        public DataSet DelHousingUnitAllocations(System.Int32? allocation_id,
                                                            System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter allocation_id_Parameter = ObjDBManager.CreateSqlParameter("allocation_id", allocation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(allocation_id_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelHousingUnitAllocations", sqlParameters);

            return dset;
        }

        public string DelHousingUnitAllocationsAsTask(System.Int32? allocation_id,
                                                                    System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter allocation_id_Parameter = ObjDBManager.CreateSqlParameter("allocation_id", allocation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(allocation_id_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelHousingUnitAllocations", sqlParameters);

            return taskString;
        }



        public DataSet DelHousingUnits(System.Int32? in_housing_location_id,
                                                    System.Byte[] in_txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_location_id", in_housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_housing_location_id_Parameter);
            SqlParameter in_txn_ts_Parameter = ObjDBManager.CreateSqlParameter("in_txn_ts", in_txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(in_txn_ts_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelHousingUnits", sqlParameters);

            return dset;
        }

        public string DelHousingUnitsAsTask(System.Int32? in_housing_location_id,
                                                        System.Byte[] in_txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_location_id", in_housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_housing_location_id_Parameter);
            SqlParameter in_txn_ts_Parameter = ObjDBManager.CreateSqlParameter("in_txn_ts", in_txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(in_txn_ts_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelHousingUnits", sqlParameters);

            return taskString;
        }



        public DataSet DelId_card_Photo(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelId_card_Photo", sqlParameters);

            return dset;
        }

        public string DelId_card_PhotoAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelId_card_Photo", sqlParameters);

            return taskString;
        }



        public DataSet DelId_card_requests(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelId_card_requests", sqlParameters);

            return dset;
        }

        public string DelId_card_requestsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelId_card_requests", sqlParameters);

            return taskString;
        }



        public DataSet DelIDCardRequestReasons(System.Int16? id_card_request_reason_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter id_card_request_reason_id_Parameter = ObjDBManager.CreateSqlParameter("id_card_request_reason_id", id_card_request_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(id_card_request_reason_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelIDCardRequestReasons", sqlParameters);

            return dset;
        }

        public string DelIDCardRequestReasonsAsTask(System.Int16? id_card_request_reason_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter id_card_request_reason_id_Parameter = ObjDBManager.CreateSqlParameter("id_card_request_reason_id", id_card_request_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(id_card_request_reason_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelIDCardRequestReasons", sqlParameters);

            return taskString;
        }



        public DataSet DelInstitutions(System.Int16? institution_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter institution_id_Parameter = ObjDBManager.CreateSqlParameter("institution_id", institution_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(institution_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelInstitutions", sqlParameters);

            return dset;
        }

        public string DelInstitutionsAsTask(System.Int16? institution_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter institution_id_Parameter = ObjDBManager.CreateSqlParameter("institution_id", institution_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(institution_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelInstitutions", sqlParameters);

            return taskString;
        }



        public DataSet Delnotification_addresses(System.Int16? template_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Delnotification_addresses", sqlParameters);

            return dset;
        }

        public string Delnotification_addressesAsTask(System.Int16? template_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Delnotification_addresses", sqlParameters);

            return taskString;
        }



        public DataSet Delnotification_template_paragraphs(System.Int16? template_id,
                                                                        System.Int16? Oldtemplate_para_sq)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter Oldtemplate_para_sq_Parameter = ObjDBManager.CreateSqlParameter("Oldtemplate_para_sq", Oldtemplate_para_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(Oldtemplate_para_sq_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Delnotification_template_paragraphs", sqlParameters);

            return dset;
        }

        public string Delnotification_template_paragraphsAsTask(System.Int16? template_id,
                                                                            System.Int16? Oldtemplate_para_sq)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter Oldtemplate_para_sq_Parameter = ObjDBManager.CreateSqlParameter("Oldtemplate_para_sq", Oldtemplate_para_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(Oldtemplate_para_sq_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Delnotification_template_paragraphs", sqlParameters);

            return taskString;
        }



        public DataSet Delnotification_templates(System.Int16? template_id,
                                                            System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Delnotification_templates", sqlParameters);

            return dset;
        }

        public string Delnotification_templatesAsTask(System.Int16? template_id,
                                                                    System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Delnotification_templates", sqlParameters);

            return taskString;
        }



        public DataSet Delnotifications(System.Int32? notification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Delnotifications", sqlParameters);

            return dset;
        }

        public string DelnotificationsAsTask(System.Int32? notification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Delnotifications", sqlParameters);

            return taskString;
        }



        public DataSet Delnotifications_paragraphs_Edit(System.Int32? notification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Delnotifications_paragraphs_Edit", sqlParameters);

            return dset;
        }

        public string Delnotifications_paragraphs_EditAsTask(System.Int32? notification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Delnotifications_paragraphs_Edit", sqlParameters);

            return taskString;
        }



        public DataSet DelNotInsuredReasons(System.Int16? not_insured_reason_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter not_insured_reason_id_Parameter = ObjDBManager.CreateSqlParameter("not_insured_reason_id", not_insured_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(not_insured_reason_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelNotInsuredReasons", sqlParameters);

            return dset;
        }

        public string DelNotInsuredReasonsAsTask(System.Int16? not_insured_reason_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter not_insured_reason_id_Parameter = ObjDBManager.CreateSqlParameter("not_insured_reason_id", not_insured_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(not_insured_reason_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelNotInsuredReasons", sqlParameters);

            return taskString;
        }



        public DataSet DelPerson_Status(System.Int16? person_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelPerson_Status", sqlParameters);

            return dset;
        }

        public string DelPerson_StatusAsTask(System.Int16? person_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelPerson_Status", sqlParameters);

            return taskString;
        }



        public DataSet Delperson_status_applicability(System.Int16? person_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Delperson_status_applicability", sqlParameters);

            return dset;
        }

        public string Delperson_status_applicabilityAsTask(System.Int16? person_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Delperson_status_applicability", sqlParameters);

            return taskString;
        }



        public DataSet DelPerson_Status_Reasons(System.Int32? person_status_reason_id,
                                                            System.Int16? person_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_reason_id", person_status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_status_reason_id_Parameter);
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelPerson_Status_Reasons", sqlParameters);

            return dset;
        }

        public string DelPerson_Status_ReasonsAsTask(System.Int32? person_status_reason_id,
                                                                System.Int16? person_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_reason_id", person_status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_status_reason_id_Parameter);
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelPerson_Status_Reasons", sqlParameters);

            return taskString;
        }



        public DataSet DelPersons_Complaints(System.Int32? person_id,
                                                        System.String complaint_dsc,
                                                        System.DateTime? entry_dtm)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter complaint_dsc_Parameter = ObjDBManager.CreateSqlParameter("complaint_dsc", complaint_dsc, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(complaint_dsc_Parameter);
            SqlParameter entry_dtm_Parameter = ObjDBManager.CreateSqlParameter("entry_dtm", entry_dtm, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(entry_dtm_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelPersons_Complaints", sqlParameters);

            return dset;
        }

        public string DelPersons_ComplaintsAsTask(System.Int32? person_id,
                                                                System.String complaint_dsc,
                                                                System.DateTime? entry_dtm)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter complaint_dsc_Parameter = ObjDBManager.CreateSqlParameter("complaint_dsc", complaint_dsc, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(complaint_dsc_Parameter);
            SqlParameter entry_dtm_Parameter = ObjDBManager.CreateSqlParameter("entry_dtm", entry_dtm, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(entry_dtm_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelPersons_Complaints", sqlParameters);

            return taskString;
        }



        public DataSet DelPersons_confidential_remarks(System.Int32? person_id,
                                                                    System.String remarks,
                                                                    System.String remark_dtm)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter remark_dtm_Parameter = ObjDBManager.CreateSqlParameter("remark_dtm", remark_dtm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remark_dtm_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelPersons_confidential_remarks", sqlParameters);

            return dset;
        }

        public string DelPersons_confidential_remarksAsTask(System.Int32? person_id,
                                                                        System.String remarks,
                                                                        System.String remark_dtm)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter remark_dtm_Parameter = ObjDBManager.CreateSqlParameter("remark_dtm", remark_dtm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remark_dtm_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelPersons_confidential_remarks", sqlParameters);

            return taskString;
        }



        public DataSet DelPersons_dependants(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelPersons_dependants", sqlParameters);

            return dset;
        }

        public string DelPersons_dependantsAsTask(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelPersons_dependants", sqlParameters);

            return taskString;
        }



        public DataSet Delpersons_donatable_organs(System.Int32? person_id,
                                                                System.Byte? donatable_organ_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter donatable_organ_id_Parameter = ObjDBManager.CreateSqlParameter("donatable_organ_id", donatable_organ_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(donatable_organ_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Delpersons_donatable_organs", sqlParameters);

            return dset;
        }

        public string Delpersons_donatable_organsAsTask(System.Int32? person_id,
                                                                    System.Byte? donatable_organ_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter donatable_organ_id_Parameter = ObjDBManager.CreateSqlParameter("donatable_organ_id", donatable_organ_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(donatable_organ_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Delpersons_donatable_organs", sqlParameters);

            return taskString;
        }



        public DataSet DelPersons_insurances(System.Int32? person_id,
                                                        System.String insurance_type)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter insurance_type_Parameter = ObjDBManager.CreateSqlParameter("insurance_type", insurance_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_type_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelPersons_insurances", sqlParameters);

            return dset;
        }

        public string DelPersons_insurancesAsTask(System.Int32? person_id,
                                                                System.String insurance_type)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter insurance_type_Parameter = ObjDBManager.CreateSqlParameter("insurance_type", insurance_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_type_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelPersons_insurances", sqlParameters);

            return taskString;
        }



        public DataSet Delpersons_Medical_Details(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Delpersons_Medical_Details", sqlParameters);

            return dset;
        }

        public string Delpersons_Medical_DetailsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Delpersons_Medical_Details", sqlParameters);

            return taskString;
        }



        public DataSet DelPersons_previous_sewa_details(System.Int32? person_id,
                                                                    System.DateTime? from_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter from_dt_Parameter = ObjDBManager.CreateSqlParameter("from_dt", from_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_dt_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelPersons_previous_sewa_details", sqlParameters);

            return dset;
        }

        public string DelPersons_previous_sewa_detailsAsTask(System.Int32? person_id,
                                                                        System.DateTime? from_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter from_dt_Parameter = ObjDBManager.CreateSqlParameter("from_dt", from_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_dt_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelPersons_previous_sewa_details", sqlParameters);

            return taskString;
        }



        public DataSet DelPersons_work_experience_details(System.Int32? person_id,
                                                                        System.DateTime? from_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter from_dt_Parameter = ObjDBManager.CreateSqlParameter("from_dt", from_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_dt_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelPersons_work_experience_details", sqlParameters);

            return dset;
        }

        public string DelPersons_work_experience_detailsAsTask(System.Int32? person_id,
                                                                            System.DateTime? from_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter from_dt_Parameter = ObjDBManager.CreateSqlParameter("from_dt", from_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_dt_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelPersons_work_experience_details", sqlParameters);

            return taskString;
        }



        public DataSet DelPersonsDetails(System.Int32? person_id,
                                                    System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelPersonsDetails", sqlParameters);

            return dset;
        }

        public string DelPersonsDetailsAsTask(System.Int32? person_id,
                                                            System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelPersonsDetails", sqlParameters);

            return taskString;
        }



        public DataSet DelPersonsDocuments(System.Int32? person_id,
                                                        System.Byte? document_type_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter document_type_id_Parameter = ObjDBManager.CreateSqlParameter("document_type_id", document_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(document_type_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelPersonsDocuments", sqlParameters);

            return dset;
        }

        public string DelPersonsDocumentsAsTask(System.Int32? person_id,
                                                            System.Byte? document_type_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter document_type_id_Parameter = ObjDBManager.CreateSqlParameter("document_type_id", document_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(document_type_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelPersonsDocuments", sqlParameters);

            return taskString;
        }



        public DataSet DelPersonsGeneralRemarks(System.Int32? person_id,
                                                            System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelPersonsGeneralRemarks", sqlParameters);

            return dset;
        }

        public string DelPersonsGeneralRemarksAsTask(System.Int32? person_id,
                                                                System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelPersonsGeneralRemarks", sqlParameters);

            return taskString;
        }



        public DataSet DelPersonsQualifications(System.Int32? person_id,
                                                            System.Int16? qualification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelPersonsQualifications", sqlParameters);

            return dset;
        }

        public string DelPersonsQualificationsAsTask(System.Int32? person_id,
                                                                System.Int16? qualification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelPersonsQualifications", sqlParameters);

            return taskString;
        }



        public DataSet DelPersonsRelativesinSewa(System.Int32? person_id,
                                                            System.Int32? relative_sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter relative_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("relative_sewadar_id", relative_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(relative_sewadar_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelPersonsRelativesinSewa", sqlParameters);

            return dset;
        }

        public string DelPersonsRelativesinSewaAsTask(System.Int32? person_id,
                                                                    System.Int32? relative_sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter relative_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("relative_sewadar_id", relative_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(relative_sewadar_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelPersonsRelativesinSewa", sqlParameters);

            return taskString;
        }



        public DataSet DelPersonsSkills(System.Int32? person_id,
                                                    System.Int16? skill_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter skill_id_Parameter = ObjDBManager.CreateSqlParameter("skill_id", skill_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(skill_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelPersonsSkills", sqlParameters);

            return dset;
        }

        public string DelPersonsSkillsAsTask(System.Int32? person_id,
                                                        System.Int16? skill_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter skill_id_Parameter = ObjDBManager.CreateSqlParameter("skill_id", skill_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(skill_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelPersonsSkills", sqlParameters);

            return taskString;
        }



        public DataSet DelPersonstxnts(System.Int32? person_id,
                                                    System.String screen_id,
                                                    System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelPersonstxnts", sqlParameters);

            return dset;
        }

        public string DelPersonstxntsAsTask(System.Int32? person_id,
                                                        System.String screen_id,
                                                        System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelPersonstxnts", sqlParameters);

            return taskString;
        }



        public DataSet DelResidentsOrVisitorDetails(System.Int32? person_id,
                                                                System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelResidentsOrVisitorDetails", sqlParameters);

            return dset;
        }

        public string DelResidentsOrVisitorDetailsAsTask(System.Int32? person_id,
                                                                    System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelResidentsOrVisitorDetails", sqlParameters);

            return taskString;
        }



        public DataSet DelResidentsORVisitorsDocuments(System.Int32? person_id,
                                                                    System.Byte? document_type_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter document_type_id_Parameter = ObjDBManager.CreateSqlParameter("document_type_id", document_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(document_type_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelResidentsORVisitorsDocuments", sqlParameters);

            return dset;
        }

        public string DelResidentsORVisitorsDocumentsAsTask(System.Int32? person_id,
                                                                        System.Byte? document_type_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter document_type_id_Parameter = ObjDBManager.CreateSqlParameter("document_type_id", document_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(document_type_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelResidentsORVisitorsDocuments", sqlParameters);

            return taskString;
        }



        public DataSet DelResidentsORVisitorsQualifications(System.Int32? person_id,
                                                                        System.Int16? qualification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelResidentsORVisitorsQualifications", sqlParameters);

            return dset;
        }

        public string DelResidentsORVisitorsQualificationsAsTask(System.Int32? person_id,
                                                                            System.Int16? qualification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelResidentsORVisitorsQualifications", sqlParameters);

            return taskString;
        }



        public DataSet DelResidentsORVisitorsRelativesinSewa(System.Int32? person_id,
                                                                        System.Int32? relative_sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter relative_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("relative_sewadar_id", relative_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(relative_sewadar_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelResidentsORVisitorsRelativesinSewa", sqlParameters);

            return dset;
        }

        public string DelResidentsORVisitorsRelativesinSewaAsTask(System.Int32? person_id,
                                                                                System.Int32? relative_sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter relative_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("relative_sewadar_id", relative_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(relative_sewadar_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelResidentsORVisitorsRelativesinSewa", sqlParameters);

            return taskString;
        }



        public DataSet DelResidentsORVisitorsSkills(System.Int32? person_id,
                                                                System.Int16? skill_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter skill_id_Parameter = ObjDBManager.CreateSqlParameter("skill_id", skill_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(skill_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelResidentsORVisitorsSkills", sqlParameters);

            return dset;
        }

        public string DelResidentsORVisitorsSkillsAsTask(System.Int32? person_id,
                                                                    System.Int16? skill_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter skill_id_Parameter = ObjDBManager.CreateSqlParameter("skill_id", skill_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(skill_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelResidentsORVisitorsSkills", sqlParameters);

            return taskString;
        }



        public DataSet DelSecurityClearance(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelSecurityClearance", sqlParameters);

            return dset;
        }

        public string DelSecurityClearanceAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelSecurityClearance", sqlParameters);

            return taskString;
        }



        public DataSet DelSewadarContractDetails(System.Int32? sewadar_id,
                                                            System.Int16? contract_id,
                                                            System.Int16? month_from)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter contract_id_Parameter = ObjDBManager.CreateSqlParameter("contract_id", contract_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(contract_id_Parameter);
            SqlParameter month_from_Parameter = ObjDBManager.CreateSqlParameter("month_from", month_from, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(month_from_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelSewadarContractDetails", sqlParameters);

            return dset;
        }

        public string DelSewadarContractDetailsAsTask(System.Int32? sewadar_id,
                                                                    System.Int16? contract_id,
                                                                    System.Int16? month_from)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter contract_id_Parameter = ObjDBManager.CreateSqlParameter("contract_id", contract_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(contract_id_Parameter);
            SqlParameter month_from_Parameter = ObjDBManager.CreateSqlParameter("month_from", month_from, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(month_from_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelSewadarContractDetails", sqlParameters);

            return taskString;
        }



        public DataSet DelSewadarContracts(System.Int32? sewadar_id,
                                                        System.Int16? contract_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter contract_id_Parameter = ObjDBManager.CreateSqlParameter("contract_id", contract_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(contract_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelSewadarContracts", sqlParameters);

            return dset;
        }

        public string DelSewadarContractsAsTask(System.Int32? sewadar_id,
                                                            System.Int16? contract_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter contract_id_Parameter = ObjDBManager.CreateSqlParameter("contract_id", contract_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(contract_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelSewadarContracts", sqlParameters);

            return taskString;
        }



        public DataSet DelSewadarOfficeInformation(System.Int32? person_id,
                                                                System.String screen_id,
                                                                System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelSewadarOfficeInformation", sqlParameters);

            return dset;
        }

        public string DelSewadarOfficeInformationAsTask(System.Int32? person_id,
                                                                    System.String screen_id,
                                                                    System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelSewadarOfficeInformation", sqlParameters);

            return taskString;
        }



        public DataSet DelWrapper_Person_Status(System.Int16? person_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("DelWrapper_Person_Status", sqlParameters);

            return dset;
        }

        public string DelWrapper_Person_StatusAsTask(System.Int16? person_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("DelWrapper_Person_Status", sqlParameters);

            return taskString;
        }



        public System.String FnContractDetails_Grade_SelPr(System.Int32? in_sewadar_id,
                                                                        System.DateTime? Contract_Year)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_id", in_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_id_Parameter);
            SqlParameter Contract_Year_Parameter = ObjDBManager.CreateSqlParameter("Contract_Year", Contract_Year, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(Contract_Year_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnContractDetails_Grade_SelPr(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnContractDetails_GradeId_SelPr(System.Int32? in_sewadar_id,
                                                                        System.DateTime? Contract_Year)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_id", in_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_id_Parameter);
            SqlParameter Contract_Year_Parameter = ObjDBManager.CreateSqlParameter("Contract_Year", Contract_Year, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(Contract_Year_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnContractDetails_GradeId_SelPr(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnContractDetails_PayScale_SelPr(System.Int32? in_sewadar_id,
                                                                            System.DateTime? Contract_Year)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_id", in_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_id_Parameter);
            SqlParameter Contract_Year_Parameter = ObjDBManager.CreateSqlParameter("Contract_Year", Contract_Year, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(Contract_Year_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnContractDetails_PayScale_SelPr(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnContractDetails_WorkingUnit_SelPr(System.Int32? in_sewadar_id,
                                                                            System.DateTime? Contract_Year)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_id", in_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_id_Parameter);
            SqlParameter Contract_Year_Parameter = ObjDBManager.CreateSqlParameter("Contract_Year", Contract_Year, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(Contract_Year_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnContractDetails_WorkingUnit_SelPr(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnContractDetails_WorkingUnitId_SelPr(System.Int32? in_sewadar_id,
                                                                                System.DateTime? Contract_Year)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_id", in_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_id_Parameter);
            SqlParameter Contract_Year_Parameter = ObjDBManager.CreateSqlParameter("Contract_Year", Contract_Year, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(Contract_Year_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnContractDetails_WorkingUnitId_SelPr(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnFormatAgePlaceHolder(System.Int32? p_sewadar_id,
                                                                System.String p_place_holder_format_cd,
                                                                System.DateTime? p_as_of_date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("p_sewadar_id", p_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_sewadar_id_Parameter);
            SqlParameter p_place_holder_format_cd_Parameter = ObjDBManager.CreateSqlParameter("p_place_holder_format_cd", p_place_holder_format_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_place_holder_format_cd_Parameter);
            SqlParameter p_as_of_date_Parameter = ObjDBManager.CreateSqlParameter("p_as_of_date", p_as_of_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(p_as_of_date_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnFormatAgePlaceHolder(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnFormatDatePlaceHolder(System.DateTime? p_date,
                                                                System.String p_place_holder_format_cd)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_date_Parameter = ObjDBManager.CreateSqlParameter("p_date", p_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(p_date_Parameter);
            SqlParameter p_place_holder_format_cd_Parameter = ObjDBManager.CreateSqlParameter("p_place_holder_format_cd", p_place_holder_format_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_place_holder_format_cd_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnFormatDatePlaceHolder(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnFormatDepartmentPlaceHolder(System.Int16? p_working_unit_id,
                                                                        System.String p_place_holder_format_cd)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_working_unit_id_Parameter = ObjDBManager.CreateSqlParameter("p_working_unit_id", p_working_unit_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(p_working_unit_id_Parameter);
            SqlParameter p_place_holder_format_cd_Parameter = ObjDBManager.CreateSqlParameter("p_place_holder_format_cd", p_place_holder_format_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_place_holder_format_cd_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnFormatDepartmentPlaceHolder(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnFormatDesignationPlaceHolder(System.Int16? p_designation_id,
                                                                        System.String p_place_holder_format_cd)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_designation_id_Parameter = ObjDBManager.CreateSqlParameter("p_designation_id", p_designation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(p_designation_id_Parameter);
            SqlParameter p_place_holder_format_cd_Parameter = ObjDBManager.CreateSqlParameter("p_place_holder_format_cd", p_place_holder_format_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_place_holder_format_cd_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnFormatDesignationPlaceHolder(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnFormatFileNoPlaceHolder(System.Int32? p_sewadar_id,
                                                                    System.String p_place_holder_format_cd)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("p_sewadar_id", p_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_sewadar_id_Parameter);
            SqlParameter p_place_holder_format_cd_Parameter = ObjDBManager.CreateSqlParameter("p_place_holder_format_cd", p_place_holder_format_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_place_holder_format_cd_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnFormatFileNoPlaceHolder(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnFormatGenderPlaceHolder(System.Int32? p_sewadar_id,
                                                                    System.String p_place_holder_format_cd)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("p_sewadar_id", p_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_sewadar_id_Parameter);
            SqlParameter p_place_holder_format_cd_Parameter = ObjDBManager.CreateSqlParameter("p_place_holder_format_cd", p_place_holder_format_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_place_holder_format_cd_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnFormatGenderPlaceHolder(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnFormatGradePlaceHolder(System.Int16? p_grade_id,
                                                                    System.String p_place_holder_format_cd)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_grade_id_Parameter = ObjDBManager.CreateSqlParameter("p_grade_id", p_grade_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(p_grade_id_Parameter);
            SqlParameter p_place_holder_format_cd_Parameter = ObjDBManager.CreateSqlParameter("p_place_holder_format_cd", p_place_holder_format_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_place_holder_format_cd_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnFormatGradePlaceHolder(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnFormatIdNoPlaceHolder(System.Int32? p_sewadar_id,
                                                                System.String p_place_holder_format_cd)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("p_sewadar_id", p_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_sewadar_id_Parameter);
            SqlParameter p_place_holder_format_cd_Parameter = ObjDBManager.CreateSqlParameter("p_place_holder_format_cd", p_place_holder_format_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_place_holder_format_cd_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnFormatIdNoPlaceHolder(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnFormatNotificationNoPlaceHolder(System.Int32? p_notification_id,
                                                                            System.String p_place_holder_format_cd)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_notification_id_Parameter = ObjDBManager.CreateSqlParameter("p_notification_id", p_notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_notification_id_Parameter);
            SqlParameter p_place_holder_format_cd_Parameter = ObjDBManager.CreateSqlParameter("p_place_holder_format_cd", p_place_holder_format_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_place_holder_format_cd_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnFormatNotificationNoPlaceHolder(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnFormatSectionPlaceHolder(System.Int16? p_working_unit_id,
                                                                    System.String p_place_holder_format_cd)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_working_unit_id_Parameter = ObjDBManager.CreateSqlParameter("p_working_unit_id", p_working_unit_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(p_working_unit_id_Parameter);
            SqlParameter p_place_holder_format_cd_Parameter = ObjDBManager.CreateSqlParameter("p_place_holder_format_cd", p_place_holder_format_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_place_holder_format_cd_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnFormatSectionPlaceHolder(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnFormatSewadarPlaceHolder(System.Int32? p_sewadar_id,
                                                                    System.String p_place_holder_format_cd)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("p_sewadar_id", p_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_sewadar_id_Parameter);
            SqlParameter p_place_holder_format_cd_Parameter = ObjDBManager.CreateSqlParameter("p_place_holder_format_cd", p_place_holder_format_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_place_holder_format_cd_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnFormatSewadarPlaceHolder(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnFormatSewadarStatusPlaceHolder(System.Int16? p_person_status_id,
                                                                            System.String p_place_holder_format_cd)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_person_status_id_Parameter = ObjDBManager.CreateSqlParameter("p_person_status_id", p_person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(p_person_status_id_Parameter);
            SqlParameter p_place_holder_format_cd_Parameter = ObjDBManager.CreateSqlParameter("p_place_holder_format_cd", p_place_holder_format_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_place_holder_format_cd_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnFormatSewadarStatusPlaceHolder(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnFormatSewadarTypePlaceHolder(System.Byte? p_sewadar_type_id,
                                                                        System.String p_place_holder_format_cd)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_sewadar_type_id_Parameter = ObjDBManager.CreateSqlParameter("p_sewadar_type_id", p_sewadar_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(p_sewadar_type_id_Parameter);
            SqlParameter p_place_holder_format_cd_Parameter = ObjDBManager.CreateSqlParameter("p_place_holder_format_cd", p_place_holder_format_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_place_holder_format_cd_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnFormatSewadarTypePlaceHolder(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnGetAddress(System.Int32? person_id,
                                                        System.String address_type_cd)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter address_type_cd_Parameter = ObjDBManager.CreateSqlParameter("address_type_cd", address_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(address_type_cd_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnGetAddress(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnGetFullName(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnGetFullName(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnGetIsRetired(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnGetIsRetired(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnGetNameFHName(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnGetNameFHName(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnGetNotificationNo(System.String p_is_draft,
                                                            System.Int32? p_notification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_is_draft_Parameter = ObjDBManager.CreateSqlParameter("p_is_draft", p_is_draft, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_is_draft_Parameter);
            SqlParameter p_notification_id_Parameter = ObjDBManager.CreateSqlParameter("p_notification_id", p_notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_notification_id_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnGetNotificationNo(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.Int32? FnGetPersonAge(System.Int32? person_id,
                                                        System.DateTime? current_date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter current_date_Parameter = ObjDBManager.CreateSqlParameter("current_date", current_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(current_date_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnGetPersonAge(" + commaSeparatedParameters + ")");

            return (obj == null || obj == DBNull.Value) ? null : (System.Int32?)obj;
        }



        public System.String FnGetPersonBloodGroup(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnGetPersonBloodGroup(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String FnGetPersonDepartment(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnGetPersonDepartment(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.DateTime? FnGetPersonDOB(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnGetPersonDOB(" + commaSeparatedParameters + ")");

            return (obj == null || obj == DBNull.Value) ? null : (System.DateTime?)obj;
        }



        public System.String FnIsDiabetic(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.FnIsDiabetic(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.DateTime? GetDependantEffectiveInsuranceDate(System.DateTime? p_swdr_status_dt,
                                                                                System.DateTime? p_dpnt_status_dt,
                                                                                System.DateTime? p_dpnt_birth_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_swdr_status_dt_Parameter = ObjDBManager.CreateSqlParameter("p_swdr_status_dt", p_swdr_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(p_swdr_status_dt_Parameter);
            SqlParameter p_dpnt_status_dt_Parameter = ObjDBManager.CreateSqlParameter("p_dpnt_status_dt", p_dpnt_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(p_dpnt_status_dt_Parameter);
            SqlParameter p_dpnt_birth_dt_Parameter = ObjDBManager.CreateSqlParameter("p_dpnt_birth_dt", p_dpnt_birth_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(p_dpnt_birth_dt_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.GetDependantEffectiveInsuranceDate(" + commaSeparatedParameters + ")");

            return (obj == null || obj == DBNull.Value) ? null : (System.DateTime?)obj;
        }



        public System.String GetIDCardMissingInfo(System.Int32? p_person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_person_id_Parameter = ObjDBManager.CreateSqlParameter("p_person_id", p_person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_person_id_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.GetIDCardMissingInfo(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String GetInfoValue(System.Int32? p_value_int,
                                                        System.String p_value_varchar,
                                                        System.DateTime? p_value_dt,
                                                        System.DateTime? p_value_dtm)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_value_int_Parameter = ObjDBManager.CreateSqlParameter("p_value_int", p_value_int, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_value_int_Parameter);
            SqlParameter p_value_varchar_Parameter = ObjDBManager.CreateSqlParameter("p_value_varchar", p_value_varchar, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_value_varchar_Parameter);
            SqlParameter p_value_dt_Parameter = ObjDBManager.CreateSqlParameter("p_value_dt", p_value_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(p_value_dt_Parameter);
            SqlParameter p_value_dtm_Parameter = ObjDBManager.CreateSqlParameter("p_value_dtm", p_value_dtm, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(p_value_dtm_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.GetInfoValue(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.String GetIsInsured(System.DateTime? p_effective_from,
                                                        System.DateTime? p_effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_effective_from_Parameter = ObjDBManager.CreateSqlParameter("p_effective_from", p_effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(p_effective_from_Parameter);
            SqlParameter p_effective_till_Parameter = ObjDBManager.CreateSqlParameter("p_effective_till", p_effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(p_effective_till_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.GetIsInsured(" + commaSeparatedParameters + ")");

            return obj == null || obj == DBNull.Value ? null : (System.String)obj;
        }



        public System.DateTime? GetPersonIDCardValidUpto(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.GetPersonIDCardValidUpto(" + commaSeparatedParameters + ")");

            return (obj == null || obj == DBNull.Value) ? null : (System.DateTime?)obj;
        }



        public System.DateTime? GetPersonPhotoDate(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string commaSeparatedParameters = ObjDBManager.GetCommaSeparatedParameters(sqlParameters);
            Object obj = ObjDBManager.ExecuteScalar("SELECT dbo.GetPersonPhotoDate(" + commaSeparatedParameters + ")");

            return (obj == null || obj == DBNull.Value) ? null : (System.DateTime?)obj;
        }



        public DataSet IDC_51(System.String id_nos_xml,
                                            System.DateTime? valid_upto,
                                            System.String sewadar_status_idx_xml,
                                            System.String is_active)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter id_nos_xml_Parameter = ObjDBManager.CreateSqlParameter("id_nos_xml", id_nos_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(id_nos_xml_Parameter);
            SqlParameter valid_upto_Parameter = ObjDBManager.CreateSqlParameter("valid_upto", valid_upto, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(valid_upto_Parameter);
            SqlParameter sewadar_status_idx_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadar_status_idx_xml", sewadar_status_idx_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadar_status_idx_xml_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("IDC_51", sqlParameters);

            return dset;
        }

        public string IDC_51AsTask(System.String id_nos_xml,
                                                System.DateTime? valid_upto,
                                                System.String sewadar_status_idx_xml,
                                                System.String is_active)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter id_nos_xml_Parameter = ObjDBManager.CreateSqlParameter("id_nos_xml", id_nos_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(id_nos_xml_Parameter);
            SqlParameter valid_upto_Parameter = ObjDBManager.CreateSqlParameter("valid_upto", valid_upto, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(valid_upto_Parameter);
            SqlParameter sewadar_status_idx_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadar_status_idx_xml", sewadar_status_idx_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadar_status_idx_xml_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("IDC_51", sqlParameters);

            return taskString;
        }



        public DataSet IDC_52(System.String id_nos_xml,
                                            System.DateTime? valid_upto,
                                            System.String sewadar_status_idx_xml,
                                            System.String is_active)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter id_nos_xml_Parameter = ObjDBManager.CreateSqlParameter("id_nos_xml", id_nos_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(id_nos_xml_Parameter);
            SqlParameter valid_upto_Parameter = ObjDBManager.CreateSqlParameter("valid_upto", valid_upto, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(valid_upto_Parameter);
            SqlParameter sewadar_status_idx_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadar_status_idx_xml", sewadar_status_idx_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadar_status_idx_xml_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("IDC_52", sqlParameters);

            return dset;
        }

        public string IDC_52AsTask(System.String id_nos_xml,
                                                System.DateTime? valid_upto,
                                                System.String sewadar_status_idx_xml,
                                                System.String is_active)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter id_nos_xml_Parameter = ObjDBManager.CreateSqlParameter("id_nos_xml", id_nos_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(id_nos_xml_Parameter);
            SqlParameter valid_upto_Parameter = ObjDBManager.CreateSqlParameter("valid_upto", valid_upto, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(valid_upto_Parameter);
            SqlParameter sewadar_status_idx_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadar_status_idx_xml", sewadar_status_idx_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadar_status_idx_xml_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("IDC_52", sqlParameters);

            return taskString;
        }



        public DataSet IDC_53(System.String Entity_type_ids_xml,
                                            System.DateTime? From_Date,
                                            System.DateTime? To_Date,
                                            System.String dependents_included)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter Entity_type_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("Entity_type_ids_xml", Entity_type_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(Entity_type_ids_xml_Parameter);
            SqlParameter From_Date_Parameter = ObjDBManager.CreateSqlParameter("From_Date", From_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(From_Date_Parameter);
            SqlParameter To_Date_Parameter = ObjDBManager.CreateSqlParameter("To_Date", To_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(To_Date_Parameter);
            SqlParameter dependents_included_Parameter = ObjDBManager.CreateSqlParameter("dependents_included", dependents_included, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(dependents_included_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("IDC_53", sqlParameters);

            return dset;
        }

        public string IDC_53AsTask(System.String Entity_type_ids_xml,
                                                System.DateTime? From_Date,
                                                System.DateTime? To_Date,
                                                System.String dependents_included)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter Entity_type_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("Entity_type_ids_xml", Entity_type_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(Entity_type_ids_xml_Parameter);
            SqlParameter From_Date_Parameter = ObjDBManager.CreateSqlParameter("From_Date", From_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(From_Date_Parameter);
            SqlParameter To_Date_Parameter = ObjDBManager.CreateSqlParameter("To_Date", To_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(To_Date_Parameter);
            SqlParameter dependents_included_Parameter = ObjDBManager.CreateSqlParameter("dependents_included", dependents_included, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(dependents_included_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("IDC_53", sqlParameters);

            return taskString;
        }



        public DataSet IDC_54(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("IDC_54", sqlParameters);

            return dset;
        }

        public string IDC_54AsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("IDC_54", sqlParameters);

            return taskString;
        }



        public DataSet IDC_55(System.String Entity_type_ids_xml,
                                            System.String Id_card_status_xml,
                                            System.DateTime? From_Date,
                                            System.DateTime? To_Date,
                                            System.String dependents_included)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter Entity_type_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("Entity_type_ids_xml", Entity_type_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(Entity_type_ids_xml_Parameter);
            SqlParameter Id_card_status_xml_Parameter = ObjDBManager.CreateSqlParameter("Id_card_status_xml", Id_card_status_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(Id_card_status_xml_Parameter);
            SqlParameter From_Date_Parameter = ObjDBManager.CreateSqlParameter("From_Date", From_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(From_Date_Parameter);
            SqlParameter To_Date_Parameter = ObjDBManager.CreateSqlParameter("To_Date", To_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(To_Date_Parameter);
            SqlParameter dependents_included_Parameter = ObjDBManager.CreateSqlParameter("dependents_included", dependents_included, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(dependents_included_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("IDC_55", sqlParameters);

            return dset;
        }

        public string IDC_55AsTask(System.String Entity_type_ids_xml,
                                                System.String Id_card_status_xml,
                                                System.DateTime? From_Date,
                                                System.DateTime? To_Date,
                                                System.String dependents_included)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter Entity_type_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("Entity_type_ids_xml", Entity_type_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(Entity_type_ids_xml_Parameter);
            SqlParameter Id_card_status_xml_Parameter = ObjDBManager.CreateSqlParameter("Id_card_status_xml", Id_card_status_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(Id_card_status_xml_Parameter);
            SqlParameter From_Date_Parameter = ObjDBManager.CreateSqlParameter("From_Date", From_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(From_Date_Parameter);
            SqlParameter To_Date_Parameter = ObjDBManager.CreateSqlParameter("To_Date", To_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(To_Date_Parameter);
            SqlParameter dependents_included_Parameter = ObjDBManager.CreateSqlParameter("dependents_included", dependents_included, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(dependents_included_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("IDC_55", sqlParameters);

            return taskString;
        }



        public DataSet IDC_56(System.String missing_criteria,
                                            System.String person_status_id,
                                            System.String is_active)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter missing_criteria_Parameter = ObjDBManager.CreateSqlParameter("missing_criteria", missing_criteria, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(missing_criteria_Parameter);
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("IDC_56", sqlParameters);

            return dset;
        }

        public string IDC_56AsTask(System.String missing_criteria,
                                                System.String person_status_id,
                                                System.String is_active)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter missing_criteria_Parameter = ObjDBManager.CreateSqlParameter("missing_criteria", missing_criteria, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(missing_criteria_Parameter);
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("IDC_56", sqlParameters);

            return taskString;
        }



        public DataSet IDC_57(System.String IDNo,
                                            System.String Include_Dependents)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter IDNo_Parameter = ObjDBManager.CreateSqlParameter("IDNo", IDNo, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(IDNo_Parameter);
            SqlParameter Include_Dependents_Parameter = ObjDBManager.CreateSqlParameter("Include_Dependents", Include_Dependents, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(Include_Dependents_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("IDC_57", sqlParameters);

            return dset;
        }

        public string IDC_57AsTask(System.String IDNo,
                                                System.String Include_Dependents)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter IDNo_Parameter = ObjDBManager.CreateSqlParameter("IDNo", IDNo, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(IDNo_Parameter);
            SqlParameter Include_Dependents_Parameter = ObjDBManager.CreateSqlParameter("Include_Dependents", Include_Dependents, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(Include_Dependents_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("IDC_57", sqlParameters);

            return taskString;
        }



        public DataSet IDC_RPT_01_Sewadar_Id_Card_Details_Report()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DataSet dset = ObjDBManager.ExecuteStoredProc("IDC_RPT_01_Sewadar_Id_Card_Details_Report", sqlParameters);
            return dset;
        }

        public string IDC_RPT_01_Sewadar_Id_Card_Details_ReportAsTask()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            string taskString = ObjDBManager.GetPrintableSQLString("IDC_RPT_01_Sewadar_Id_Card_Details_Report", sqlParameters);
            return taskString;
        }



        public DataSet IDC_RPT_02_Dependent_Id_Card_Details_Report1()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DataSet dset = ObjDBManager.ExecuteStoredProc("IDC_RPT_02_Dependent_Id_Card_Details_Report1", sqlParameters);
            return dset;
        }

        public string IDC_RPT_02_Dependent_Id_Card_Details_Report1AsTask()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            string taskString = ObjDBManager.GetPrintableSQLString("IDC_RPT_02_Dependent_Id_Card_Details_Report1", sqlParameters);
            return taskString;
        }



        public DataSet IDC_RPT_02_Dependent_Id_Card_Details_Report2()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DataSet dset = ObjDBManager.ExecuteStoredProc("IDC_RPT_02_Dependent_Id_Card_Details_Report2", sqlParameters);
            return dset;
        }

        public string IDC_RPT_02_Dependent_Id_Card_Details_Report2AsTask()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            string taskString = ObjDBManager.GetPrintableSQLString("IDC_RPT_02_Dependent_Id_Card_Details_Report2", sqlParameters);
            return taskString;
        }



        public DataSet Ins_UpdNotification_Sewdars(System.Int32? notification_id,
                                                                System.Int32? sewadar_id,
                                                                System.Int16? working_unit_id,
                                                                System.Int16? designation_id,
                                                                System.Byte? sewadar_type_id,
                                                                System.Int16? grade_id,
                                                                System.Int16? sewadar_status_id,
                                                                System.Int32? status_reason_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter working_unit_id_Parameter = ObjDBManager.CreateSqlParameter("working_unit_id", working_unit_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(working_unit_id_Parameter);
            SqlParameter designation_id_Parameter = ObjDBManager.CreateSqlParameter("designation_id", designation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(designation_id_Parameter);
            SqlParameter sewadar_type_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_type_id", sewadar_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(sewadar_type_id_Parameter);
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(grade_id_Parameter);
            SqlParameter sewadar_status_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_status_id", sewadar_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(sewadar_status_id_Parameter);
            SqlParameter status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("status_reason_id", status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(status_reason_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Ins_UpdNotification_Sewdars", sqlParameters);

            return dset;
        }

        public string Ins_UpdNotification_SewdarsAsTask(System.Int32? notification_id,
                                                                    System.Int32? sewadar_id,
                                                                    System.Int16? working_unit_id,
                                                                    System.Int16? designation_id,
                                                                    System.Byte? sewadar_type_id,
                                                                    System.Int16? grade_id,
                                                                    System.Int16? sewadar_status_id,
                                                                    System.Int32? status_reason_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter working_unit_id_Parameter = ObjDBManager.CreateSqlParameter("working_unit_id", working_unit_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(working_unit_id_Parameter);
            SqlParameter designation_id_Parameter = ObjDBManager.CreateSqlParameter("designation_id", designation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(designation_id_Parameter);
            SqlParameter sewadar_type_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_type_id", sewadar_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(sewadar_type_id_Parameter);
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(grade_id_Parameter);
            SqlParameter sewadar_status_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_status_id", sewadar_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(sewadar_status_id_Parameter);
            SqlParameter status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("status_reason_id", status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(status_reason_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Ins_UpdNotification_Sewdars", sqlParameters);

            return taskString;
        }



        public DataSet Ins_UpdPersons_Addresses(System.Int32? person_id,
                                                            System.String address_type_cd,
                                                            System.String address_line_1,
                                                            System.String address_line_2,
                                                            System.Int32? city_id,
                                                            System.String pincode,
                                                            System.String telephone_nos)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter address_type_cd_Parameter = ObjDBManager.CreateSqlParameter("address_type_cd", address_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(address_type_cd_Parameter);
            SqlParameter address_line_1_Parameter = ObjDBManager.CreateSqlParameter("address_line_1", address_line_1, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(address_line_1_Parameter);
            SqlParameter address_line_2_Parameter = ObjDBManager.CreateSqlParameter("address_line_2", address_line_2, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(address_line_2_Parameter);
            SqlParameter city_id_Parameter = ObjDBManager.CreateSqlParameter("city_id", city_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(city_id_Parameter);
            SqlParameter pincode_Parameter = ObjDBManager.CreateSqlParameter("pincode", pincode, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(pincode_Parameter);
            SqlParameter telephone_nos_Parameter = ObjDBManager.CreateSqlParameter("telephone_nos", telephone_nos, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(telephone_nos_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Ins_UpdPersons_Addresses", sqlParameters);

            return dset;
        }

        public string Ins_UpdPersons_AddressesAsTask(System.Int32? person_id,
                                                                System.String address_type_cd,
                                                                System.String address_line_1,
                                                                System.String address_line_2,
                                                                System.Int32? city_id,
                                                                System.String pincode,
                                                                System.String telephone_nos)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter address_type_cd_Parameter = ObjDBManager.CreateSqlParameter("address_type_cd", address_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(address_type_cd_Parameter);
            SqlParameter address_line_1_Parameter = ObjDBManager.CreateSqlParameter("address_line_1", address_line_1, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(address_line_1_Parameter);
            SqlParameter address_line_2_Parameter = ObjDBManager.CreateSqlParameter("address_line_2", address_line_2, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(address_line_2_Parameter);
            SqlParameter city_id_Parameter = ObjDBManager.CreateSqlParameter("city_id", city_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(city_id_Parameter);
            SqlParameter pincode_Parameter = ObjDBManager.CreateSqlParameter("pincode", pincode, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(pincode_Parameter);
            SqlParameter telephone_nos_Parameter = ObjDBManager.CreateSqlParameter("telephone_nos", telephone_nos, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(telephone_nos_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Ins_UpdPersons_Addresses", sqlParameters);

            return taskString;
        }



        public DataSet InsChildren_facilities(ref System.Int16 children_facility_id,
                                                            System.String children_facility_cd,
                                                            System.String children_facility_nm,
                                                            System.String children_facility_dsc,
                                                            System.String frequency,
                                                            System.Int16? children_facility_set_id,
                                                            System.String are_males_eligible,
                                                            System.String are_females_eligible,
                                                            System.String qualification_type,
                                                            System.String facility_type,
                                                            System.Int32? facility_amt,
                                                            System.Byte? criteria_percentage,
                                                            System.String criteria_qualification_type,
                                                            System.DateTime? effective_from,
                                                            System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter children_facility_id_Parameter = ObjDBManager.CreateSqlParameter("children_facility_id", children_facility_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(children_facility_id_Parameter);
            SqlParameter children_facility_cd_Parameter = ObjDBManager.CreateSqlParameter("children_facility_cd", children_facility_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(children_facility_cd_Parameter);
            SqlParameter children_facility_nm_Parameter = ObjDBManager.CreateSqlParameter("children_facility_nm", children_facility_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(children_facility_nm_Parameter);
            SqlParameter children_facility_dsc_Parameter = ObjDBManager.CreateSqlParameter("children_facility_dsc", children_facility_dsc, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(children_facility_dsc_Parameter);
            SqlParameter frequency_Parameter = ObjDBManager.CreateSqlParameter("frequency", frequency, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(frequency_Parameter);
            SqlParameter children_facility_set_id_Parameter = ObjDBManager.CreateSqlParameter("children_facility_set_id", children_facility_set_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(children_facility_set_id_Parameter);
            SqlParameter are_males_eligible_Parameter = ObjDBManager.CreateSqlParameter("are_males_eligible", are_males_eligible, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(are_males_eligible_Parameter);
            SqlParameter are_females_eligible_Parameter = ObjDBManager.CreateSqlParameter("are_females_eligible", are_females_eligible, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(are_females_eligible_Parameter);
            SqlParameter qualification_type_Parameter = ObjDBManager.CreateSqlParameter("qualification_type", qualification_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(qualification_type_Parameter);
            SqlParameter facility_type_Parameter = ObjDBManager.CreateSqlParameter("facility_type", facility_type, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(facility_type_Parameter);
            SqlParameter facility_amt_Parameter = ObjDBManager.CreateSqlParameter("facility_amt", facility_amt, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(facility_amt_Parameter);
            SqlParameter criteria_percentage_Parameter = ObjDBManager.CreateSqlParameter("criteria_percentage", criteria_percentage, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(criteria_percentage_Parameter);
            SqlParameter criteria_qualification_type_Parameter = ObjDBManager.CreateSqlParameter("criteria_qualification_type", criteria_qualification_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(criteria_qualification_type_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsChildren_facilities", sqlParameters);
            children_facility_id = (System.Int16)children_facility_id_Parameter.Value;

            return dset;
        }

        public string InsChildren_facilitiesAsTask(ref System.Int16 children_facility_id,
                                                                System.String children_facility_cd,
                                                                System.String children_facility_nm,
                                                                System.String children_facility_dsc,
                                                                System.String frequency,
                                                                System.Int16? children_facility_set_id,
                                                                System.String are_males_eligible,
                                                                System.String are_females_eligible,
                                                                System.String qualification_type,
                                                                System.String facility_type,
                                                                System.Int32? facility_amt,
                                                                System.Byte? criteria_percentage,
                                                                System.String criteria_qualification_type,
                                                                System.DateTime? effective_from,
                                                                System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter children_facility_id_Parameter = ObjDBManager.CreateSqlParameter("children_facility_id", children_facility_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(children_facility_id_Parameter);
            SqlParameter children_facility_cd_Parameter = ObjDBManager.CreateSqlParameter("children_facility_cd", children_facility_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(children_facility_cd_Parameter);
            SqlParameter children_facility_nm_Parameter = ObjDBManager.CreateSqlParameter("children_facility_nm", children_facility_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(children_facility_nm_Parameter);
            SqlParameter children_facility_dsc_Parameter = ObjDBManager.CreateSqlParameter("children_facility_dsc", children_facility_dsc, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(children_facility_dsc_Parameter);
            SqlParameter frequency_Parameter = ObjDBManager.CreateSqlParameter("frequency", frequency, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(frequency_Parameter);
            SqlParameter children_facility_set_id_Parameter = ObjDBManager.CreateSqlParameter("children_facility_set_id", children_facility_set_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(children_facility_set_id_Parameter);
            SqlParameter are_males_eligible_Parameter = ObjDBManager.CreateSqlParameter("are_males_eligible", are_males_eligible, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(are_males_eligible_Parameter);
            SqlParameter are_females_eligible_Parameter = ObjDBManager.CreateSqlParameter("are_females_eligible", are_females_eligible, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(are_females_eligible_Parameter);
            SqlParameter qualification_type_Parameter = ObjDBManager.CreateSqlParameter("qualification_type", qualification_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(qualification_type_Parameter);
            SqlParameter facility_type_Parameter = ObjDBManager.CreateSqlParameter("facility_type", facility_type, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(facility_type_Parameter);
            SqlParameter facility_amt_Parameter = ObjDBManager.CreateSqlParameter("facility_amt", facility_amt, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(facility_amt_Parameter);
            SqlParameter criteria_percentage_Parameter = ObjDBManager.CreateSqlParameter("criteria_percentage", criteria_percentage, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(criteria_percentage_Parameter);
            SqlParameter criteria_qualification_type_Parameter = ObjDBManager.CreateSqlParameter("criteria_qualification_type", criteria_qualification_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(criteria_qualification_type_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsChildren_facilities", sqlParameters);
            children_facility_id = (System.Int16)children_facility_id_Parameter.Value;

            return taskString;
        }



        public DataSet InsChildrenEligibleFacilities(System.Int32? dependant_id,
                                                                System.Int16? Facility_id,
                                                                System.DateTime? effective_from,
                                                                System.DateTime? effective_till,
                                                                System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter Facility_id_Parameter = ObjDBManager.CreateSqlParameter("Facility_id", Facility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(Facility_id_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsChildrenEligibleFacilities", sqlParameters);

            return dset;
        }

        public string InsChildrenEligibleFacilitiesAsTask(System.Int32? dependant_id,
                                                                        System.Int16? Facility_id,
                                                                        System.DateTime? effective_from,
                                                                        System.DateTime? effective_till,
                                                                        System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter Facility_id_Parameter = ObjDBManager.CreateSqlParameter("Facility_id", Facility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(Facility_id_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsChildrenEligibleFacilities", sqlParameters);

            return taskString;
        }



        public DataSet InsChildrenGrantDisbursement(ref System.Int32 disbursement_id,
                                                                System.DateTime? disbursement_dt,
                                                                System.Int32? dependant_id,
                                                                System.DateTime? effective_from,
                                                                System.Int16? children_facility_id,
                                                                System.Int32? applicable_year,
                                                                System.Byte? applicable_unit,
                                                                System.Int32? claim_amt,
                                                                System.Int32? disbursed_amt,
                                                                System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter disbursement_id_Parameter = ObjDBManager.CreateSqlParameter("disbursement_id", disbursement_id, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(disbursement_id_Parameter);
            SqlParameter disbursement_dt_Parameter = ObjDBManager.CreateSqlParameter("disbursement_dt", disbursement_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(disbursement_dt_Parameter);
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter children_facility_id_Parameter = ObjDBManager.CreateSqlParameter("children_facility_id", children_facility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(children_facility_id_Parameter);
            SqlParameter applicable_year_Parameter = ObjDBManager.CreateSqlParameter("applicable_year", applicable_year, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(applicable_year_Parameter);
            SqlParameter applicable_unit_Parameter = ObjDBManager.CreateSqlParameter("applicable_unit", applicable_unit, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(applicable_unit_Parameter);
            SqlParameter claim_amt_Parameter = ObjDBManager.CreateSqlParameter("claim_amt", claim_amt, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(claim_amt_Parameter);
            SqlParameter disbursed_amt_Parameter = ObjDBManager.CreateSqlParameter("disbursed_amt", disbursed_amt, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(disbursed_amt_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsChildrenGrantDisbursement", sqlParameters);
            disbursement_id = (System.Int32)disbursement_id_Parameter.Value;

            return dset;
        }

        public string InsChildrenGrantDisbursementAsTask(ref System.Int32 disbursement_id,
                                                                    System.DateTime? disbursement_dt,
                                                                    System.Int32? dependant_id,
                                                                    System.DateTime? effective_from,
                                                                    System.Int16? children_facility_id,
                                                                    System.Int32? applicable_year,
                                                                    System.Byte? applicable_unit,
                                                                    System.Int32? claim_amt,
                                                                    System.Int32? disbursed_amt,
                                                                    System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter disbursement_id_Parameter = ObjDBManager.CreateSqlParameter("disbursement_id", disbursement_id, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(disbursement_id_Parameter);
            SqlParameter disbursement_dt_Parameter = ObjDBManager.CreateSqlParameter("disbursement_dt", disbursement_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(disbursement_dt_Parameter);
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter children_facility_id_Parameter = ObjDBManager.CreateSqlParameter("children_facility_id", children_facility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(children_facility_id_Parameter);
            SqlParameter applicable_year_Parameter = ObjDBManager.CreateSqlParameter("applicable_year", applicable_year, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(applicable_year_Parameter);
            SqlParameter applicable_unit_Parameter = ObjDBManager.CreateSqlParameter("applicable_unit", applicable_unit, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(applicable_unit_Parameter);
            SqlParameter claim_amt_Parameter = ObjDBManager.CreateSqlParameter("claim_amt", claim_amt, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(claim_amt_Parameter);
            SqlParameter disbursed_amt_Parameter = ObjDBManager.CreateSqlParameter("disbursed_amt", disbursed_amt, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(disbursed_amt_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsChildrenGrantDisbursement", sqlParameters);
            disbursement_id = (System.Int32)disbursement_id_Parameter.Value;

            return taskString;
        }



        public DataSet InsChildrenResults(System.Int32? dependant_id,
                                                        System.Int16? qualification_id,
                                                        System.Int16? year_of_qualification,
                                                        System.Byte? marks_percentage,
                                                        System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            SqlParameter year_of_qualification_Parameter = ObjDBManager.CreateSqlParameter("year_of_qualification", year_of_qualification, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(year_of_qualification_Parameter);
            SqlParameter marks_percentage_Parameter = ObjDBManager.CreateSqlParameter("marks_percentage", marks_percentage, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(marks_percentage_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsChildrenResults", sqlParameters);

            return dset;
        }

        public string InsChildrenResultsAsTask(System.Int32? dependant_id,
                                                            System.Int16? qualification_id,
                                                            System.Int16? year_of_qualification,
                                                            System.Byte? marks_percentage,
                                                            System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            SqlParameter year_of_qualification_Parameter = ObjDBManager.CreateSqlParameter("year_of_qualification", year_of_qualification, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(year_of_qualification_Parameter);
            SqlParameter marks_percentage_Parameter = ObjDBManager.CreateSqlParameter("marks_percentage", marks_percentage, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(marks_percentage_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsChildrenResults", sqlParameters);

            return taskString;
        }



        public DataSet InsertDependantPhoto(System.String p_file_name,
                                                        System.Byte[] p_photo,
                                                        System.DateTime? p_photo_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_file_name_Parameter = ObjDBManager.CreateSqlParameter("p_file_name", p_file_name, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_file_name_Parameter);
            SqlParameter p_photo_Parameter = ObjDBManager.CreateSqlParameter("p_photo", p_photo, SqlDbType.Image, ParameterDirection.Input);
            sqlParameters.Add(p_photo_Parameter);
            SqlParameter p_photo_dt_Parameter = ObjDBManager.CreateSqlParameter("p_photo_dt", p_photo_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(p_photo_dt_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsertDependantPhoto", sqlParameters);

            return dset;
        }

        public string InsertDependantPhotoAsTask(System.String p_file_name,
                                                            System.Byte[] p_photo,
                                                            System.DateTime? p_photo_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_file_name_Parameter = ObjDBManager.CreateSqlParameter("p_file_name", p_file_name, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_file_name_Parameter);
            SqlParameter p_photo_Parameter = ObjDBManager.CreateSqlParameter("p_photo", p_photo, SqlDbType.Image, ParameterDirection.Input);
            sqlParameters.Add(p_photo_Parameter);
            SqlParameter p_photo_dt_Parameter = ObjDBManager.CreateSqlParameter("p_photo_dt", p_photo_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(p_photo_dt_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsertDependantPhoto", sqlParameters);

            return taskString;
        }



        public DataSet InsertGrade(ref System.Int16 grade_id,
                                                System.String grade_nm,
                                                System.Int32? starting_pay_scale,
                                                System.Int32? increment_1,
                                                System.Int32? intermediate_scale,
                                                System.Int32? increment_2,
                                                System.Int32? final_pay_scale,
                                                System.DateTime? effective_from,
                                                System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(grade_id_Parameter);
            SqlParameter grade_nm_Parameter = ObjDBManager.CreateSqlParameter("grade_nm", grade_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(grade_nm_Parameter);
            SqlParameter starting_pay_scale_Parameter = ObjDBManager.CreateSqlParameter("starting_pay_scale", starting_pay_scale, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(starting_pay_scale_Parameter);
            SqlParameter increment_1_Parameter = ObjDBManager.CreateSqlParameter("increment_1", increment_1, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(increment_1_Parameter);
            SqlParameter intermediate_scale_Parameter = ObjDBManager.CreateSqlParameter("intermediate_scale", intermediate_scale, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(intermediate_scale_Parameter);
            SqlParameter increment_2_Parameter = ObjDBManager.CreateSqlParameter("increment_2", increment_2, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(increment_2_Parameter);
            SqlParameter final_pay_scale_Parameter = ObjDBManager.CreateSqlParameter("final_pay_scale", final_pay_scale, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(final_pay_scale_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsertGrade", sqlParameters);
            grade_id = (System.Int16)grade_id_Parameter.Value;

            return dset;
        }

        public string InsertGradeAsTask(ref System.Int16 grade_id,
                                                    System.String grade_nm,
                                                    System.Int32? starting_pay_scale,
                                                    System.Int32? increment_1,
                                                    System.Int32? intermediate_scale,
                                                    System.Int32? increment_2,
                                                    System.Int32? final_pay_scale,
                                                    System.DateTime? effective_from,
                                                    System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(grade_id_Parameter);
            SqlParameter grade_nm_Parameter = ObjDBManager.CreateSqlParameter("grade_nm", grade_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(grade_nm_Parameter);
            SqlParameter starting_pay_scale_Parameter = ObjDBManager.CreateSqlParameter("starting_pay_scale", starting_pay_scale, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(starting_pay_scale_Parameter);
            SqlParameter increment_1_Parameter = ObjDBManager.CreateSqlParameter("increment_1", increment_1, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(increment_1_Parameter);
            SqlParameter intermediate_scale_Parameter = ObjDBManager.CreateSqlParameter("intermediate_scale", intermediate_scale, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(intermediate_scale_Parameter);
            SqlParameter increment_2_Parameter = ObjDBManager.CreateSqlParameter("increment_2", increment_2, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(increment_2_Parameter);
            SqlParameter final_pay_scale_Parameter = ObjDBManager.CreateSqlParameter("final_pay_scale", final_pay_scale, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(final_pay_scale_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsertGrade", sqlParameters);
            grade_id = (System.Int16)grade_id_Parameter.Value;

            return taskString;
        }



        public DataSet InsertPhoto(System.Int32? p_person_id,
                                                System.Byte[] p_photo,
                                                System.DateTime? p_photo_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_person_id_Parameter = ObjDBManager.CreateSqlParameter("p_person_id", p_person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_person_id_Parameter);
            SqlParameter p_photo_Parameter = ObjDBManager.CreateSqlParameter("p_photo", p_photo, SqlDbType.Image, ParameterDirection.Input);
            sqlParameters.Add(p_photo_Parameter);
            SqlParameter p_photo_dt_Parameter = ObjDBManager.CreateSqlParameter("p_photo_dt", p_photo_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(p_photo_dt_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsertPhoto", sqlParameters);

            return dset;
        }

        public string InsertPhotoAsTask(System.Int32? p_person_id,
                                                    System.Byte[] p_photo,
                                                    System.DateTime? p_photo_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_person_id_Parameter = ObjDBManager.CreateSqlParameter("p_person_id", p_person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_person_id_Parameter);
            SqlParameter p_photo_Parameter = ObjDBManager.CreateSqlParameter("p_photo", p_photo, SqlDbType.Image, ParameterDirection.Input);
            sqlParameters.Add(p_photo_Parameter);
            SqlParameter p_photo_dt_Parameter = ObjDBManager.CreateSqlParameter("p_photo_dt", p_photo_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(p_photo_dt_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsertPhoto", sqlParameters);

            return taskString;
        }



        public DataSet InsertTestProc(ref System.Int32 id,
                                                    System.String name,
                                                    System.String lastname,
                                                    System.Int32? age)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter id_Parameter = ObjDBManager.CreateSqlParameter("id", id, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(id_Parameter);
            SqlParameter name_Parameter = ObjDBManager.CreateSqlParameter("name", name, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(name_Parameter);
            SqlParameter lastname_Parameter = ObjDBManager.CreateSqlParameter("lastname", lastname, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(lastname_Parameter);
            SqlParameter age_Parameter = ObjDBManager.CreateSqlParameter("age", age, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(age_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsertTestProc", sqlParameters);
            id = (System.Int32)id_Parameter.Value;

            return dset;
        }

        public string InsertTestProcAsTask(ref System.Int32 id,
                                                        System.String name,
                                                        System.String lastname,
                                                        System.Int32? age)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter id_Parameter = ObjDBManager.CreateSqlParameter("id", id, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(id_Parameter);
            SqlParameter name_Parameter = ObjDBManager.CreateSqlParameter("name", name, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(name_Parameter);
            SqlParameter lastname_Parameter = ObjDBManager.CreateSqlParameter("lastname", lastname, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(lastname_Parameter);
            SqlParameter age_Parameter = ObjDBManager.CreateSqlParameter("age", age, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(age_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsertTestProc", sqlParameters);
            id = (System.Int32)id_Parameter.Value;

            return taskString;
        }



        public DataSet InsGrades(ref System.Int16 grade_id,
                                            System.String grade_nm,
                                            System.Int32? starting_pay_scale,
                                            System.Int32? increment_1,
                                            System.Int32? intermediate_scale,
                                            System.Int32? increment_2,
                                            System.Int32? final_pay_scale,
                                            System.DateTime? effective_from,
                                            System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(grade_id_Parameter);
            SqlParameter grade_nm_Parameter = ObjDBManager.CreateSqlParameter("grade_nm", grade_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(grade_nm_Parameter);
            SqlParameter starting_pay_scale_Parameter = ObjDBManager.CreateSqlParameter("starting_pay_scale", starting_pay_scale, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(starting_pay_scale_Parameter);
            SqlParameter increment_1_Parameter = ObjDBManager.CreateSqlParameter("increment_1", increment_1, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(increment_1_Parameter);
            SqlParameter intermediate_scale_Parameter = ObjDBManager.CreateSqlParameter("intermediate_scale", intermediate_scale, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(intermediate_scale_Parameter);
            SqlParameter increment_2_Parameter = ObjDBManager.CreateSqlParameter("increment_2", increment_2, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(increment_2_Parameter);
            SqlParameter final_pay_scale_Parameter = ObjDBManager.CreateSqlParameter("final_pay_scale", final_pay_scale, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(final_pay_scale_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsGrades", sqlParameters);
            grade_id = (System.Int16)grade_id_Parameter.Value;

            return dset;
        }

        public string InsGradesAsTask(ref System.Int16 grade_id,
                                                    System.String grade_nm,
                                                    System.Int32? starting_pay_scale,
                                                    System.Int32? increment_1,
                                                    System.Int32? intermediate_scale,
                                                    System.Int32? increment_2,
                                                    System.Int32? final_pay_scale,
                                                    System.DateTime? effective_from,
                                                    System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(grade_id_Parameter);
            SqlParameter grade_nm_Parameter = ObjDBManager.CreateSqlParameter("grade_nm", grade_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(grade_nm_Parameter);
            SqlParameter starting_pay_scale_Parameter = ObjDBManager.CreateSqlParameter("starting_pay_scale", starting_pay_scale, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(starting_pay_scale_Parameter);
            SqlParameter increment_1_Parameter = ObjDBManager.CreateSqlParameter("increment_1", increment_1, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(increment_1_Parameter);
            SqlParameter intermediate_scale_Parameter = ObjDBManager.CreateSqlParameter("intermediate_scale", intermediate_scale, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(intermediate_scale_Parameter);
            SqlParameter increment_2_Parameter = ObjDBManager.CreateSqlParameter("increment_2", increment_2, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(increment_2_Parameter);
            SqlParameter final_pay_scale_Parameter = ObjDBManager.CreateSqlParameter("final_pay_scale", final_pay_scale, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(final_pay_scale_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsGrades", sqlParameters);
            grade_id = (System.Int16)grade_id_Parameter.Value;

            return taskString;
        }



        public DataSet InsHouseTypes(ref System.Int16 housing_type_id,
                                                System.String housing_type_cd,
                                                System.String housing_type_nm,
                                                System.DateTime? effective_from,
                                                System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_type_id_Parameter = ObjDBManager.CreateSqlParameter("housing_type_id", housing_type_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(housing_type_id_Parameter);
            SqlParameter housing_type_cd_Parameter = ObjDBManager.CreateSqlParameter("housing_type_cd", housing_type_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(housing_type_cd_Parameter);
            SqlParameter housing_type_nm_Parameter = ObjDBManager.CreateSqlParameter("housing_type_nm", housing_type_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(housing_type_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsHouseTypes", sqlParameters);
            housing_type_id = (System.Int16)housing_type_id_Parameter.Value;

            return dset;
        }

        public string InsHouseTypesAsTask(ref System.Int16 housing_type_id,
                                                        System.String housing_type_cd,
                                                        System.String housing_type_nm,
                                                        System.DateTime? effective_from,
                                                        System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_type_id_Parameter = ObjDBManager.CreateSqlParameter("housing_type_id", housing_type_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(housing_type_id_Parameter);
            SqlParameter housing_type_cd_Parameter = ObjDBManager.CreateSqlParameter("housing_type_cd", housing_type_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(housing_type_cd_Parameter);
            SqlParameter housing_type_nm_Parameter = ObjDBManager.CreateSqlParameter("housing_type_nm", housing_type_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(housing_type_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsHouseTypes", sqlParameters);
            housing_type_id = (System.Int16)housing_type_id_Parameter.Value;

            return taskString;
        }



        public DataSet InsHousingPurposes(ref System.Int16 housing_purpose_id,
                                                        System.String housing_purpose_cd,
                                                        System.String housing_purpose_nm,
                                                        System.DateTime? effective_from,
                                                        System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_purpose_id_Parameter = ObjDBManager.CreateSqlParameter("housing_purpose_id", housing_purpose_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(housing_purpose_id_Parameter);
            SqlParameter housing_purpose_cd_Parameter = ObjDBManager.CreateSqlParameter("housing_purpose_cd", housing_purpose_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(housing_purpose_cd_Parameter);
            SqlParameter housing_purpose_nm_Parameter = ObjDBManager.CreateSqlParameter("housing_purpose_nm", housing_purpose_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(housing_purpose_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsHousingPurposes", sqlParameters);
            housing_purpose_id = (System.Int16)housing_purpose_id_Parameter.Value;

            return dset;
        }

        public string InsHousingPurposesAsTask(ref System.Int16 housing_purpose_id,
                                                            System.String housing_purpose_cd,
                                                            System.String housing_purpose_nm,
                                                            System.DateTime? effective_from,
                                                            System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_purpose_id_Parameter = ObjDBManager.CreateSqlParameter("housing_purpose_id", housing_purpose_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(housing_purpose_id_Parameter);
            SqlParameter housing_purpose_cd_Parameter = ObjDBManager.CreateSqlParameter("housing_purpose_cd", housing_purpose_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(housing_purpose_cd_Parameter);
            SqlParameter housing_purpose_nm_Parameter = ObjDBManager.CreateSqlParameter("housing_purpose_nm", housing_purpose_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(housing_purpose_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsHousingPurposes", sqlParameters);
            housing_purpose_id = (System.Int16)housing_purpose_id_Parameter.Value;

            return taskString;
        }



        public DataSet InsHousingUnits(System.Int16? in_housing_status_id,
                                                    System.Int16? in_status_reason_id,
                                                    System.DateTime? in_status_dt,
                                                    System.String in_location_full_nm,
                                                    System.String in_location_short_nm,
                                                    System.String in_location_cd,
                                                    System.String in_address_part,
                                                    System.String in_separator,
                                                    System.String in_housing_location_addr,
                                                    System.String in_is_root,
                                                    System.String in_is_leaf,
                                                    System.Int32? in_group_location_id,
                                                    System.Int16? in_housing_purpose_id,
                                                    System.Int16? in_housing_type_id,
                                                    System.String in_remarks,
                                                    System.DateTime? in_effective_from,
                                                    System.DateTime? in_effective_till,
                                                    ref System.Int32 out_housing_unit_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_housing_status_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_status_id", in_housing_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_housing_status_id_Parameter);
            SqlParameter in_status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("in_status_reason_id", in_status_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_status_reason_id_Parameter);
            SqlParameter in_status_dt_Parameter = ObjDBManager.CreateSqlParameter("in_status_dt", in_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(in_status_dt_Parameter);
            SqlParameter in_location_full_nm_Parameter = ObjDBManager.CreateSqlParameter("in_location_full_nm", in_location_full_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_location_full_nm_Parameter);
            SqlParameter in_location_short_nm_Parameter = ObjDBManager.CreateSqlParameter("in_location_short_nm", in_location_short_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_location_short_nm_Parameter);
            SqlParameter in_location_cd_Parameter = ObjDBManager.CreateSqlParameter("in_location_cd", in_location_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_location_cd_Parameter);
            SqlParameter in_address_part_Parameter = ObjDBManager.CreateSqlParameter("in_address_part", in_address_part, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(in_address_part_Parameter);
            SqlParameter in_separator_Parameter = ObjDBManager.CreateSqlParameter("in_separator", in_separator, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_separator_Parameter);
            SqlParameter in_housing_location_addr_Parameter = ObjDBManager.CreateSqlParameter("in_housing_location_addr", in_housing_location_addr, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_housing_location_addr_Parameter);
            SqlParameter in_is_root_Parameter = ObjDBManager.CreateSqlParameter("in_is_root", in_is_root, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_is_root_Parameter);
            SqlParameter in_is_leaf_Parameter = ObjDBManager.CreateSqlParameter("in_is_leaf", in_is_leaf, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_is_leaf_Parameter);
            SqlParameter in_group_location_id_Parameter = ObjDBManager.CreateSqlParameter("in_group_location_id", in_group_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_group_location_id_Parameter);
            SqlParameter in_housing_purpose_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_purpose_id", in_housing_purpose_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_housing_purpose_id_Parameter);
            SqlParameter in_housing_type_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_type_id", in_housing_type_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_housing_type_id_Parameter);
            SqlParameter in_remarks_Parameter = ObjDBManager.CreateSqlParameter("in_remarks", in_remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_remarks_Parameter);
            SqlParameter in_effective_from_Parameter = ObjDBManager.CreateSqlParameter("in_effective_from", in_effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(in_effective_from_Parameter);
            SqlParameter in_effective_till_Parameter = ObjDBManager.CreateSqlParameter("in_effective_till", in_effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(in_effective_till_Parameter);
            SqlParameter out_housing_unit_id_Parameter = ObjDBManager.CreateSqlParameter("out_housing_unit_id", out_housing_unit_id, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(out_housing_unit_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsHousingUnits", sqlParameters);
            out_housing_unit_id = (System.Int32)out_housing_unit_id_Parameter.Value;

            return dset;
        }

        public string InsHousingUnitsAsTask(System.Int16? in_housing_status_id,
                                                        System.Int16? in_status_reason_id,
                                                        System.DateTime? in_status_dt,
                                                        System.String in_location_full_nm,
                                                        System.String in_location_short_nm,
                                                        System.String in_location_cd,
                                                        System.String in_address_part,
                                                        System.String in_separator,
                                                        System.String in_housing_location_addr,
                                                        System.String in_is_root,
                                                        System.String in_is_leaf,
                                                        System.Int32? in_group_location_id,
                                                        System.Int16? in_housing_purpose_id,
                                                        System.Int16? in_housing_type_id,
                                                        System.String in_remarks,
                                                        System.DateTime? in_effective_from,
                                                        System.DateTime? in_effective_till,
                                                        ref System.Int32 out_housing_unit_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_housing_status_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_status_id", in_housing_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_housing_status_id_Parameter);
            SqlParameter in_status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("in_status_reason_id", in_status_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_status_reason_id_Parameter);
            SqlParameter in_status_dt_Parameter = ObjDBManager.CreateSqlParameter("in_status_dt", in_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(in_status_dt_Parameter);
            SqlParameter in_location_full_nm_Parameter = ObjDBManager.CreateSqlParameter("in_location_full_nm", in_location_full_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_location_full_nm_Parameter);
            SqlParameter in_location_short_nm_Parameter = ObjDBManager.CreateSqlParameter("in_location_short_nm", in_location_short_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_location_short_nm_Parameter);
            SqlParameter in_location_cd_Parameter = ObjDBManager.CreateSqlParameter("in_location_cd", in_location_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_location_cd_Parameter);
            SqlParameter in_address_part_Parameter = ObjDBManager.CreateSqlParameter("in_address_part", in_address_part, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(in_address_part_Parameter);
            SqlParameter in_separator_Parameter = ObjDBManager.CreateSqlParameter("in_separator", in_separator, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_separator_Parameter);
            SqlParameter in_housing_location_addr_Parameter = ObjDBManager.CreateSqlParameter("in_housing_location_addr", in_housing_location_addr, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_housing_location_addr_Parameter);
            SqlParameter in_is_root_Parameter = ObjDBManager.CreateSqlParameter("in_is_root", in_is_root, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_is_root_Parameter);
            SqlParameter in_is_leaf_Parameter = ObjDBManager.CreateSqlParameter("in_is_leaf", in_is_leaf, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_is_leaf_Parameter);
            SqlParameter in_group_location_id_Parameter = ObjDBManager.CreateSqlParameter("in_group_location_id", in_group_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_group_location_id_Parameter);
            SqlParameter in_housing_purpose_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_purpose_id", in_housing_purpose_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_housing_purpose_id_Parameter);
            SqlParameter in_housing_type_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_type_id", in_housing_type_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_housing_type_id_Parameter);
            SqlParameter in_remarks_Parameter = ObjDBManager.CreateSqlParameter("in_remarks", in_remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_remarks_Parameter);
            SqlParameter in_effective_from_Parameter = ObjDBManager.CreateSqlParameter("in_effective_from", in_effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(in_effective_from_Parameter);
            SqlParameter in_effective_till_Parameter = ObjDBManager.CreateSqlParameter("in_effective_till", in_effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(in_effective_till_Parameter);
            SqlParameter out_housing_unit_id_Parameter = ObjDBManager.CreateSqlParameter("out_housing_unit_id", out_housing_unit_id, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(out_housing_unit_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsHousingUnits", sqlParameters);
            out_housing_unit_id = (System.Int32)out_housing_unit_id_Parameter.Value;

            return taskString;
        }



        public DataSet InsId_card_requestsDetailChange(System.Int32? person_id,
                                                                    System.Int16? request_reason_id,
                                                                    System.Int16? request_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter request_reason_id_Parameter = ObjDBManager.CreateSqlParameter("request_reason_id", request_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(request_reason_id_Parameter);
            SqlParameter request_status_id_Parameter = ObjDBManager.CreateSqlParameter("request_status_id", request_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(request_status_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsId_card_requestsDetailChange", sqlParameters);

            return dset;
        }

        public string InsId_card_requestsDetailChangeAsTask(System.Int32? person_id,
                                                                        System.Int16? request_reason_id,
                                                                        System.Int16? request_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter request_reason_id_Parameter = ObjDBManager.CreateSqlParameter("request_reason_id", request_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(request_reason_id_Parameter);
            SqlParameter request_status_id_Parameter = ObjDBManager.CreateSqlParameter("request_status_id", request_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(request_status_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsId_card_requestsDetailChange", sqlParameters);

            return taskString;
        }



        public DataSet InsIDCardRequestReasons(ref System.Int16 id_card_request_reason_id,
                                                            System.String id_card_request_reason_cd,
                                                            System.String id_card_request_reason_nm,
                                                            System.DateTime? effective_from,
                                                            System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter id_card_request_reason_id_Parameter = ObjDBManager.CreateSqlParameter("id_card_request_reason_id", id_card_request_reason_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(id_card_request_reason_id_Parameter);
            SqlParameter id_card_request_reason_cd_Parameter = ObjDBManager.CreateSqlParameter("id_card_request_reason_cd", id_card_request_reason_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(id_card_request_reason_cd_Parameter);
            SqlParameter id_card_request_reason_nm_Parameter = ObjDBManager.CreateSqlParameter("id_card_request_reason_nm", id_card_request_reason_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(id_card_request_reason_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsIDCardRequestReasons", sqlParameters);
            id_card_request_reason_id = (System.Int16)id_card_request_reason_id_Parameter.Value;

            return dset;
        }

        public string InsIDCardRequestReasonsAsTask(ref System.Int16 id_card_request_reason_id,
                                                                System.String id_card_request_reason_cd,
                                                                System.String id_card_request_reason_nm,
                                                                System.DateTime? effective_from,
                                                                System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter id_card_request_reason_id_Parameter = ObjDBManager.CreateSqlParameter("id_card_request_reason_id", id_card_request_reason_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(id_card_request_reason_id_Parameter);
            SqlParameter id_card_request_reason_cd_Parameter = ObjDBManager.CreateSqlParameter("id_card_request_reason_cd", id_card_request_reason_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(id_card_request_reason_cd_Parameter);
            SqlParameter id_card_request_reason_nm_Parameter = ObjDBManager.CreateSqlParameter("id_card_request_reason_nm", id_card_request_reason_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(id_card_request_reason_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsIDCardRequestReasons", sqlParameters);
            id_card_request_reason_id = (System.Int16)id_card_request_reason_id_Parameter.Value;

            return taskString;
        }



        public DataSet InsInstitutions(ref System.Int16 institution_id,
                                                    System.String institution_cd,
                                                    System.String institution_nm,
                                                    System.String institution_type,
                                                    System.String location,
                                                    System.String is_transport_reqd,
                                                    System.DateTime? effective_from,
                                                    System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter institution_id_Parameter = ObjDBManager.CreateSqlParameter("institution_id", institution_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(institution_id_Parameter);
            SqlParameter institution_cd_Parameter = ObjDBManager.CreateSqlParameter("institution_cd", institution_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_cd_Parameter);
            SqlParameter institution_nm_Parameter = ObjDBManager.CreateSqlParameter("institution_nm", institution_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_nm_Parameter);
            SqlParameter institution_type_Parameter = ObjDBManager.CreateSqlParameter("institution_type", institution_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_type_Parameter);
            SqlParameter location_Parameter = ObjDBManager.CreateSqlParameter("location", location, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(location_Parameter);
            SqlParameter is_transport_reqd_Parameter = ObjDBManager.CreateSqlParameter("is_transport_reqd", is_transport_reqd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_transport_reqd_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsInstitutions", sqlParameters);
            institution_id = (System.Int16)institution_id_Parameter.Value;

            return dset;
        }

        public string InsInstitutionsAsTask(ref System.Int16 institution_id,
                                                        System.String institution_cd,
                                                        System.String institution_nm,
                                                        System.String institution_type,
                                                        System.String location,
                                                        System.String is_transport_reqd,
                                                        System.DateTime? effective_from,
                                                        System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter institution_id_Parameter = ObjDBManager.CreateSqlParameter("institution_id", institution_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(institution_id_Parameter);
            SqlParameter institution_cd_Parameter = ObjDBManager.CreateSqlParameter("institution_cd", institution_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_cd_Parameter);
            SqlParameter institution_nm_Parameter = ObjDBManager.CreateSqlParameter("institution_nm", institution_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_nm_Parameter);
            SqlParameter institution_type_Parameter = ObjDBManager.CreateSqlParameter("institution_type", institution_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_type_Parameter);
            SqlParameter location_Parameter = ObjDBManager.CreateSqlParameter("location", location, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(location_Parameter);
            SqlParameter is_transport_reqd_Parameter = ObjDBManager.CreateSqlParameter("is_transport_reqd", is_transport_reqd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_transport_reqd_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsInstitutions", sqlParameters);
            institution_id = (System.Int16)institution_id_Parameter.Value;

            return taskString;
        }



        public DataSet InsNotification(ref System.Int32 notification_id,
                                                    System.DateTime? effective_dt,
                                                    System.Int16? template_id,
                                                    System.String notification_subject,
                                                    System.String notification_remarks,
                                                    System.String notification_status_cd,
                                                    System.DateTime? notification_status_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(notification_id_Parameter);
            SqlParameter effective_dt_Parameter = ObjDBManager.CreateSqlParameter("effective_dt", effective_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_dt_Parameter);
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter notification_subject_Parameter = ObjDBManager.CreateSqlParameter("notification_subject", notification_subject, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_subject_Parameter);
            SqlParameter notification_remarks_Parameter = ObjDBManager.CreateSqlParameter("notification_remarks", notification_remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_remarks_Parameter);
            SqlParameter notification_status_cd_Parameter = ObjDBManager.CreateSqlParameter("notification_status_cd", notification_status_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_status_cd_Parameter);
            SqlParameter notification_status_dt_Parameter = ObjDBManager.CreateSqlParameter("notification_status_dt", notification_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(notification_status_dt_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsNotification", sqlParameters);
            notification_id = (System.Int32)notification_id_Parameter.Value;

            return dset;
        }

        public string InsNotificationAsTask(ref System.Int32 notification_id,
                                                        System.DateTime? effective_dt,
                                                        System.Int16? template_id,
                                                        System.String notification_subject,
                                                        System.String notification_remarks,
                                                        System.String notification_status_cd,
                                                        System.DateTime? notification_status_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(notification_id_Parameter);
            SqlParameter effective_dt_Parameter = ObjDBManager.CreateSqlParameter("effective_dt", effective_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_dt_Parameter);
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter notification_subject_Parameter = ObjDBManager.CreateSqlParameter("notification_subject", notification_subject, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_subject_Parameter);
            SqlParameter notification_remarks_Parameter = ObjDBManager.CreateSqlParameter("notification_remarks", notification_remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_remarks_Parameter);
            SqlParameter notification_status_cd_Parameter = ObjDBManager.CreateSqlParameter("notification_status_cd", notification_status_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_status_cd_Parameter);
            SqlParameter notification_status_dt_Parameter = ObjDBManager.CreateSqlParameter("notification_status_dt", notification_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(notification_status_dt_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsNotification", sqlParameters);
            notification_id = (System.Int32)notification_id_Parameter.Value;

            return taskString;
        }



        public DataSet Insnotification_addressee_place_holders(System.Int32? addressee_id,
                                                                            System.Int16? place_holder_sq,
                                                                            System.String place_holder_cd,
                                                                            System.String place_holder_format_cd,
                                                                            System.String separator,
                                                                            System.Int16? working_unit_id,
                                                                            System.Int16? designation_id,
                                                                            System.Int32? sewadar_id,
                                                                            System.Int16? grade_id,
                                                                            System.Int16? sewadar_status_id,
                                                                            System.Byte? sewadar_type_id,
                                                                            System.String free_text)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter addressee_id_Parameter = ObjDBManager.CreateSqlParameter("addressee_id", addressee_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(addressee_id_Parameter);
            SqlParameter place_holder_sq_Parameter = ObjDBManager.CreateSqlParameter("place_holder_sq", place_holder_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(place_holder_sq_Parameter);
            SqlParameter place_holder_cd_Parameter = ObjDBManager.CreateSqlParameter("place_holder_cd", place_holder_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(place_holder_cd_Parameter);
            SqlParameter place_holder_format_cd_Parameter = ObjDBManager.CreateSqlParameter("place_holder_format_cd", place_holder_format_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(place_holder_format_cd_Parameter);
            SqlParameter separator_Parameter = ObjDBManager.CreateSqlParameter("separator", separator, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(separator_Parameter);
            SqlParameter working_unit_id_Parameter = ObjDBManager.CreateSqlParameter("working_unit_id", working_unit_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(working_unit_id_Parameter);
            SqlParameter designation_id_Parameter = ObjDBManager.CreateSqlParameter("designation_id", designation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(designation_id_Parameter);
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(grade_id_Parameter);
            SqlParameter sewadar_status_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_status_id", sewadar_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(sewadar_status_id_Parameter);
            SqlParameter sewadar_type_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_type_id", sewadar_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(sewadar_type_id_Parameter);
            SqlParameter free_text_Parameter = ObjDBManager.CreateSqlParameter("free_text", free_text, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(free_text_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Insnotification_addressee_place_holders", sqlParameters);

            return dset;
        }

        public string Insnotification_addressee_place_holdersAsTask(System.Int32? addressee_id,
                                                                                System.Int16? place_holder_sq,
                                                                                System.String place_holder_cd,
                                                                                System.String place_holder_format_cd,
                                                                                System.String separator,
                                                                                System.Int16? working_unit_id,
                                                                                System.Int16? designation_id,
                                                                                System.Int32? sewadar_id,
                                                                                System.Int16? grade_id,
                                                                                System.Int16? sewadar_status_id,
                                                                                System.Byte? sewadar_type_id,
                                                                                System.String free_text)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter addressee_id_Parameter = ObjDBManager.CreateSqlParameter("addressee_id", addressee_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(addressee_id_Parameter);
            SqlParameter place_holder_sq_Parameter = ObjDBManager.CreateSqlParameter("place_holder_sq", place_holder_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(place_holder_sq_Parameter);
            SqlParameter place_holder_cd_Parameter = ObjDBManager.CreateSqlParameter("place_holder_cd", place_holder_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(place_holder_cd_Parameter);
            SqlParameter place_holder_format_cd_Parameter = ObjDBManager.CreateSqlParameter("place_holder_format_cd", place_holder_format_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(place_holder_format_cd_Parameter);
            SqlParameter separator_Parameter = ObjDBManager.CreateSqlParameter("separator", separator, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(separator_Parameter);
            SqlParameter working_unit_id_Parameter = ObjDBManager.CreateSqlParameter("working_unit_id", working_unit_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(working_unit_id_Parameter);
            SqlParameter designation_id_Parameter = ObjDBManager.CreateSqlParameter("designation_id", designation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(designation_id_Parameter);
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(grade_id_Parameter);
            SqlParameter sewadar_status_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_status_id", sewadar_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(sewadar_status_id_Parameter);
            SqlParameter sewadar_type_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_type_id", sewadar_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(sewadar_type_id_Parameter);
            SqlParameter free_text_Parameter = ObjDBManager.CreateSqlParameter("free_text", free_text, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(free_text_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Insnotification_addressee_place_holders", sqlParameters);

            return taskString;
        }



        public DataSet InsNotification_addressee_place_holders_Edit(System.Int32? addressee_id,
                                                                                System.String addressee_txt,
                                                                                System.Int16? template_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter addressee_id_Parameter = ObjDBManager.CreateSqlParameter("addressee_id", addressee_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(addressee_id_Parameter);
            SqlParameter addressee_txt_Parameter = ObjDBManager.CreateSqlParameter("addressee_txt", addressee_txt, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(addressee_txt_Parameter);
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsNotification_addressee_place_holders_Edit", sqlParameters);

            return dset;
        }

        public string InsNotification_addressee_place_holders_EditAsTask(System.Int32? addressee_id,
                                                                                    System.String addressee_txt,
                                                                                    System.Int16? template_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter addressee_id_Parameter = ObjDBManager.CreateSqlParameter("addressee_id", addressee_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(addressee_id_Parameter);
            SqlParameter addressee_txt_Parameter = ObjDBManager.CreateSqlParameter("addressee_txt", addressee_txt, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(addressee_txt_Parameter);
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsNotification_addressee_place_holders_Edit", sqlParameters);

            return taskString;
        }



        public DataSet Insnotification_addressees(System.Int32? notification_id,
                                                                System.Int16? template_id,
                                                                System.String addressee_type,
                                                                System.Int16? addressee_sq,
                                                                System.String addressee_txt,
                                                                ref System.Int32 addressee_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter addressee_type_Parameter = ObjDBManager.CreateSqlParameter("addressee_type", addressee_type, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(addressee_type_Parameter);
            SqlParameter addressee_sq_Parameter = ObjDBManager.CreateSqlParameter("addressee_sq", addressee_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(addressee_sq_Parameter);
            SqlParameter addressee_txt_Parameter = ObjDBManager.CreateSqlParameter("addressee_txt", addressee_txt, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(addressee_txt_Parameter);
            SqlParameter addressee_id_Parameter = ObjDBManager.CreateSqlParameter("addressee_id", addressee_id, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(addressee_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Insnotification_addressees", sqlParameters);
            addressee_id = (System.Int32)addressee_id_Parameter.Value;

            return dset;
        }

        public string Insnotification_addresseesAsTask(System.Int32? notification_id,
                                                                    System.Int16? template_id,
                                                                    System.String addressee_type,
                                                                    System.Int16? addressee_sq,
                                                                    System.String addressee_txt,
                                                                    ref System.Int32 addressee_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter addressee_type_Parameter = ObjDBManager.CreateSqlParameter("addressee_type", addressee_type, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(addressee_type_Parameter);
            SqlParameter addressee_sq_Parameter = ObjDBManager.CreateSqlParameter("addressee_sq", addressee_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(addressee_sq_Parameter);
            SqlParameter addressee_txt_Parameter = ObjDBManager.CreateSqlParameter("addressee_txt", addressee_txt, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(addressee_txt_Parameter);
            SqlParameter addressee_id_Parameter = ObjDBManager.CreateSqlParameter("addressee_id", addressee_id, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(addressee_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Insnotification_addressees", sqlParameters);
            addressee_id = (System.Int32)addressee_id_Parameter.Value;

            return taskString;
        }



        public DataSet Insnotification_template_paragraphs(System.Int16? template_id,
                                                                        System.Int16? template_para_sq,
                                                                        System.String template_para)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter template_para_sq_Parameter = ObjDBManager.CreateSqlParameter("template_para_sq", template_para_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_para_sq_Parameter);
            SqlParameter template_para_Parameter = ObjDBManager.CreateSqlParameter("template_para", template_para, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(template_para_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Insnotification_template_paragraphs", sqlParameters);

            return dset;
        }

        public string Insnotification_template_paragraphsAsTask(System.Int16? template_id,
                                                                            System.Int16? template_para_sq,
                                                                            System.String template_para)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter template_para_sq_Parameter = ObjDBManager.CreateSqlParameter("template_para_sq", template_para_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_para_sq_Parameter);
            SqlParameter template_para_Parameter = ObjDBManager.CreateSqlParameter("template_para", template_para, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(template_para_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Insnotification_template_paragraphs", sqlParameters);

            return taskString;
        }



        public DataSet Insnotification_templates(ref System.Int16 template_id,
                                                            System.String template_nm,
                                                            System.String template_subject,
                                                            System.String can_use_for_multiple_sewadars,
                                                            System.DateTime? effective_from,
                                                            System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter template_nm_Parameter = ObjDBManager.CreateSqlParameter("template_nm", template_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(template_nm_Parameter);
            SqlParameter template_subject_Parameter = ObjDBManager.CreateSqlParameter("template_subject", template_subject, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(template_subject_Parameter);
            SqlParameter can_use_for_multiple_sewadars_Parameter = ObjDBManager.CreateSqlParameter("can_use_for_multiple_sewadars", can_use_for_multiple_sewadars, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(can_use_for_multiple_sewadars_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Insnotification_templates", sqlParameters);
            template_id = (System.Int16)template_id_Parameter.Value;

            return dset;
        }

        public string Insnotification_templatesAsTask(ref System.Int16 template_id,
                                                                    System.String template_nm,
                                                                    System.String template_subject,
                                                                    System.String can_use_for_multiple_sewadars,
                                                                    System.DateTime? effective_from,
                                                                    System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter template_nm_Parameter = ObjDBManager.CreateSqlParameter("template_nm", template_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(template_nm_Parameter);
            SqlParameter template_subject_Parameter = ObjDBManager.CreateSqlParameter("template_subject", template_subject, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(template_subject_Parameter);
            SqlParameter can_use_for_multiple_sewadars_Parameter = ObjDBManager.CreateSqlParameter("can_use_for_multiple_sewadars", can_use_for_multiple_sewadars, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(can_use_for_multiple_sewadars_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Insnotification_templates", sqlParameters);
            template_id = (System.Int16)template_id_Parameter.Value;

            return taskString;
        }



        public DataSet Insnotifications_paragraphs(System.Int32? notification_id,
                                                                System.Int16? notification_para_sq,
                                                                System.String notification_para)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            SqlParameter notification_para_sq_Parameter = ObjDBManager.CreateSqlParameter("notification_para_sq", notification_para_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(notification_para_sq_Parameter);
            SqlParameter notification_para_Parameter = ObjDBManager.CreateSqlParameter("notification_para", notification_para, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_para_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Insnotifications_paragraphs", sqlParameters);

            return dset;
        }

        public string Insnotifications_paragraphsAsTask(System.Int32? notification_id,
                                                                    System.Int16? notification_para_sq,
                                                                    System.String notification_para)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            SqlParameter notification_para_sq_Parameter = ObjDBManager.CreateSqlParameter("notification_para_sq", notification_para_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(notification_para_sq_Parameter);
            SqlParameter notification_para_Parameter = ObjDBManager.CreateSqlParameter("notification_para", notification_para, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_para_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Insnotifications_paragraphs", sqlParameters);

            return taskString;
        }



        public DataSet InsNotInsuredReasons(ref System.Int16 not_insured_reason_id,
                                                        System.String not_insured_reason_cd,
                                                        System.String not_insured_reason_nm,
                                                        System.DateTime? effective_from,
                                                        System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter not_insured_reason_id_Parameter = ObjDBManager.CreateSqlParameter("not_insured_reason_id", not_insured_reason_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(not_insured_reason_id_Parameter);
            SqlParameter not_insured_reason_cd_Parameter = ObjDBManager.CreateSqlParameter("not_insured_reason_cd", not_insured_reason_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(not_insured_reason_cd_Parameter);
            SqlParameter not_insured_reason_nm_Parameter = ObjDBManager.CreateSqlParameter("not_insured_reason_nm", not_insured_reason_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(not_insured_reason_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsNotInsuredReasons", sqlParameters);
            not_insured_reason_id = (System.Int16)not_insured_reason_id_Parameter.Value;

            return dset;
        }

        public string InsNotInsuredReasonsAsTask(ref System.Int16 not_insured_reason_id,
                                                            System.String not_insured_reason_cd,
                                                            System.String not_insured_reason_nm,
                                                            System.DateTime? effective_from,
                                                            System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter not_insured_reason_id_Parameter = ObjDBManager.CreateSqlParameter("not_insured_reason_id", not_insured_reason_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(not_insured_reason_id_Parameter);
            SqlParameter not_insured_reason_cd_Parameter = ObjDBManager.CreateSqlParameter("not_insured_reason_cd", not_insured_reason_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(not_insured_reason_cd_Parameter);
            SqlParameter not_insured_reason_nm_Parameter = ObjDBManager.CreateSqlParameter("not_insured_reason_nm", not_insured_reason_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(not_insured_reason_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsNotInsuredReasons", sqlParameters);
            not_insured_reason_id = (System.Int16)not_insured_reason_id_Parameter.Value;

            return taskString;
        }



        public DataSet InsPerson_Status(ref System.Int16 person_status_id,
                                                    System.String person_status_cd,
                                                    System.String person_status_nm,
                                                    System.String is_active,
                                                    System.String status_reason_need,
                                                    System.Byte? future_days,
                                                    System.String remarks,
                                                    System.DateTime? effective_from,
                                                    System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter person_status_cd_Parameter = ObjDBManager.CreateSqlParameter("person_status_cd", person_status_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_cd_Parameter);
            SqlParameter person_status_nm_Parameter = ObjDBManager.CreateSqlParameter("person_status_nm", person_status_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_nm_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            SqlParameter status_reason_need_Parameter = ObjDBManager.CreateSqlParameter("status_reason_need", status_reason_need, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(status_reason_need_Parameter);
            SqlParameter future_days_Parameter = ObjDBManager.CreateSqlParameter("future_days", future_days, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(future_days_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsPerson_Status", sqlParameters);
            person_status_id = (System.Int16)person_status_id_Parameter.Value;

            return dset;
        }

        public string InsPerson_StatusAsTask(ref System.Int16 person_status_id,
                                                        System.String person_status_cd,
                                                        System.String person_status_nm,
                                                        System.String is_active,
                                                        System.String status_reason_need,
                                                        System.Byte? future_days,
                                                        System.String remarks,
                                                        System.DateTime? effective_from,
                                                        System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter person_status_cd_Parameter = ObjDBManager.CreateSqlParameter("person_status_cd", person_status_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_cd_Parameter);
            SqlParameter person_status_nm_Parameter = ObjDBManager.CreateSqlParameter("person_status_nm", person_status_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_nm_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            SqlParameter status_reason_need_Parameter = ObjDBManager.CreateSqlParameter("status_reason_need", status_reason_need, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(status_reason_need_Parameter);
            SqlParameter future_days_Parameter = ObjDBManager.CreateSqlParameter("future_days", future_days, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(future_days_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsPerson_Status", sqlParameters);
            person_status_id = (System.Int16)person_status_id_Parameter.Value;

            return taskString;
        }



        public DataSet Insperson_status_applicability(System.Int16? person_status_id,
                                                                    System.String person_type_cd,
                                                                    System.String is_application_access)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter person_type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_type_cd", person_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_type_cd_Parameter);
            SqlParameter is_application_access_Parameter = ObjDBManager.CreateSqlParameter("is_application_access", is_application_access, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_application_access_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Insperson_status_applicability", sqlParameters);

            return dset;
        }

        public string Insperson_status_applicabilityAsTask(System.Int16? person_status_id,
                                                                        System.String person_type_cd,
                                                                        System.String is_application_access)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter person_type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_type_cd", person_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_type_cd_Parameter);
            SqlParameter is_application_access_Parameter = ObjDBManager.CreateSqlParameter("is_application_access", is_application_access, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_application_access_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Insperson_status_applicability", sqlParameters);

            return taskString;
        }



        public DataSet InsPerson_Status_Reasons(System.Int16? person_status_id,
                                                            System.String person_status_reason_cd,
                                                            System.String person_status_reason_nm,
                                                            System.DateTime? effective_from,
                                                            System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter person_status_reason_cd_Parameter = ObjDBManager.CreateSqlParameter("person_status_reason_cd", person_status_reason_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_reason_cd_Parameter);
            SqlParameter person_status_reason_nm_Parameter = ObjDBManager.CreateSqlParameter("person_status_reason_nm", person_status_reason_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_reason_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsPerson_Status_Reasons", sqlParameters);

            return dset;
        }

        public string InsPerson_Status_ReasonsAsTask(System.Int16? person_status_id,
                                                                System.String person_status_reason_cd,
                                                                System.String person_status_reason_nm,
                                                                System.DateTime? effective_from,
                                                                System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter person_status_reason_cd_Parameter = ObjDBManager.CreateSqlParameter("person_status_reason_cd", person_status_reason_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_reason_cd_Parameter);
            SqlParameter person_status_reason_nm_Parameter = ObjDBManager.CreateSqlParameter("person_status_reason_nm", person_status_reason_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_reason_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsPerson_Status_Reasons", sqlParameters);

            return taskString;
        }



        public DataSet InsPerson_StatusWrapper(ref System.Int16 person_status_id,
                                                            System.String person_status_cd,
                                                            System.String person_status_nm,
                                                            System.String is_active,
                                                            System.String status_reason_need,
                                                            System.Byte? future_days,
                                                            System.DateTime? effective_from,
                                                            System.DateTime? effective_till,
                                                            System.String person_type_cd,
                                                            System.String is_application_access)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter person_status_cd_Parameter = ObjDBManager.CreateSqlParameter("person_status_cd", person_status_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_cd_Parameter);
            SqlParameter person_status_nm_Parameter = ObjDBManager.CreateSqlParameter("person_status_nm", person_status_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_nm_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            SqlParameter status_reason_need_Parameter = ObjDBManager.CreateSqlParameter("status_reason_need", status_reason_need, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(status_reason_need_Parameter);
            SqlParameter future_days_Parameter = ObjDBManager.CreateSqlParameter("future_days", future_days, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(future_days_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            SqlParameter person_type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_type_cd", person_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_type_cd_Parameter);
            SqlParameter is_application_access_Parameter = ObjDBManager.CreateSqlParameter("is_application_access", is_application_access, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_application_access_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsPerson_StatusWrapper", sqlParameters);
            person_status_id = (System.Int16)person_status_id_Parameter.Value;

            return dset;
        }

        public string InsPerson_StatusWrapperAsTask(ref System.Int16 person_status_id,
                                                                System.String person_status_cd,
                                                                System.String person_status_nm,
                                                                System.String is_active,
                                                                System.String status_reason_need,
                                                                System.Byte? future_days,
                                                                System.DateTime? effective_from,
                                                                System.DateTime? effective_till,
                                                                System.String person_type_cd,
                                                                System.String is_application_access)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter person_status_cd_Parameter = ObjDBManager.CreateSqlParameter("person_status_cd", person_status_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_cd_Parameter);
            SqlParameter person_status_nm_Parameter = ObjDBManager.CreateSqlParameter("person_status_nm", person_status_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_nm_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            SqlParameter status_reason_need_Parameter = ObjDBManager.CreateSqlParameter("status_reason_need", status_reason_need, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(status_reason_need_Parameter);
            SqlParameter future_days_Parameter = ObjDBManager.CreateSqlParameter("future_days", future_days, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(future_days_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            SqlParameter person_type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_type_cd", person_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_type_cd_Parameter);
            SqlParameter is_application_access_Parameter = ObjDBManager.CreateSqlParameter("is_application_access", is_application_access, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_application_access_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsPerson_StatusWrapper", sqlParameters);
            person_status_id = (System.Int16)person_status_id_Parameter.Value;

            return taskString;
        }



        public DataSet InsPersons_Complaints(System.Int32? person_id,
                                                        System.DateTime? complaint_dtm,
                                                        System.String complaint_dsc,
                                                        System.String action_taken)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter complaint_dtm_Parameter = ObjDBManager.CreateSqlParameter("complaint_dtm", complaint_dtm, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(complaint_dtm_Parameter);
            SqlParameter complaint_dsc_Parameter = ObjDBManager.CreateSqlParameter("complaint_dsc", complaint_dsc, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(complaint_dsc_Parameter);
            SqlParameter action_taken_Parameter = ObjDBManager.CreateSqlParameter("action_taken", action_taken, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(action_taken_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsPersons_Complaints", sqlParameters);

            return dset;
        }

        public string InsPersons_ComplaintsAsTask(System.Int32? person_id,
                                                                System.DateTime? complaint_dtm,
                                                                System.String complaint_dsc,
                                                                System.String action_taken)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter complaint_dtm_Parameter = ObjDBManager.CreateSqlParameter("complaint_dtm", complaint_dtm, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(complaint_dtm_Parameter);
            SqlParameter complaint_dsc_Parameter = ObjDBManager.CreateSqlParameter("complaint_dsc", complaint_dsc, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(complaint_dsc_Parameter);
            SqlParameter action_taken_Parameter = ObjDBManager.CreateSqlParameter("action_taken", action_taken, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(action_taken_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsPersons_Complaints", sqlParameters);

            return taskString;
        }



        public DataSet InsPersons_confidential_remarks(System.Int32? person_id,
                                                                    System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsPersons_confidential_remarks", sqlParameters);

            return dset;
        }

        public string InsPersons_confidential_remarksAsTask(System.Int32? person_id,
                                                                        System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsPersons_confidential_remarks", sqlParameters);

            return taskString;
        }



        public DataSet InsPersons_dependants(System.Int32? person_id,
                                                        System.String person_Type_cd,
                                                        System.String first_nm,
                                                        System.String middle_nm,
                                                        System.String last_nm,
                                                        System.String short_nm,
                                                        System.String gender,
                                                        System.String marital_status,
                                                        System.DateTime? birth_dt,
                                                        System.String is_foreign_initiate,
                                                        System.Int32? initiation_id,
                                                        System.Int16? status_id,
                                                        System.DateTime? status_dt,
                                                        System.Int32? status_reason_id,
                                                        System.Int16? dependant_no,
                                                        System.Int16? relationship_id,
                                                        System.String is_dependant,
                                                        System.String is_doing_sewa,
                                                        System.String is_staying_at_dera,
                                                        System.Int16? institution_id,
                                                        System.String occupation,
                                                        System.String remarks,
                                                        System.Int32? ID_ForDependant,
                                                        System.Int16? qualification_id,
                                                        System.Int16? qlfctn_subject_id,
                                                        System.Int16? qualification_year,
                                                        System.String institution_nm)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter person_Type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_Type_cd", person_Type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_Type_cd_Parameter);
            SqlParameter first_nm_Parameter = ObjDBManager.CreateSqlParameter("first_nm", first_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(first_nm_Parameter);
            SqlParameter middle_nm_Parameter = ObjDBManager.CreateSqlParameter("middle_nm", middle_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(middle_nm_Parameter);
            SqlParameter last_nm_Parameter = ObjDBManager.CreateSqlParameter("last_nm", last_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(last_nm_Parameter);
            SqlParameter short_nm_Parameter = ObjDBManager.CreateSqlParameter("short_nm", short_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(short_nm_Parameter);
            SqlParameter gender_Parameter = ObjDBManager.CreateSqlParameter("gender", gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(gender_Parameter);
            SqlParameter marital_status_Parameter = ObjDBManager.CreateSqlParameter("marital_status", marital_status, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(marital_status_Parameter);
            SqlParameter birth_dt_Parameter = ObjDBManager.CreateSqlParameter("birth_dt", birth_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(birth_dt_Parameter);
            SqlParameter is_foreign_initiate_Parameter = ObjDBManager.CreateSqlParameter("is_foreign_initiate", is_foreign_initiate, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_foreign_initiate_Parameter);
            SqlParameter initiation_id_Parameter = ObjDBManager.CreateSqlParameter("initiation_id", initiation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(initiation_id_Parameter);
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            SqlParameter status_dt_Parameter = ObjDBManager.CreateSqlParameter("status_dt", status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(status_dt_Parameter);
            SqlParameter status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("status_reason_id", status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(status_reason_id_Parameter);
            SqlParameter dependant_no_Parameter = ObjDBManager.CreateSqlParameter("dependant_no", dependant_no, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(dependant_no_Parameter);
            SqlParameter relationship_id_Parameter = ObjDBManager.CreateSqlParameter("relationship_id", relationship_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(relationship_id_Parameter);
            SqlParameter is_dependant_Parameter = ObjDBManager.CreateSqlParameter("is_dependant", is_dependant, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_dependant_Parameter);
            SqlParameter is_doing_sewa_Parameter = ObjDBManager.CreateSqlParameter("is_doing_sewa", is_doing_sewa, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_doing_sewa_Parameter);
            SqlParameter is_staying_at_dera_Parameter = ObjDBManager.CreateSqlParameter("is_staying_at_dera", is_staying_at_dera, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_staying_at_dera_Parameter);
            SqlParameter institution_id_Parameter = ObjDBManager.CreateSqlParameter("institution_id", institution_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(institution_id_Parameter);
            SqlParameter occupation_Parameter = ObjDBManager.CreateSqlParameter("occupation", occupation, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(occupation_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter ID_ForDependant_Parameter = ObjDBManager.CreateSqlParameter("ID_ForDependant", ID_ForDependant, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(ID_ForDependant_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            SqlParameter qlfctn_subject_id_Parameter = ObjDBManager.CreateSqlParameter("qlfctn_subject_id", qlfctn_subject_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qlfctn_subject_id_Parameter);
            SqlParameter qualification_year_Parameter = ObjDBManager.CreateSqlParameter("qualification_year", qualification_year, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_year_Parameter);
            SqlParameter institution_nm_Parameter = ObjDBManager.CreateSqlParameter("institution_nm", institution_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_nm_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsPersons_dependants", sqlParameters);

            return dset;
        }

        public string InsPersons_dependantsAsTask(System.Int32? person_id,
                                                                System.String person_Type_cd,
                                                                System.String first_nm,
                                                                System.String middle_nm,
                                                                System.String last_nm,
                                                                System.String short_nm,
                                                                System.String gender,
                                                                System.String marital_status,
                                                                System.DateTime? birth_dt,
                                                                System.String is_foreign_initiate,
                                                                System.Int32? initiation_id,
                                                                System.Int16? status_id,
                                                                System.DateTime? status_dt,
                                                                System.Int32? status_reason_id,
                                                                System.Int16? dependant_no,
                                                                System.Int16? relationship_id,
                                                                System.String is_dependant,
                                                                System.String is_doing_sewa,
                                                                System.String is_staying_at_dera,
                                                                System.Int16? institution_id,
                                                                System.String occupation,
                                                                System.String remarks,
                                                                System.Int32? ID_ForDependant,
                                                                System.Int16? qualification_id,
                                                                System.Int16? qlfctn_subject_id,
                                                                System.Int16? qualification_year,
                                                                System.String institution_nm)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter person_Type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_Type_cd", person_Type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_Type_cd_Parameter);
            SqlParameter first_nm_Parameter = ObjDBManager.CreateSqlParameter("first_nm", first_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(first_nm_Parameter);
            SqlParameter middle_nm_Parameter = ObjDBManager.CreateSqlParameter("middle_nm", middle_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(middle_nm_Parameter);
            SqlParameter last_nm_Parameter = ObjDBManager.CreateSqlParameter("last_nm", last_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(last_nm_Parameter);
            SqlParameter short_nm_Parameter = ObjDBManager.CreateSqlParameter("short_nm", short_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(short_nm_Parameter);
            SqlParameter gender_Parameter = ObjDBManager.CreateSqlParameter("gender", gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(gender_Parameter);
            SqlParameter marital_status_Parameter = ObjDBManager.CreateSqlParameter("marital_status", marital_status, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(marital_status_Parameter);
            SqlParameter birth_dt_Parameter = ObjDBManager.CreateSqlParameter("birth_dt", birth_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(birth_dt_Parameter);
            SqlParameter is_foreign_initiate_Parameter = ObjDBManager.CreateSqlParameter("is_foreign_initiate", is_foreign_initiate, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_foreign_initiate_Parameter);
            SqlParameter initiation_id_Parameter = ObjDBManager.CreateSqlParameter("initiation_id", initiation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(initiation_id_Parameter);
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            SqlParameter status_dt_Parameter = ObjDBManager.CreateSqlParameter("status_dt", status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(status_dt_Parameter);
            SqlParameter status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("status_reason_id", status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(status_reason_id_Parameter);
            SqlParameter dependant_no_Parameter = ObjDBManager.CreateSqlParameter("dependant_no", dependant_no, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(dependant_no_Parameter);
            SqlParameter relationship_id_Parameter = ObjDBManager.CreateSqlParameter("relationship_id", relationship_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(relationship_id_Parameter);
            SqlParameter is_dependant_Parameter = ObjDBManager.CreateSqlParameter("is_dependant", is_dependant, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_dependant_Parameter);
            SqlParameter is_doing_sewa_Parameter = ObjDBManager.CreateSqlParameter("is_doing_sewa", is_doing_sewa, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_doing_sewa_Parameter);
            SqlParameter is_staying_at_dera_Parameter = ObjDBManager.CreateSqlParameter("is_staying_at_dera", is_staying_at_dera, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_staying_at_dera_Parameter);
            SqlParameter institution_id_Parameter = ObjDBManager.CreateSqlParameter("institution_id", institution_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(institution_id_Parameter);
            SqlParameter occupation_Parameter = ObjDBManager.CreateSqlParameter("occupation", occupation, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(occupation_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter ID_ForDependant_Parameter = ObjDBManager.CreateSqlParameter("ID_ForDependant", ID_ForDependant, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(ID_ForDependant_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            SqlParameter qlfctn_subject_id_Parameter = ObjDBManager.CreateSqlParameter("qlfctn_subject_id", qlfctn_subject_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qlfctn_subject_id_Parameter);
            SqlParameter qualification_year_Parameter = ObjDBManager.CreateSqlParameter("qualification_year", qualification_year, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_year_Parameter);
            SqlParameter institution_nm_Parameter = ObjDBManager.CreateSqlParameter("institution_nm", institution_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_nm_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsPersons_dependants", sqlParameters);

            return taskString;
        }



        public DataSet Inspersons_donatable_organs(System.Int32? person_id,
                                                                System.Byte? donatable_organ_id,
                                                                System.DateTime? consent_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter donatable_organ_id_Parameter = ObjDBManager.CreateSqlParameter("donatable_organ_id", donatable_organ_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(donatable_organ_id_Parameter);
            SqlParameter consent_dt_Parameter = ObjDBManager.CreateSqlParameter("consent_dt", consent_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(consent_dt_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Inspersons_donatable_organs", sqlParameters);

            return dset;
        }

        public string Inspersons_donatable_organsAsTask(System.Int32? person_id,
                                                                    System.Byte? donatable_organ_id,
                                                                    System.DateTime? consent_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter donatable_organ_id_Parameter = ObjDBManager.CreateSqlParameter("donatable_organ_id", donatable_organ_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(donatable_organ_id_Parameter);
            SqlParameter consent_dt_Parameter = ObjDBManager.CreateSqlParameter("consent_dt", consent_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(consent_dt_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Inspersons_donatable_organs", sqlParameters);

            return taskString;
        }



        public DataSet InsPersons_general_remarks(System.Int32? person_id,
                                                                System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsPersons_general_remarks", sqlParameters);

            return dset;
        }

        public string InsPersons_general_remarksAsTask(System.Int32? person_id,
                                                                    System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsPersons_general_remarks", sqlParameters);

            return taskString;
        }



        public DataSet InsPersons_insurances(System.Int32? person_id,
                                                        System.String insurance_type,
                                                        System.Int16? not_insured_reason_id,
                                                        System.DateTime? effective_from,
                                                        System.DateTime? effective_till,
                                                        System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter insurance_type_Parameter = ObjDBManager.CreateSqlParameter("insurance_type", insurance_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_type_Parameter);
            SqlParameter not_insured_reason_id_Parameter = ObjDBManager.CreateSqlParameter("not_insured_reason_id", not_insured_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(not_insured_reason_id_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsPersons_insurances", sqlParameters);

            return dset;
        }

        public string InsPersons_insurancesAsTask(System.Int32? person_id,
                                                                System.String insurance_type,
                                                                System.Int16? not_insured_reason_id,
                                                                System.DateTime? effective_from,
                                                                System.DateTime? effective_till,
                                                                System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter insurance_type_Parameter = ObjDBManager.CreateSqlParameter("insurance_type", insurance_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_type_Parameter);
            SqlParameter not_insured_reason_id_Parameter = ObjDBManager.CreateSqlParameter("not_insured_reason_id", not_insured_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(not_insured_reason_id_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsPersons_insurances", sqlParameters);

            return taskString;
        }



        public DataSet InsPersons_previous_sewa_details(System.Int32? person_id,
                                                                    System.Int16? sewa_detail_sq,
                                                                    System.DateTime? from_dt,
                                                                    System.DateTime? to_dt,
                                                                    System.Int32? satsang_center_id,
                                                                    System.String department,
                                                                    System.String id_no,
                                                                    System.String responsibility,
                                                                    System.String reason_for_leaving)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter sewa_detail_sq_Parameter = ObjDBManager.CreateSqlParameter("sewa_detail_sq", sewa_detail_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(sewa_detail_sq_Parameter);
            SqlParameter from_dt_Parameter = ObjDBManager.CreateSqlParameter("from_dt", from_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_dt_Parameter);
            SqlParameter to_dt_Parameter = ObjDBManager.CreateSqlParameter("to_dt", to_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_dt_Parameter);
            SqlParameter satsang_center_id_Parameter = ObjDBManager.CreateSqlParameter("satsang_center_id", satsang_center_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(satsang_center_id_Parameter);
            SqlParameter department_Parameter = ObjDBManager.CreateSqlParameter("department", department, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(department_Parameter);
            SqlParameter id_no_Parameter = ObjDBManager.CreateSqlParameter("id_no", id_no, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(id_no_Parameter);
            SqlParameter responsibility_Parameter = ObjDBManager.CreateSqlParameter("responsibility", responsibility, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(responsibility_Parameter);
            SqlParameter reason_for_leaving_Parameter = ObjDBManager.CreateSqlParameter("reason_for_leaving", reason_for_leaving, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(reason_for_leaving_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsPersons_previous_sewa_details", sqlParameters);

            return dset;
        }

        public string InsPersons_previous_sewa_detailsAsTask(System.Int32? person_id,
                                                                        System.Int16? sewa_detail_sq,
                                                                        System.DateTime? from_dt,
                                                                        System.DateTime? to_dt,
                                                                        System.Int32? satsang_center_id,
                                                                        System.String department,
                                                                        System.String id_no,
                                                                        System.String responsibility,
                                                                        System.String reason_for_leaving)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter sewa_detail_sq_Parameter = ObjDBManager.CreateSqlParameter("sewa_detail_sq", sewa_detail_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(sewa_detail_sq_Parameter);
            SqlParameter from_dt_Parameter = ObjDBManager.CreateSqlParameter("from_dt", from_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_dt_Parameter);
            SqlParameter to_dt_Parameter = ObjDBManager.CreateSqlParameter("to_dt", to_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_dt_Parameter);
            SqlParameter satsang_center_id_Parameter = ObjDBManager.CreateSqlParameter("satsang_center_id", satsang_center_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(satsang_center_id_Parameter);
            SqlParameter department_Parameter = ObjDBManager.CreateSqlParameter("department", department, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(department_Parameter);
            SqlParameter id_no_Parameter = ObjDBManager.CreateSqlParameter("id_no", id_no, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(id_no_Parameter);
            SqlParameter responsibility_Parameter = ObjDBManager.CreateSqlParameter("responsibility", responsibility, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(responsibility_Parameter);
            SqlParameter reason_for_leaving_Parameter = ObjDBManager.CreateSqlParameter("reason_for_leaving", reason_for_leaving, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(reason_for_leaving_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsPersons_previous_sewa_details", sqlParameters);

            return taskString;
        }



        public DataSet InsPersons_work_experience_details(System.Int32? person_id,
                                                                        System.Int16? experience_sq,
                                                                        System.DateTime? from_dt,
                                                                        System.DateTime? to_dt,
                                                                        System.String organization,
                                                                        System.String designation,
                                                                        System.String responsibility,
                                                                        System.String work_dsc)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter experience_sq_Parameter = ObjDBManager.CreateSqlParameter("experience_sq", experience_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(experience_sq_Parameter);
            SqlParameter from_dt_Parameter = ObjDBManager.CreateSqlParameter("from_dt", from_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_dt_Parameter);
            SqlParameter to_dt_Parameter = ObjDBManager.CreateSqlParameter("to_dt", to_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_dt_Parameter);
            SqlParameter organization_Parameter = ObjDBManager.CreateSqlParameter("organization", organization, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(organization_Parameter);
            SqlParameter designation_Parameter = ObjDBManager.CreateSqlParameter("designation", designation, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(designation_Parameter);
            SqlParameter responsibility_Parameter = ObjDBManager.CreateSqlParameter("responsibility", responsibility, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(responsibility_Parameter);
            SqlParameter work_dsc_Parameter = ObjDBManager.CreateSqlParameter("work_dsc", work_dsc, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(work_dsc_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsPersons_work_experience_details", sqlParameters);

            return dset;
        }

        public string InsPersons_work_experience_detailsAsTask(System.Int32? person_id,
                                                                            System.Int16? experience_sq,
                                                                            System.DateTime? from_dt,
                                                                            System.DateTime? to_dt,
                                                                            System.String organization,
                                                                            System.String designation,
                                                                            System.String responsibility,
                                                                            System.String work_dsc)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter experience_sq_Parameter = ObjDBManager.CreateSqlParameter("experience_sq", experience_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(experience_sq_Parameter);
            SqlParameter from_dt_Parameter = ObjDBManager.CreateSqlParameter("from_dt", from_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_dt_Parameter);
            SqlParameter to_dt_Parameter = ObjDBManager.CreateSqlParameter("to_dt", to_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_dt_Parameter);
            SqlParameter organization_Parameter = ObjDBManager.CreateSqlParameter("organization", organization, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(organization_Parameter);
            SqlParameter designation_Parameter = ObjDBManager.CreateSqlParameter("designation", designation, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(designation_Parameter);
            SqlParameter responsibility_Parameter = ObjDBManager.CreateSqlParameter("responsibility", responsibility, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(responsibility_Parameter);
            SqlParameter work_dsc_Parameter = ObjDBManager.CreateSqlParameter("work_dsc", work_dsc, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(work_dsc_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsPersons_work_experience_details", sqlParameters);

            return taskString;
        }



        public DataSet InsPersonsDetails(System.String person_Type_cd,
                                                    System.String title,
                                                    System.String first_nm,
                                                    System.String middle_nm,
                                                    System.String last_nm,
                                                    System.String short_nm,
                                                    System.String gender,
                                                    System.String marital_status,
                                                    System.String fh_name_Type,
                                                    System.String father_husband_nm,
                                                    System.DateTime? birth_dt,
                                                    System.String is_foreign_initiate,
                                                    System.Int32? initiation_id,
                                                    System.Int32? file_no,
                                                    System.Int32? spouse_sewadar_id,
                                                    System.Int32? sponsor_sewadar_id,
                                                    System.String next_of_kin_nm,
                                                    System.Int16? next_of_kin_relation_id,
                                                    System.String initials,
                                                    System.String introduced_by,
                                                    ref System.Int32 person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_Type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_Type_cd", person_Type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_Type_cd_Parameter);
            SqlParameter title_Parameter = ObjDBManager.CreateSqlParameter("title", title, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(title_Parameter);
            SqlParameter first_nm_Parameter = ObjDBManager.CreateSqlParameter("first_nm", first_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(first_nm_Parameter);
            SqlParameter middle_nm_Parameter = ObjDBManager.CreateSqlParameter("middle_nm", middle_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(middle_nm_Parameter);
            SqlParameter last_nm_Parameter = ObjDBManager.CreateSqlParameter("last_nm", last_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(last_nm_Parameter);
            SqlParameter short_nm_Parameter = ObjDBManager.CreateSqlParameter("short_nm", short_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(short_nm_Parameter);
            SqlParameter gender_Parameter = ObjDBManager.CreateSqlParameter("gender", gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(gender_Parameter);
            SqlParameter marital_status_Parameter = ObjDBManager.CreateSqlParameter("marital_status", marital_status, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(marital_status_Parameter);
            SqlParameter fh_name_Type_Parameter = ObjDBManager.CreateSqlParameter("fh_name_Type", fh_name_Type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(fh_name_Type_Parameter);
            SqlParameter father_husband_nm_Parameter = ObjDBManager.CreateSqlParameter("father_husband_nm", father_husband_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(father_husband_nm_Parameter);
            SqlParameter birth_dt_Parameter = ObjDBManager.CreateSqlParameter("birth_dt", birth_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(birth_dt_Parameter);
            SqlParameter is_foreign_initiate_Parameter = ObjDBManager.CreateSqlParameter("is_foreign_initiate", is_foreign_initiate, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_foreign_initiate_Parameter);
            SqlParameter initiation_id_Parameter = ObjDBManager.CreateSqlParameter("initiation_id", initiation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(initiation_id_Parameter);
            SqlParameter file_no_Parameter = ObjDBManager.CreateSqlParameter("file_no", file_no, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(file_no_Parameter);
            SqlParameter spouse_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("spouse_sewadar_id", spouse_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(spouse_sewadar_id_Parameter);
            SqlParameter sponsor_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sponsor_sewadar_id", sponsor_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sponsor_sewadar_id_Parameter);
            SqlParameter next_of_kin_nm_Parameter = ObjDBManager.CreateSqlParameter("next_of_kin_nm", next_of_kin_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(next_of_kin_nm_Parameter);
            SqlParameter next_of_kin_relation_id_Parameter = ObjDBManager.CreateSqlParameter("next_of_kin_relation_id", next_of_kin_relation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(next_of_kin_relation_id_Parameter);
            SqlParameter initials_Parameter = ObjDBManager.CreateSqlParameter("initials", initials, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(initials_Parameter);
            SqlParameter introduced_by_Parameter = ObjDBManager.CreateSqlParameter("introduced_by", introduced_by, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(introduced_by_Parameter);
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsPersonsDetails", sqlParameters);
            person_id = (System.Int32)person_id_Parameter.Value;

            return dset;
        }

        public string InsPersonsDetailsAsTask(System.String person_Type_cd,
                                                            System.String title,
                                                            System.String first_nm,
                                                            System.String middle_nm,
                                                            System.String last_nm,
                                                            System.String short_nm,
                                                            System.String gender,
                                                            System.String marital_status,
                                                            System.String fh_name_Type,
                                                            System.String father_husband_nm,
                                                            System.DateTime? birth_dt,
                                                            System.String is_foreign_initiate,
                                                            System.Int32? initiation_id,
                                                            System.Int32? file_no,
                                                            System.Int32? spouse_sewadar_id,
                                                            System.Int32? sponsor_sewadar_id,
                                                            System.String next_of_kin_nm,
                                                            System.Int16? next_of_kin_relation_id,
                                                            System.String initials,
                                                            System.String introduced_by,
                                                            ref System.Int32 person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_Type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_Type_cd", person_Type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_Type_cd_Parameter);
            SqlParameter title_Parameter = ObjDBManager.CreateSqlParameter("title", title, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(title_Parameter);
            SqlParameter first_nm_Parameter = ObjDBManager.CreateSqlParameter("first_nm", first_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(first_nm_Parameter);
            SqlParameter middle_nm_Parameter = ObjDBManager.CreateSqlParameter("middle_nm", middle_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(middle_nm_Parameter);
            SqlParameter last_nm_Parameter = ObjDBManager.CreateSqlParameter("last_nm", last_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(last_nm_Parameter);
            SqlParameter short_nm_Parameter = ObjDBManager.CreateSqlParameter("short_nm", short_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(short_nm_Parameter);
            SqlParameter gender_Parameter = ObjDBManager.CreateSqlParameter("gender", gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(gender_Parameter);
            SqlParameter marital_status_Parameter = ObjDBManager.CreateSqlParameter("marital_status", marital_status, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(marital_status_Parameter);
            SqlParameter fh_name_Type_Parameter = ObjDBManager.CreateSqlParameter("fh_name_Type", fh_name_Type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(fh_name_Type_Parameter);
            SqlParameter father_husband_nm_Parameter = ObjDBManager.CreateSqlParameter("father_husband_nm", father_husband_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(father_husband_nm_Parameter);
            SqlParameter birth_dt_Parameter = ObjDBManager.CreateSqlParameter("birth_dt", birth_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(birth_dt_Parameter);
            SqlParameter is_foreign_initiate_Parameter = ObjDBManager.CreateSqlParameter("is_foreign_initiate", is_foreign_initiate, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_foreign_initiate_Parameter);
            SqlParameter initiation_id_Parameter = ObjDBManager.CreateSqlParameter("initiation_id", initiation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(initiation_id_Parameter);
            SqlParameter file_no_Parameter = ObjDBManager.CreateSqlParameter("file_no", file_no, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(file_no_Parameter);
            SqlParameter spouse_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("spouse_sewadar_id", spouse_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(spouse_sewadar_id_Parameter);
            SqlParameter sponsor_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sponsor_sewadar_id", sponsor_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sponsor_sewadar_id_Parameter);
            SqlParameter next_of_kin_nm_Parameter = ObjDBManager.CreateSqlParameter("next_of_kin_nm", next_of_kin_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(next_of_kin_nm_Parameter);
            SqlParameter next_of_kin_relation_id_Parameter = ObjDBManager.CreateSqlParameter("next_of_kin_relation_id", next_of_kin_relation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(next_of_kin_relation_id_Parameter);
            SqlParameter initials_Parameter = ObjDBManager.CreateSqlParameter("initials", initials, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(initials_Parameter);
            SqlParameter introduced_by_Parameter = ObjDBManager.CreateSqlParameter("introduced_by", introduced_by, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(introduced_by_Parameter);
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsPersonsDetails", sqlParameters);
            person_id = (System.Int32)person_id_Parameter.Value;

            return taskString;
        }



        public DataSet InsPersonsDocuments(System.Int32? person_id,
                                                        System.Int16? document_sq,
                                                        System.Byte? document_type_id,
                                                        System.String document_no,
                                                        System.DateTime? issue_dt,
                                                        System.DateTime? expiry_dt,
                                                        System.String issue_place,
                                                        System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter document_sq_Parameter = ObjDBManager.CreateSqlParameter("document_sq", document_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(document_sq_Parameter);
            SqlParameter document_type_id_Parameter = ObjDBManager.CreateSqlParameter("document_type_id", document_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(document_type_id_Parameter);
            SqlParameter document_no_Parameter = ObjDBManager.CreateSqlParameter("document_no", document_no, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(document_no_Parameter);
            SqlParameter issue_dt_Parameter = ObjDBManager.CreateSqlParameter("issue_dt", issue_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(issue_dt_Parameter);
            SqlParameter expiry_dt_Parameter = ObjDBManager.CreateSqlParameter("expiry_dt", expiry_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(expiry_dt_Parameter);
            SqlParameter issue_place_Parameter = ObjDBManager.CreateSqlParameter("issue_place", issue_place, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(issue_place_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsPersonsDocuments", sqlParameters);

            return dset;
        }

        public string InsPersonsDocumentsAsTask(System.Int32? person_id,
                                                            System.Int16? document_sq,
                                                            System.Byte? document_type_id,
                                                            System.String document_no,
                                                            System.DateTime? issue_dt,
                                                            System.DateTime? expiry_dt,
                                                            System.String issue_place,
                                                            System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter document_sq_Parameter = ObjDBManager.CreateSqlParameter("document_sq", document_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(document_sq_Parameter);
            SqlParameter document_type_id_Parameter = ObjDBManager.CreateSqlParameter("document_type_id", document_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(document_type_id_Parameter);
            SqlParameter document_no_Parameter = ObjDBManager.CreateSqlParameter("document_no", document_no, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(document_no_Parameter);
            SqlParameter issue_dt_Parameter = ObjDBManager.CreateSqlParameter("issue_dt", issue_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(issue_dt_Parameter);
            SqlParameter expiry_dt_Parameter = ObjDBManager.CreateSqlParameter("expiry_dt", expiry_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(expiry_dt_Parameter);
            SqlParameter issue_place_Parameter = ObjDBManager.CreateSqlParameter("issue_place", issue_place, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(issue_place_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsPersonsDocuments", sqlParameters);

            return taskString;
        }



        public DataSet InsPersonsQualifications(System.Int32? person_id,
                                                            System.Int16? qualification_sq,
                                                            System.Int16? qualification_id,
                                                            System.Int16? qlfctn_subject_id,
                                                            System.Int16? qualification_year,
                                                            System.String institution_nm,
                                                            System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter qualification_sq_Parameter = ObjDBManager.CreateSqlParameter("qualification_sq", qualification_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_sq_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            SqlParameter qlfctn_subject_id_Parameter = ObjDBManager.CreateSqlParameter("qlfctn_subject_id", qlfctn_subject_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qlfctn_subject_id_Parameter);
            SqlParameter qualification_year_Parameter = ObjDBManager.CreateSqlParameter("qualification_year", qualification_year, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_year_Parameter);
            SqlParameter institution_nm_Parameter = ObjDBManager.CreateSqlParameter("institution_nm", institution_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_nm_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsPersonsQualifications", sqlParameters);

            return dset;
        }

        public string InsPersonsQualificationsAsTask(System.Int32? person_id,
                                                                System.Int16? qualification_sq,
                                                                System.Int16? qualification_id,
                                                                System.Int16? qlfctn_subject_id,
                                                                System.Int16? qualification_year,
                                                                System.String institution_nm,
                                                                System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter qualification_sq_Parameter = ObjDBManager.CreateSqlParameter("qualification_sq", qualification_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_sq_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            SqlParameter qlfctn_subject_id_Parameter = ObjDBManager.CreateSqlParameter("qlfctn_subject_id", qlfctn_subject_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qlfctn_subject_id_Parameter);
            SqlParameter qualification_year_Parameter = ObjDBManager.CreateSqlParameter("qualification_year", qualification_year, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_year_Parameter);
            SqlParameter institution_nm_Parameter = ObjDBManager.CreateSqlParameter("institution_nm", institution_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_nm_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsPersonsQualifications", sqlParameters);

            return taskString;
        }



        public DataSet InsPersonsRelativesinSewa(System.Int32? person_id,
                                                            System.Int32? relative_sewadar_id,
                                                            System.Int16? relation_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter relative_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("relative_sewadar_id", relative_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(relative_sewadar_id_Parameter);
            SqlParameter relation_id_Parameter = ObjDBManager.CreateSqlParameter("relation_id", relation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(relation_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsPersonsRelativesinSewa", sqlParameters);

            return dset;
        }

        public string InsPersonsRelativesinSewaAsTask(System.Int32? person_id,
                                                                    System.Int32? relative_sewadar_id,
                                                                    System.Int16? relation_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter relative_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("relative_sewadar_id", relative_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(relative_sewadar_id_Parameter);
            SqlParameter relation_id_Parameter = ObjDBManager.CreateSqlParameter("relation_id", relation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(relation_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsPersonsRelativesinSewa", sqlParameters);

            return taskString;
        }



        public DataSet InsPersonsSkills(System.Int32? person_id,
                                                    System.Int16? skill_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter skill_id_Parameter = ObjDBManager.CreateSqlParameter("skill_id", skill_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(skill_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsPersonsSkills", sqlParameters);

            return dset;
        }

        public string InsPersonsSkillsAsTask(System.Int32? person_id,
                                                        System.Int16? skill_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter skill_id_Parameter = ObjDBManager.CreateSqlParameter("skill_id", skill_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(skill_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsPersonsSkills", sqlParameters);

            return taskString;
        }



        public DataSet InsPrvPersonsDetailsChk(System.String first_nm,
                                                            System.String person_type_cd,
                                                            System.String gender,
                                                            System.DateTime? birth_dt,
                                                            System.String marital_status)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter first_nm_Parameter = ObjDBManager.CreateSqlParameter("first_nm", first_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(first_nm_Parameter);
            SqlParameter person_type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_type_cd", person_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_type_cd_Parameter);
            SqlParameter gender_Parameter = ObjDBManager.CreateSqlParameter("gender", gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(gender_Parameter);
            SqlParameter birth_dt_Parameter = ObjDBManager.CreateSqlParameter("birth_dt", birth_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(birth_dt_Parameter);
            SqlParameter marital_status_Parameter = ObjDBManager.CreateSqlParameter("marital_status", marital_status, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(marital_status_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsPrvPersonsDetailsChk", sqlParameters);

            return dset;
        }

        public string InsPrvPersonsDetailsChkAsTask(System.String first_nm,
                                                                System.String person_type_cd,
                                                                System.String gender,
                                                                System.DateTime? birth_dt,
                                                                System.String marital_status)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter first_nm_Parameter = ObjDBManager.CreateSqlParameter("first_nm", first_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(first_nm_Parameter);
            SqlParameter person_type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_type_cd", person_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_type_cd_Parameter);
            SqlParameter gender_Parameter = ObjDBManager.CreateSqlParameter("gender", gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(gender_Parameter);
            SqlParameter birth_dt_Parameter = ObjDBManager.CreateSqlParameter("birth_dt", birth_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(birth_dt_Parameter);
            SqlParameter marital_status_Parameter = ObjDBManager.CreateSqlParameter("marital_status", marital_status, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(marital_status_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsPrvPersonsDetailsChk", sqlParameters);

            return taskString;
        }



        public DataSet InsResidentsORVisitorsDetails(System.String person_Type_cd,
                                                                System.String title,
                                                                System.String first_nm,
                                                                System.String middle_nm,
                                                                System.String last_nm,
                                                                System.String short_nm,
                                                                System.String gender,
                                                                System.String marital_status,
                                                                System.String fh_name_Type,
                                                                System.String father_husband_nm,
                                                                System.DateTime? birth_dt,
                                                                System.String is_foreign_initiate,
                                                                System.Int32? initiation_id,
                                                                System.String next_of_kin_nm,
                                                                System.Int16? next_of_kin_relation_id,
                                                                System.Int16? status_id,
                                                                System.Int32? status_reason_id,
                                                                System.DateTime? status_dt,
                                                                ref System.Int32 person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_Type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_Type_cd", person_Type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_Type_cd_Parameter);
            SqlParameter title_Parameter = ObjDBManager.CreateSqlParameter("title", title, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(title_Parameter);
            SqlParameter first_nm_Parameter = ObjDBManager.CreateSqlParameter("first_nm", first_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(first_nm_Parameter);
            SqlParameter middle_nm_Parameter = ObjDBManager.CreateSqlParameter("middle_nm", middle_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(middle_nm_Parameter);
            SqlParameter last_nm_Parameter = ObjDBManager.CreateSqlParameter("last_nm", last_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(last_nm_Parameter);
            SqlParameter short_nm_Parameter = ObjDBManager.CreateSqlParameter("short_nm", short_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(short_nm_Parameter);
            SqlParameter gender_Parameter = ObjDBManager.CreateSqlParameter("gender", gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(gender_Parameter);
            SqlParameter marital_status_Parameter = ObjDBManager.CreateSqlParameter("marital_status", marital_status, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(marital_status_Parameter);
            SqlParameter fh_name_Type_Parameter = ObjDBManager.CreateSqlParameter("fh_name_Type", fh_name_Type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(fh_name_Type_Parameter);
            SqlParameter father_husband_nm_Parameter = ObjDBManager.CreateSqlParameter("father_husband_nm", father_husband_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(father_husband_nm_Parameter);
            SqlParameter birth_dt_Parameter = ObjDBManager.CreateSqlParameter("birth_dt", birth_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(birth_dt_Parameter);
            SqlParameter is_foreign_initiate_Parameter = ObjDBManager.CreateSqlParameter("is_foreign_initiate", is_foreign_initiate, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_foreign_initiate_Parameter);
            SqlParameter initiation_id_Parameter = ObjDBManager.CreateSqlParameter("initiation_id", initiation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(initiation_id_Parameter);
            SqlParameter next_of_kin_nm_Parameter = ObjDBManager.CreateSqlParameter("next_of_kin_nm", next_of_kin_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(next_of_kin_nm_Parameter);
            SqlParameter next_of_kin_relation_id_Parameter = ObjDBManager.CreateSqlParameter("next_of_kin_relation_id", next_of_kin_relation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(next_of_kin_relation_id_Parameter);
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            SqlParameter status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("status_reason_id", status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(status_reason_id_Parameter);
            SqlParameter status_dt_Parameter = ObjDBManager.CreateSqlParameter("status_dt", status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(status_dt_Parameter);
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsResidentsORVisitorsDetails", sqlParameters);
            person_id = (System.Int32)person_id_Parameter.Value;

            return dset;
        }

        public string InsResidentsORVisitorsDetailsAsTask(System.String person_Type_cd,
                                                                        System.String title,
                                                                        System.String first_nm,
                                                                        System.String middle_nm,
                                                                        System.String last_nm,
                                                                        System.String short_nm,
                                                                        System.String gender,
                                                                        System.String marital_status,
                                                                        System.String fh_name_Type,
                                                                        System.String father_husband_nm,
                                                                        System.DateTime? birth_dt,
                                                                        System.String is_foreign_initiate,
                                                                        System.Int32? initiation_id,
                                                                        System.String next_of_kin_nm,
                                                                        System.Int16? next_of_kin_relation_id,
                                                                        System.Int16? status_id,
                                                                        System.Int32? status_reason_id,
                                                                        System.DateTime? status_dt,
                                                                        ref System.Int32 person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_Type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_Type_cd", person_Type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_Type_cd_Parameter);
            SqlParameter title_Parameter = ObjDBManager.CreateSqlParameter("title", title, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(title_Parameter);
            SqlParameter first_nm_Parameter = ObjDBManager.CreateSqlParameter("first_nm", first_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(first_nm_Parameter);
            SqlParameter middle_nm_Parameter = ObjDBManager.CreateSqlParameter("middle_nm", middle_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(middle_nm_Parameter);
            SqlParameter last_nm_Parameter = ObjDBManager.CreateSqlParameter("last_nm", last_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(last_nm_Parameter);
            SqlParameter short_nm_Parameter = ObjDBManager.CreateSqlParameter("short_nm", short_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(short_nm_Parameter);
            SqlParameter gender_Parameter = ObjDBManager.CreateSqlParameter("gender", gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(gender_Parameter);
            SqlParameter marital_status_Parameter = ObjDBManager.CreateSqlParameter("marital_status", marital_status, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(marital_status_Parameter);
            SqlParameter fh_name_Type_Parameter = ObjDBManager.CreateSqlParameter("fh_name_Type", fh_name_Type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(fh_name_Type_Parameter);
            SqlParameter father_husband_nm_Parameter = ObjDBManager.CreateSqlParameter("father_husband_nm", father_husband_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(father_husband_nm_Parameter);
            SqlParameter birth_dt_Parameter = ObjDBManager.CreateSqlParameter("birth_dt", birth_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(birth_dt_Parameter);
            SqlParameter is_foreign_initiate_Parameter = ObjDBManager.CreateSqlParameter("is_foreign_initiate", is_foreign_initiate, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_foreign_initiate_Parameter);
            SqlParameter initiation_id_Parameter = ObjDBManager.CreateSqlParameter("initiation_id", initiation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(initiation_id_Parameter);
            SqlParameter next_of_kin_nm_Parameter = ObjDBManager.CreateSqlParameter("next_of_kin_nm", next_of_kin_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(next_of_kin_nm_Parameter);
            SqlParameter next_of_kin_relation_id_Parameter = ObjDBManager.CreateSqlParameter("next_of_kin_relation_id", next_of_kin_relation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(next_of_kin_relation_id_Parameter);
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            SqlParameter status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("status_reason_id", status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(status_reason_id_Parameter);
            SqlParameter status_dt_Parameter = ObjDBManager.CreateSqlParameter("status_dt", status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(status_dt_Parameter);
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsResidentsORVisitorsDetails", sqlParameters);
            person_id = (System.Int32)person_id_Parameter.Value;

            return taskString;
        }



        public DataSet InsResidentsORVisitorsDocuments(System.Int32? person_id,
                                                                    System.Int16? document_sq,
                                                                    System.Byte? document_type_id,
                                                                    System.String document_no,
                                                                    System.DateTime? issue_dt,
                                                                    System.DateTime? expiry_dt,
                                                                    System.String issue_place,
                                                                    System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter document_sq_Parameter = ObjDBManager.CreateSqlParameter("document_sq", document_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(document_sq_Parameter);
            SqlParameter document_type_id_Parameter = ObjDBManager.CreateSqlParameter("document_type_id", document_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(document_type_id_Parameter);
            SqlParameter document_no_Parameter = ObjDBManager.CreateSqlParameter("document_no", document_no, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(document_no_Parameter);
            SqlParameter issue_dt_Parameter = ObjDBManager.CreateSqlParameter("issue_dt", issue_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(issue_dt_Parameter);
            SqlParameter expiry_dt_Parameter = ObjDBManager.CreateSqlParameter("expiry_dt", expiry_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(expiry_dt_Parameter);
            SqlParameter issue_place_Parameter = ObjDBManager.CreateSqlParameter("issue_place", issue_place, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(issue_place_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsResidentsORVisitorsDocuments", sqlParameters);

            return dset;
        }

        public string InsResidentsORVisitorsDocumentsAsTask(System.Int32? person_id,
                                                                        System.Int16? document_sq,
                                                                        System.Byte? document_type_id,
                                                                        System.String document_no,
                                                                        System.DateTime? issue_dt,
                                                                        System.DateTime? expiry_dt,
                                                                        System.String issue_place,
                                                                        System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter document_sq_Parameter = ObjDBManager.CreateSqlParameter("document_sq", document_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(document_sq_Parameter);
            SqlParameter document_type_id_Parameter = ObjDBManager.CreateSqlParameter("document_type_id", document_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(document_type_id_Parameter);
            SqlParameter document_no_Parameter = ObjDBManager.CreateSqlParameter("document_no", document_no, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(document_no_Parameter);
            SqlParameter issue_dt_Parameter = ObjDBManager.CreateSqlParameter("issue_dt", issue_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(issue_dt_Parameter);
            SqlParameter expiry_dt_Parameter = ObjDBManager.CreateSqlParameter("expiry_dt", expiry_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(expiry_dt_Parameter);
            SqlParameter issue_place_Parameter = ObjDBManager.CreateSqlParameter("issue_place", issue_place, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(issue_place_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsResidentsORVisitorsDocuments", sqlParameters);

            return taskString;
        }



        public DataSet InsResidentsORVisitorsQualifications(System.Int32? person_id,
                                                                        System.Int16? qualification_sq,
                                                                        System.Int16? qualification_id,
                                                                        System.Int16? qlfctn_subject_id,
                                                                        System.Int16? qualification_year,
                                                                        System.String institution_nm,
                                                                        System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter qualification_sq_Parameter = ObjDBManager.CreateSqlParameter("qualification_sq", qualification_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_sq_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            SqlParameter qlfctn_subject_id_Parameter = ObjDBManager.CreateSqlParameter("qlfctn_subject_id", qlfctn_subject_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qlfctn_subject_id_Parameter);
            SqlParameter qualification_year_Parameter = ObjDBManager.CreateSqlParameter("qualification_year", qualification_year, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_year_Parameter);
            SqlParameter institution_nm_Parameter = ObjDBManager.CreateSqlParameter("institution_nm", institution_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_nm_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsResidentsORVisitorsQualifications", sqlParameters);

            return dset;
        }

        public string InsResidentsORVisitorsQualificationsAsTask(System.Int32? person_id,
                                                                            System.Int16? qualification_sq,
                                                                            System.Int16? qualification_id,
                                                                            System.Int16? qlfctn_subject_id,
                                                                            System.Int16? qualification_year,
                                                                            System.String institution_nm,
                                                                            System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter qualification_sq_Parameter = ObjDBManager.CreateSqlParameter("qualification_sq", qualification_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_sq_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            SqlParameter qlfctn_subject_id_Parameter = ObjDBManager.CreateSqlParameter("qlfctn_subject_id", qlfctn_subject_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qlfctn_subject_id_Parameter);
            SqlParameter qualification_year_Parameter = ObjDBManager.CreateSqlParameter("qualification_year", qualification_year, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_year_Parameter);
            SqlParameter institution_nm_Parameter = ObjDBManager.CreateSqlParameter("institution_nm", institution_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_nm_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsResidentsORVisitorsQualifications", sqlParameters);

            return taskString;
        }



        public DataSet InsResidentsORVisitorsRelativesinSewa(System.Int32? person_id,
                                                                        System.Int32? relative_sewadar_id,
                                                                        System.Int16? relation_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter relative_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("relative_sewadar_id", relative_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(relative_sewadar_id_Parameter);
            SqlParameter relation_id_Parameter = ObjDBManager.CreateSqlParameter("relation_id", relation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(relation_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsResidentsORVisitorsRelativesinSewa", sqlParameters);

            return dset;
        }

        public string InsResidentsORVisitorsRelativesinSewaAsTask(System.Int32? person_id,
                                                                                System.Int32? relative_sewadar_id,
                                                                                System.Int16? relation_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter relative_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("relative_sewadar_id", relative_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(relative_sewadar_id_Parameter);
            SqlParameter relation_id_Parameter = ObjDBManager.CreateSqlParameter("relation_id", relation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(relation_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsResidentsORVisitorsRelativesinSewa", sqlParameters);

            return taskString;
        }



        public DataSet InsResidentsORVisitorsSkills(System.Int32? person_id,
                                                                System.Int16? skill_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter skill_id_Parameter = ObjDBManager.CreateSqlParameter("skill_id", skill_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(skill_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsResidentsORVisitorsSkills", sqlParameters);

            return dset;
        }

        public string InsResidentsORVisitorsSkillsAsTask(System.Int32? person_id,
                                                                    System.Int16? skill_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter skill_id_Parameter = ObjDBManager.CreateSqlParameter("skill_id", skill_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(skill_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsResidentsORVisitorsSkills", sqlParameters);

            return taskString;
        }



        public DataSet InsSewadarContractDetails(System.Int32? sewadar_id,
                                                            System.Int16? contract_id,
                                                            System.Int16? month_from,
                                                            System.Int16? month_till,
                                                            System.Int32? amount)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter contract_id_Parameter = ObjDBManager.CreateSqlParameter("contract_id", contract_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(contract_id_Parameter);
            SqlParameter month_from_Parameter = ObjDBManager.CreateSqlParameter("month_from", month_from, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(month_from_Parameter);
            SqlParameter month_till_Parameter = ObjDBManager.CreateSqlParameter("month_till", month_till, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(month_till_Parameter);
            SqlParameter amount_Parameter = ObjDBManager.CreateSqlParameter("amount", amount, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(amount_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsSewadarContractDetails", sqlParameters);

            return dset;
        }

        public string InsSewadarContractDetailsAsTask(System.Int32? sewadar_id,
                                                                    System.Int16? contract_id,
                                                                    System.Int16? month_from,
                                                                    System.Int16? month_till,
                                                                    System.Int32? amount)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter contract_id_Parameter = ObjDBManager.CreateSqlParameter("contract_id", contract_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(contract_id_Parameter);
            SqlParameter month_from_Parameter = ObjDBManager.CreateSqlParameter("month_from", month_from, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(month_from_Parameter);
            SqlParameter month_till_Parameter = ObjDBManager.CreateSqlParameter("month_till", month_till, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(month_till_Parameter);
            SqlParameter amount_Parameter = ObjDBManager.CreateSqlParameter("amount", amount, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(amount_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsSewadarContractDetails", sqlParameters);

            return taskString;
        }



        public DataSet InsSewadarContracts(System.Int32? sewadar_id,
                                                        ref System.Int16 outcontract_id,
                                                        System.Byte? contract_years,
                                                        System.String remarks,
                                                        System.DateTime? effective_from,
                                                        System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter outcontract_id_Parameter = ObjDBManager.CreateSqlParameter("outcontract_id", outcontract_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(outcontract_id_Parameter);
            SqlParameter contract_years_Parameter = ObjDBManager.CreateSqlParameter("contract_years", contract_years, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(contract_years_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsSewadarContracts", sqlParameters);
            outcontract_id = (System.Int16)outcontract_id_Parameter.Value;

            return dset;
        }

        public string InsSewadarContractsAsTask(System.Int32? sewadar_id,
                                                            ref System.Int16 outcontract_id,
                                                            System.Byte? contract_years,
                                                            System.String remarks,
                                                            System.DateTime? effective_from,
                                                            System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter outcontract_id_Parameter = ObjDBManager.CreateSqlParameter("outcontract_id", outcontract_id, SqlDbType.SmallInt, ParameterDirection.Output);
            sqlParameters.Add(outcontract_id_Parameter);
            SqlParameter contract_years_Parameter = ObjDBManager.CreateSqlParameter("contract_years", contract_years, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(contract_years_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsSewadarContracts", sqlParameters);
            outcontract_id = (System.Int16)outcontract_id_Parameter.Value;

            return taskString;
        }



        public DataSet InsSewadars(System.Int32? sewadar_id,
                                                System.String initials)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter initials_Parameter = ObjDBManager.CreateSqlParameter("initials", initials, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(initials_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsSewadars", sqlParameters);

            return dset;
        }

        public string InsSewadarsAsTask(System.Int32? sewadar_id,
                                                    System.String initials)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter initials_Parameter = ObjDBManager.CreateSqlParameter("initials", initials, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(initials_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsSewadars", sqlParameters);

            return taskString;
        }



        public DataSet InsUpdHousingUnitAllocations(System.Int32? allocation_id,
                                                                System.String InsertMode,
                                                                System.Int32? housing_unit_id,
                                                                System.Int32? person_id,
                                                                System.DateTime? order_dt,
                                                                System.DateTime? proposed_occupancy_dt,
                                                                System.DateTime? actual_occupancy_dt,
                                                                System.DateTime? proposed_vacating_dt,
                                                                System.DateTime? actual_vacating_dt,
                                                                System.String remarks,
                                                                System.Byte[] txn_ts,
                                                                ref System.Int32 out_allocation_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter allocation_id_Parameter = ObjDBManager.CreateSqlParameter("allocation_id", allocation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(allocation_id_Parameter);
            SqlParameter InsertMode_Parameter = ObjDBManager.CreateSqlParameter("InsertMode", InsertMode, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(InsertMode_Parameter);
            SqlParameter housing_unit_id_Parameter = ObjDBManager.CreateSqlParameter("housing_unit_id", housing_unit_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_unit_id_Parameter);
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter order_dt_Parameter = ObjDBManager.CreateSqlParameter("order_dt", order_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(order_dt_Parameter);
            SqlParameter proposed_occupancy_dt_Parameter = ObjDBManager.CreateSqlParameter("proposed_occupancy_dt", proposed_occupancy_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(proposed_occupancy_dt_Parameter);
            SqlParameter actual_occupancy_dt_Parameter = ObjDBManager.CreateSqlParameter("actual_occupancy_dt", actual_occupancy_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(actual_occupancy_dt_Parameter);
            SqlParameter proposed_vacating_dt_Parameter = ObjDBManager.CreateSqlParameter("proposed_vacating_dt", proposed_vacating_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(proposed_vacating_dt_Parameter);
            SqlParameter actual_vacating_dt_Parameter = ObjDBManager.CreateSqlParameter("actual_vacating_dt", actual_vacating_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(actual_vacating_dt_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            SqlParameter out_allocation_id_Parameter = ObjDBManager.CreateSqlParameter("out_allocation_id", out_allocation_id, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(out_allocation_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsUpdHousingUnitAllocations", sqlParameters);
            out_allocation_id = (System.Int32)out_allocation_id_Parameter.Value;

            return dset;
        }

        public string InsUpdHousingUnitAllocationsAsTask(System.Int32? allocation_id,
                                                                    System.String InsertMode,
                                                                    System.Int32? housing_unit_id,
                                                                    System.Int32? person_id,
                                                                    System.DateTime? order_dt,
                                                                    System.DateTime? proposed_occupancy_dt,
                                                                    System.DateTime? actual_occupancy_dt,
                                                                    System.DateTime? proposed_vacating_dt,
                                                                    System.DateTime? actual_vacating_dt,
                                                                    System.String remarks,
                                                                    System.Byte[] txn_ts,
                                                                    ref System.Int32 out_allocation_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter allocation_id_Parameter = ObjDBManager.CreateSqlParameter("allocation_id", allocation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(allocation_id_Parameter);
            SqlParameter InsertMode_Parameter = ObjDBManager.CreateSqlParameter("InsertMode", InsertMode, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(InsertMode_Parameter);
            SqlParameter housing_unit_id_Parameter = ObjDBManager.CreateSqlParameter("housing_unit_id", housing_unit_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_unit_id_Parameter);
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter order_dt_Parameter = ObjDBManager.CreateSqlParameter("order_dt", order_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(order_dt_Parameter);
            SqlParameter proposed_occupancy_dt_Parameter = ObjDBManager.CreateSqlParameter("proposed_occupancy_dt", proposed_occupancy_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(proposed_occupancy_dt_Parameter);
            SqlParameter actual_occupancy_dt_Parameter = ObjDBManager.CreateSqlParameter("actual_occupancy_dt", actual_occupancy_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(actual_occupancy_dt_Parameter);
            SqlParameter proposed_vacating_dt_Parameter = ObjDBManager.CreateSqlParameter("proposed_vacating_dt", proposed_vacating_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(proposed_vacating_dt_Parameter);
            SqlParameter actual_vacating_dt_Parameter = ObjDBManager.CreateSqlParameter("actual_vacating_dt", actual_vacating_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(actual_vacating_dt_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            SqlParameter out_allocation_id_Parameter = ObjDBManager.CreateSqlParameter("out_allocation_id", out_allocation_id, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(out_allocation_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsUpdHousingUnitAllocations", sqlParameters);
            out_allocation_id = (System.Int32)out_allocation_id_Parameter.Value;

            return taskString;
        }



        public DataSet InsUpdHousingUnitAllocationsIncaseofTransfer(System.Int32? allocation_id,
                                                                                System.Int32? Oldhousing_unit_id,
                                                                                System.Int32? housing_unit_id,
                                                                                System.Int32? person_id,
                                                                                System.DateTime? order_dt,
                                                                                System.DateTime? proposed_occupancy_dt,
                                                                                System.DateTime? actual_occupancy_dt,
                                                                                System.DateTime? proposed_vacating_dt,
                                                                                System.DateTime? actual_vacating_dt,
                                                                                System.String status_for_old_house,
                                                                                System.String status_for_new_house,
                                                                                System.String remarks,
                                                                                System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter allocation_id_Parameter = ObjDBManager.CreateSqlParameter("allocation_id", allocation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(allocation_id_Parameter);
            SqlParameter Oldhousing_unit_id_Parameter = ObjDBManager.CreateSqlParameter("Oldhousing_unit_id", Oldhousing_unit_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(Oldhousing_unit_id_Parameter);
            SqlParameter housing_unit_id_Parameter = ObjDBManager.CreateSqlParameter("housing_unit_id", housing_unit_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_unit_id_Parameter);
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter order_dt_Parameter = ObjDBManager.CreateSqlParameter("order_dt", order_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(order_dt_Parameter);
            SqlParameter proposed_occupancy_dt_Parameter = ObjDBManager.CreateSqlParameter("proposed_occupancy_dt", proposed_occupancy_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(proposed_occupancy_dt_Parameter);
            SqlParameter actual_occupancy_dt_Parameter = ObjDBManager.CreateSqlParameter("actual_occupancy_dt", actual_occupancy_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(actual_occupancy_dt_Parameter);
            SqlParameter proposed_vacating_dt_Parameter = ObjDBManager.CreateSqlParameter("proposed_vacating_dt", proposed_vacating_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(proposed_vacating_dt_Parameter);
            SqlParameter actual_vacating_dt_Parameter = ObjDBManager.CreateSqlParameter("actual_vacating_dt", actual_vacating_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(actual_vacating_dt_Parameter);
            SqlParameter status_for_old_house_Parameter = ObjDBManager.CreateSqlParameter("status_for_old_house", status_for_old_house, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(status_for_old_house_Parameter);
            SqlParameter status_for_new_house_Parameter = ObjDBManager.CreateSqlParameter("status_for_new_house", status_for_new_house, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(status_for_new_house_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsUpdHousingUnitAllocationsIncaseofTransfer", sqlParameters);

            return dset;
        }

        public string InsUpdHousingUnitAllocationsIncaseofTransferAsTask(System.Int32? allocation_id,
                                                                                    System.Int32? Oldhousing_unit_id,
                                                                                    System.Int32? housing_unit_id,
                                                                                    System.Int32? person_id,
                                                                                    System.DateTime? order_dt,
                                                                                    System.DateTime? proposed_occupancy_dt,
                                                                                    System.DateTime? actual_occupancy_dt,
                                                                                    System.DateTime? proposed_vacating_dt,
                                                                                    System.DateTime? actual_vacating_dt,
                                                                                    System.String status_for_old_house,
                                                                                    System.String status_for_new_house,
                                                                                    System.String remarks,
                                                                                    System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter allocation_id_Parameter = ObjDBManager.CreateSqlParameter("allocation_id", allocation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(allocation_id_Parameter);
            SqlParameter Oldhousing_unit_id_Parameter = ObjDBManager.CreateSqlParameter("Oldhousing_unit_id", Oldhousing_unit_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(Oldhousing_unit_id_Parameter);
            SqlParameter housing_unit_id_Parameter = ObjDBManager.CreateSqlParameter("housing_unit_id", housing_unit_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_unit_id_Parameter);
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter order_dt_Parameter = ObjDBManager.CreateSqlParameter("order_dt", order_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(order_dt_Parameter);
            SqlParameter proposed_occupancy_dt_Parameter = ObjDBManager.CreateSqlParameter("proposed_occupancy_dt", proposed_occupancy_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(proposed_occupancy_dt_Parameter);
            SqlParameter actual_occupancy_dt_Parameter = ObjDBManager.CreateSqlParameter("actual_occupancy_dt", actual_occupancy_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(actual_occupancy_dt_Parameter);
            SqlParameter proposed_vacating_dt_Parameter = ObjDBManager.CreateSqlParameter("proposed_vacating_dt", proposed_vacating_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(proposed_vacating_dt_Parameter);
            SqlParameter actual_vacating_dt_Parameter = ObjDBManager.CreateSqlParameter("actual_vacating_dt", actual_vacating_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(actual_vacating_dt_Parameter);
            SqlParameter status_for_old_house_Parameter = ObjDBManager.CreateSqlParameter("status_for_old_house", status_for_old_house, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(status_for_old_house_Parameter);
            SqlParameter status_for_new_house_Parameter = ObjDBManager.CreateSqlParameter("status_for_new_house", status_for_new_house, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(status_for_new_house_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsUpdHousingUnitAllocationsIncaseofTransfer", sqlParameters);

            return taskString;
        }



        public DataSet InsUpdHousingUnitAllocationsWrapper(System.Int32? allocation_id,
                                                                        System.String InsertMode,
                                                                        System.Int32? Oldhousing_unit_id,
                                                                        System.Int32? housing_unit_id,
                                                                        System.Int32? person_id,
                                                                        System.DateTime? order_dt,
                                                                        System.DateTime? proposed_occupancy_dt,
                                                                        System.DateTime? actual_occupancy_dt,
                                                                        System.DateTime? proposed_vacating_dt,
                                                                        System.DateTime? actual_vacating_dt,
                                                                        System.String remarks,
                                                                        System.String status_for_old_house,
                                                                        System.String status_for_new_house,
                                                                        System.Byte[] txn_ts,
                                                                        ref System.Int32 out_allocation_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter allocation_id_Parameter = ObjDBManager.CreateSqlParameter("allocation_id", allocation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(allocation_id_Parameter);
            SqlParameter InsertMode_Parameter = ObjDBManager.CreateSqlParameter("InsertMode", InsertMode, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(InsertMode_Parameter);
            SqlParameter Oldhousing_unit_id_Parameter = ObjDBManager.CreateSqlParameter("Oldhousing_unit_id", Oldhousing_unit_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(Oldhousing_unit_id_Parameter);
            SqlParameter housing_unit_id_Parameter = ObjDBManager.CreateSqlParameter("housing_unit_id", housing_unit_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_unit_id_Parameter);
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter order_dt_Parameter = ObjDBManager.CreateSqlParameter("order_dt", order_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(order_dt_Parameter);
            SqlParameter proposed_occupancy_dt_Parameter = ObjDBManager.CreateSqlParameter("proposed_occupancy_dt", proposed_occupancy_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(proposed_occupancy_dt_Parameter);
            SqlParameter actual_occupancy_dt_Parameter = ObjDBManager.CreateSqlParameter("actual_occupancy_dt", actual_occupancy_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(actual_occupancy_dt_Parameter);
            SqlParameter proposed_vacating_dt_Parameter = ObjDBManager.CreateSqlParameter("proposed_vacating_dt", proposed_vacating_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(proposed_vacating_dt_Parameter);
            SqlParameter actual_vacating_dt_Parameter = ObjDBManager.CreateSqlParameter("actual_vacating_dt", actual_vacating_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(actual_vacating_dt_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter status_for_old_house_Parameter = ObjDBManager.CreateSqlParameter("status_for_old_house", status_for_old_house, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(status_for_old_house_Parameter);
            SqlParameter status_for_new_house_Parameter = ObjDBManager.CreateSqlParameter("status_for_new_house", status_for_new_house, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(status_for_new_house_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            SqlParameter out_allocation_id_Parameter = ObjDBManager.CreateSqlParameter("out_allocation_id", out_allocation_id, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(out_allocation_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsUpdHousingUnitAllocationsWrapper", sqlParameters);
            out_allocation_id = (System.Int32)out_allocation_id_Parameter.Value;

            return dset;
        }

        public string InsUpdHousingUnitAllocationsWrapperAsTask(System.Int32? allocation_id,
                                                                            System.String InsertMode,
                                                                            System.Int32? Oldhousing_unit_id,
                                                                            System.Int32? housing_unit_id,
                                                                            System.Int32? person_id,
                                                                            System.DateTime? order_dt,
                                                                            System.DateTime? proposed_occupancy_dt,
                                                                            System.DateTime? actual_occupancy_dt,
                                                                            System.DateTime? proposed_vacating_dt,
                                                                            System.DateTime? actual_vacating_dt,
                                                                            System.String remarks,
                                                                            System.String status_for_old_house,
                                                                            System.String status_for_new_house,
                                                                            System.Byte[] txn_ts,
                                                                            ref System.Int32 out_allocation_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter allocation_id_Parameter = ObjDBManager.CreateSqlParameter("allocation_id", allocation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(allocation_id_Parameter);
            SqlParameter InsertMode_Parameter = ObjDBManager.CreateSqlParameter("InsertMode", InsertMode, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(InsertMode_Parameter);
            SqlParameter Oldhousing_unit_id_Parameter = ObjDBManager.CreateSqlParameter("Oldhousing_unit_id", Oldhousing_unit_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(Oldhousing_unit_id_Parameter);
            SqlParameter housing_unit_id_Parameter = ObjDBManager.CreateSqlParameter("housing_unit_id", housing_unit_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_unit_id_Parameter);
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter order_dt_Parameter = ObjDBManager.CreateSqlParameter("order_dt", order_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(order_dt_Parameter);
            SqlParameter proposed_occupancy_dt_Parameter = ObjDBManager.CreateSqlParameter("proposed_occupancy_dt", proposed_occupancy_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(proposed_occupancy_dt_Parameter);
            SqlParameter actual_occupancy_dt_Parameter = ObjDBManager.CreateSqlParameter("actual_occupancy_dt", actual_occupancy_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(actual_occupancy_dt_Parameter);
            SqlParameter proposed_vacating_dt_Parameter = ObjDBManager.CreateSqlParameter("proposed_vacating_dt", proposed_vacating_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(proposed_vacating_dt_Parameter);
            SqlParameter actual_vacating_dt_Parameter = ObjDBManager.CreateSqlParameter("actual_vacating_dt", actual_vacating_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(actual_vacating_dt_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter status_for_old_house_Parameter = ObjDBManager.CreateSqlParameter("status_for_old_house", status_for_old_house, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(status_for_old_house_Parameter);
            SqlParameter status_for_new_house_Parameter = ObjDBManager.CreateSqlParameter("status_for_new_house", status_for_new_house, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(status_for_new_house_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            SqlParameter out_allocation_id_Parameter = ObjDBManager.CreateSqlParameter("out_allocation_id", out_allocation_id, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(out_allocation_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsUpdHousingUnitAllocationsWrapper", sqlParameters);
            out_allocation_id = (System.Int32)out_allocation_id_Parameter.Value;

            return taskString;
        }



        public DataSet InsUpdId_card_Photo(System.Int32? person_id,
                                                        System.Byte[] person_photo,
                                                        System.DateTime? photo_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter person_photo_Parameter = ObjDBManager.CreateSqlParameter("person_photo", person_photo, SqlDbType.Image, ParameterDirection.Input);
            sqlParameters.Add(person_photo_Parameter);
            SqlParameter photo_dt_Parameter = ObjDBManager.CreateSqlParameter("photo_dt", photo_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(photo_dt_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsUpdId_card_Photo", sqlParameters);

            return dset;
        }

        public string InsUpdId_card_PhotoAsTask(System.Int32? person_id,
                                                            System.Byte[] person_photo,
                                                            System.DateTime? photo_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter person_photo_Parameter = ObjDBManager.CreateSqlParameter("person_photo", person_photo, SqlDbType.Image, ParameterDirection.Input);
            sqlParameters.Add(person_photo_Parameter);
            SqlParameter photo_dt_Parameter = ObjDBManager.CreateSqlParameter("photo_dt", photo_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(photo_dt_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsUpdId_card_Photo", sqlParameters);

            return taskString;
        }



        public DataSet InsUpdId_card_requests(System.Int32? person_id,
                                                            System.DateTime? requested_dt,
                                                            System.Int16? request_reason_id,
                                                            System.Int16? request_status_id,
                                                            System.DateTime? request_status_dt,
                                                            System.String remarks,
                                                            System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter requested_dt_Parameter = ObjDBManager.CreateSqlParameter("requested_dt", requested_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(requested_dt_Parameter);
            SqlParameter request_reason_id_Parameter = ObjDBManager.CreateSqlParameter("request_reason_id", request_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(request_reason_id_Parameter);
            SqlParameter request_status_id_Parameter = ObjDBManager.CreateSqlParameter("request_status_id", request_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(request_status_id_Parameter);
            SqlParameter request_status_dt_Parameter = ObjDBManager.CreateSqlParameter("request_status_dt", request_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(request_status_dt_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsUpdId_card_requests", sqlParameters);

            return dset;
        }

        public string InsUpdId_card_requestsAsTask(System.Int32? person_id,
                                                                System.DateTime? requested_dt,
                                                                System.Int16? request_reason_id,
                                                                System.Int16? request_status_id,
                                                                System.DateTime? request_status_dt,
                                                                System.String remarks,
                                                                System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter requested_dt_Parameter = ObjDBManager.CreateSqlParameter("requested_dt", requested_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(requested_dt_Parameter);
            SqlParameter request_reason_id_Parameter = ObjDBManager.CreateSqlParameter("request_reason_id", request_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(request_reason_id_Parameter);
            SqlParameter request_status_id_Parameter = ObjDBManager.CreateSqlParameter("request_status_id", request_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(request_status_id_Parameter);
            SqlParameter request_status_dt_Parameter = ObjDBManager.CreateSqlParameter("request_status_dt", request_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(request_status_dt_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsUpdId_card_requests", sqlParameters);

            return taskString;
        }



        public DataSet InsUpdPersonsAddresses(System.Int32? person_id,
                                                            System.String address_type_cd,
                                                            System.String address_line_1,
                                                            System.String address_line_2,
                                                            System.Int32? city_id,
                                                            System.String pincode,
                                                            System.String telephone_nos)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter address_type_cd_Parameter = ObjDBManager.CreateSqlParameter("address_type_cd", address_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(address_type_cd_Parameter);
            SqlParameter address_line_1_Parameter = ObjDBManager.CreateSqlParameter("address_line_1", address_line_1, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(address_line_1_Parameter);
            SqlParameter address_line_2_Parameter = ObjDBManager.CreateSqlParameter("address_line_2", address_line_2, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(address_line_2_Parameter);
            SqlParameter city_id_Parameter = ObjDBManager.CreateSqlParameter("city_id", city_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(city_id_Parameter);
            SqlParameter pincode_Parameter = ObjDBManager.CreateSqlParameter("pincode", pincode, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(pincode_Parameter);
            SqlParameter telephone_nos_Parameter = ObjDBManager.CreateSqlParameter("telephone_nos", telephone_nos, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(telephone_nos_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsUpdPersonsAddresses", sqlParameters);

            return dset;
        }

        public string InsUpdPersonsAddressesAsTask(System.Int32? person_id,
                                                                System.String address_type_cd,
                                                                System.String address_line_1,
                                                                System.String address_line_2,
                                                                System.Int32? city_id,
                                                                System.String pincode,
                                                                System.String telephone_nos)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter address_type_cd_Parameter = ObjDBManager.CreateSqlParameter("address_type_cd", address_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(address_type_cd_Parameter);
            SqlParameter address_line_1_Parameter = ObjDBManager.CreateSqlParameter("address_line_1", address_line_1, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(address_line_1_Parameter);
            SqlParameter address_line_2_Parameter = ObjDBManager.CreateSqlParameter("address_line_2", address_line_2, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(address_line_2_Parameter);
            SqlParameter city_id_Parameter = ObjDBManager.CreateSqlParameter("city_id", city_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(city_id_Parameter);
            SqlParameter pincode_Parameter = ObjDBManager.CreateSqlParameter("pincode", pincode, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(pincode_Parameter);
            SqlParameter telephone_nos_Parameter = ObjDBManager.CreateSqlParameter("telephone_nos", telephone_nos, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(telephone_nos_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsUpdPersonsAddresses", sqlParameters);

            return taskString;
        }



        public DataSet InsUpdPersonsTxnts(System.Int32? person_id,
                                                        System.String screen_id,
                                                        System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InsUpdPersonsTxnts", sqlParameters);

            return dset;
        }

        public string InsUpdPersonsTxntsAsTask(System.Int32? person_id,
                                                            System.String screen_id,
                                                            System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InsUpdPersonsTxnts", sqlParameters);

            return taskString;
        }



        public DataSet InvalidateInsuranceReports(System.Int32? p_sewadar_id,
                                                                System.Int32? p_dependant_id,
                                                                System.DateTime? p_status_dt,
                                                                System.String p_remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("p_sewadar_id", p_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_sewadar_id_Parameter);
            SqlParameter p_dependant_id_Parameter = ObjDBManager.CreateSqlParameter("p_dependant_id", p_dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_dependant_id_Parameter);
            SqlParameter p_status_dt_Parameter = ObjDBManager.CreateSqlParameter("p_status_dt", p_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(p_status_dt_Parameter);
            SqlParameter p_remarks_Parameter = ObjDBManager.CreateSqlParameter("p_remarks", p_remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("InvalidateInsuranceReports", sqlParameters);

            return dset;
        }

        public string InvalidateInsuranceReportsAsTask(System.Int32? p_sewadar_id,
                                                                    System.Int32? p_dependant_id,
                                                                    System.DateTime? p_status_dt,
                                                                    System.String p_remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("p_sewadar_id", p_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_sewadar_id_Parameter);
            SqlParameter p_dependant_id_Parameter = ObjDBManager.CreateSqlParameter("p_dependant_id", p_dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_dependant_id_Parameter);
            SqlParameter p_status_dt_Parameter = ObjDBManager.CreateSqlParameter("p_status_dt", p_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(p_status_dt_Parameter);
            SqlParameter p_remarks_Parameter = ObjDBManager.CreateSqlParameter("p_remarks", p_remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("InvalidateInsuranceReports", sqlParameters);

            return taskString;
        }



        public DataSet MSC_51(System.String departments_ids_xml,
                                            System.String in_sewadar_type_ids_xml,
                                            System.String in_status_id_xml,
                                            System.String in_Gender)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter in_sewadar_type_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_type_ids_xml", in_sewadar_type_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_type_ids_xml_Parameter);
            SqlParameter in_status_id_xml_Parameter = ObjDBManager.CreateSqlParameter("in_status_id_xml", in_status_id_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_status_id_xml_Parameter);
            SqlParameter in_Gender_Parameter = ObjDBManager.CreateSqlParameter("in_Gender", in_Gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(in_Gender_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("MSC_51", sqlParameters);

            return dset;
        }

        public string MSC_51AsTask(System.String departments_ids_xml,
                                                System.String in_sewadar_type_ids_xml,
                                                System.String in_status_id_xml,
                                                System.String in_Gender)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter in_sewadar_type_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_type_ids_xml", in_sewadar_type_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_type_ids_xml_Parameter);
            SqlParameter in_status_id_xml_Parameter = ObjDBManager.CreateSqlParameter("in_status_id_xml", in_status_id_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_status_id_xml_Parameter);
            SqlParameter in_Gender_Parameter = ObjDBManager.CreateSqlParameter("in_Gender", in_Gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(in_Gender_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("MSC_51", sqlParameters);

            return taskString;
        }



        public DataSet MSC_52(System.String departments_ids_xml,
                                            System.String date_type,
                                            System.DateTime? From_Date,
                                            System.DateTime? To_Date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter date_type_Parameter = ObjDBManager.CreateSqlParameter("date_type", date_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(date_type_Parameter);
            SqlParameter From_Date_Parameter = ObjDBManager.CreateSqlParameter("From_Date", From_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(From_Date_Parameter);
            SqlParameter To_Date_Parameter = ObjDBManager.CreateSqlParameter("To_Date", To_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(To_Date_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("MSC_52", sqlParameters);

            return dset;
        }

        public string MSC_52AsTask(System.String departments_ids_xml,
                                                System.String date_type,
                                                System.DateTime? From_Date,
                                                System.DateTime? To_Date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter date_type_Parameter = ObjDBManager.CreateSqlParameter("date_type", date_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(date_type_Parameter);
            SqlParameter From_Date_Parameter = ObjDBManager.CreateSqlParameter("From_Date", From_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(From_Date_Parameter);
            SqlParameter To_Date_Parameter = ObjDBManager.CreateSqlParameter("To_Date", To_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(To_Date_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("MSC_52", sqlParameters);

            return taskString;
        }



        public DataSet MSC_53(System.String departments_ids_xml,
                                            System.String in_sewadar_type_ids_xml,
                                            System.String in_status_id_xml,
                                            System.String in_Gender,
                                            System.String is_active)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter in_sewadar_type_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_type_ids_xml", in_sewadar_type_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_type_ids_xml_Parameter);
            SqlParameter in_status_id_xml_Parameter = ObjDBManager.CreateSqlParameter("in_status_id_xml", in_status_id_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_status_id_xml_Parameter);
            SqlParameter in_Gender_Parameter = ObjDBManager.CreateSqlParameter("in_Gender", in_Gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(in_Gender_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("MSC_53", sqlParameters);

            return dset;
        }

        public string MSC_53AsTask(System.String departments_ids_xml,
                                                System.String in_sewadar_type_ids_xml,
                                                System.String in_status_id_xml,
                                                System.String in_Gender,
                                                System.String is_active)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter in_sewadar_type_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_type_ids_xml", in_sewadar_type_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_type_ids_xml_Parameter);
            SqlParameter in_status_id_xml_Parameter = ObjDBManager.CreateSqlParameter("in_status_id_xml", in_status_id_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_status_id_xml_Parameter);
            SqlParameter in_Gender_Parameter = ObjDBManager.CreateSqlParameter("in_Gender", in_Gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(in_Gender_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("MSC_53", sqlParameters);

            return taskString;
        }



        public DataSet MSC_531(System.String departments_ids_xml,
                                            System.String in_sewadar_type_ids_xml,
                                            System.String in_status_id_xml,
                                            System.String in_Gender,
                                            System.String is_active)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter in_sewadar_type_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_type_ids_xml", in_sewadar_type_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_type_ids_xml_Parameter);
            SqlParameter in_status_id_xml_Parameter = ObjDBManager.CreateSqlParameter("in_status_id_xml", in_status_id_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_status_id_xml_Parameter);
            SqlParameter in_Gender_Parameter = ObjDBManager.CreateSqlParameter("in_Gender", in_Gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(in_Gender_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("MSC_531", sqlParameters);

            return dset;
        }

        public string MSC_531AsTask(System.String departments_ids_xml,
                                                System.String in_sewadar_type_ids_xml,
                                                System.String in_status_id_xml,
                                                System.String in_Gender,
                                                System.String is_active)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter in_sewadar_type_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_type_ids_xml", in_sewadar_type_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_type_ids_xml_Parameter);
            SqlParameter in_status_id_xml_Parameter = ObjDBManager.CreateSqlParameter("in_status_id_xml", in_status_id_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_status_id_xml_Parameter);
            SqlParameter in_Gender_Parameter = ObjDBManager.CreateSqlParameter("in_Gender", in_Gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(in_Gender_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("MSC_531", sqlParameters);

            return taskString;
        }



        public DataSet MSC_54(System.String departments_ids_xml,
                                            System.String sewadar_ids_xml,
                                            System.DateTime? From_Date,
                                            System.DateTime? To_Date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter sewadar_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadar_ids_xml", sewadar_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadar_ids_xml_Parameter);
            SqlParameter From_Date_Parameter = ObjDBManager.CreateSqlParameter("From_Date", From_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(From_Date_Parameter);
            SqlParameter To_Date_Parameter = ObjDBManager.CreateSqlParameter("To_Date", To_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(To_Date_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("MSC_54", sqlParameters);

            return dset;
        }

        public string MSC_54AsTask(System.String departments_ids_xml,
                                                System.String sewadar_ids_xml,
                                                System.DateTime? From_Date,
                                                System.DateTime? To_Date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter sewadar_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadar_ids_xml", sewadar_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadar_ids_xml_Parameter);
            SqlParameter From_Date_Parameter = ObjDBManager.CreateSqlParameter("From_Date", From_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(From_Date_Parameter);
            SqlParameter To_Date_Parameter = ObjDBManager.CreateSqlParameter("To_Date", To_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(To_Date_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("MSC_54", sqlParameters);

            return taskString;
        }



        public DataSet MSC_55(System.String departments_ids_xml,
                                            System.String sewadar_type_ids_xml,
                                            System.Int32? from_id,
                                            System.Int32? to_id,
                                            System.String sewadar_name_xml,
                                            System.String sewadar_status_idx_xml,
                                            System.String is_active)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter sewadar_type_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadar_type_ids_xml", sewadar_type_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadar_type_ids_xml_Parameter);
            SqlParameter from_id_Parameter = ObjDBManager.CreateSqlParameter("from_id", from_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(from_id_Parameter);
            SqlParameter to_id_Parameter = ObjDBManager.CreateSqlParameter("to_id", to_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(to_id_Parameter);
            SqlParameter sewadar_name_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadar_name_xml", sewadar_name_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadar_name_xml_Parameter);
            SqlParameter sewadar_status_idx_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadar_status_idx_xml", sewadar_status_idx_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadar_status_idx_xml_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("MSC_55", sqlParameters);

            return dset;
        }

        public string MSC_55AsTask(System.String departments_ids_xml,
                                                System.String sewadar_type_ids_xml,
                                                System.Int32? from_id,
                                                System.Int32? to_id,
                                                System.String sewadar_name_xml,
                                                System.String sewadar_status_idx_xml,
                                                System.String is_active)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter sewadar_type_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadar_type_ids_xml", sewadar_type_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadar_type_ids_xml_Parameter);
            SqlParameter from_id_Parameter = ObjDBManager.CreateSqlParameter("from_id", from_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(from_id_Parameter);
            SqlParameter to_id_Parameter = ObjDBManager.CreateSqlParameter("to_id", to_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(to_id_Parameter);
            SqlParameter sewadar_name_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadar_name_xml", sewadar_name_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadar_name_xml_Parameter);
            SqlParameter sewadar_status_idx_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadar_status_idx_xml", sewadar_status_idx_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadar_status_idx_xml_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("MSC_55", sqlParameters);

            return taskString;
        }



        public DataSet NTF_51(System.String sewadar_status_id_xml,
                                            System.DateTime? from_date,
                                            System.DateTime? to_date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_status_id_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadar_status_id_xml", sewadar_status_id_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadar_status_id_xml_Parameter);
            SqlParameter from_date_Parameter = ObjDBManager.CreateSqlParameter("from_date", from_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_date_Parameter);
            SqlParameter to_date_Parameter = ObjDBManager.CreateSqlParameter("to_date", to_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_date_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("NTF_51", sqlParameters);

            return dset;
        }

        public string NTF_51AsTask(System.String sewadar_status_id_xml,
                                                System.DateTime? from_date,
                                                System.DateTime? to_date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_status_id_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadar_status_id_xml", sewadar_status_id_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadar_status_id_xml_Parameter);
            SqlParameter from_date_Parameter = ObjDBManager.CreateSqlParameter("from_date", from_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_date_Parameter);
            SqlParameter to_date_Parameter = ObjDBManager.CreateSqlParameter("to_date", to_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_date_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("NTF_51", sqlParameters);

            return taskString;
        }



        public DataSet NTF_52(System.String old_status_xml,
                                            System.String new_status_xml,
                                            System.DateTime? from_effective_date,
                                            System.DateTime? to_effective_date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter old_status_xml_Parameter = ObjDBManager.CreateSqlParameter("old_status_xml", old_status_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(old_status_xml_Parameter);
            SqlParameter new_status_xml_Parameter = ObjDBManager.CreateSqlParameter("new_status_xml", new_status_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(new_status_xml_Parameter);
            SqlParameter from_effective_date_Parameter = ObjDBManager.CreateSqlParameter("from_effective_date", from_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_effective_date_Parameter);
            SqlParameter to_effective_date_Parameter = ObjDBManager.CreateSqlParameter("to_effective_date", to_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_effective_date_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("NTF_52", sqlParameters);

            return dset;
        }

        public string NTF_52AsTask(System.String old_status_xml,
                                                System.String new_status_xml,
                                                System.DateTime? from_effective_date,
                                                System.DateTime? to_effective_date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter old_status_xml_Parameter = ObjDBManager.CreateSqlParameter("old_status_xml", old_status_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(old_status_xml_Parameter);
            SqlParameter new_status_xml_Parameter = ObjDBManager.CreateSqlParameter("new_status_xml", new_status_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(new_status_xml_Parameter);
            SqlParameter from_effective_date_Parameter = ObjDBManager.CreateSqlParameter("from_effective_date", from_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_effective_date_Parameter);
            SqlParameter to_effective_date_Parameter = ObjDBManager.CreateSqlParameter("to_effective_date", to_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_effective_date_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("NTF_52", sqlParameters);

            return taskString;
        }



        public DataSet NTF_53(System.String old_dep_xml,
                                            System.String new_dep_xml,
                                            System.DateTime? from_effective_date,
                                            System.DateTime? to_effective_date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter old_dep_xml_Parameter = ObjDBManager.CreateSqlParameter("old_dep_xml", old_dep_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(old_dep_xml_Parameter);
            SqlParameter new_dep_xml_Parameter = ObjDBManager.CreateSqlParameter("new_dep_xml", new_dep_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(new_dep_xml_Parameter);
            SqlParameter from_effective_date_Parameter = ObjDBManager.CreateSqlParameter("from_effective_date", from_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_effective_date_Parameter);
            SqlParameter to_effective_date_Parameter = ObjDBManager.CreateSqlParameter("to_effective_date", to_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_effective_date_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("NTF_53", sqlParameters);

            return dset;
        }

        public string NTF_53AsTask(System.String old_dep_xml,
                                                System.String new_dep_xml,
                                                System.DateTime? from_effective_date,
                                                System.DateTime? to_effective_date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter old_dep_xml_Parameter = ObjDBManager.CreateSqlParameter("old_dep_xml", old_dep_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(old_dep_xml_Parameter);
            SqlParameter new_dep_xml_Parameter = ObjDBManager.CreateSqlParameter("new_dep_xml", new_dep_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(new_dep_xml_Parameter);
            SqlParameter from_effective_date_Parameter = ObjDBManager.CreateSqlParameter("from_effective_date", from_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_effective_date_Parameter);
            SqlParameter to_effective_date_Parameter = ObjDBManager.CreateSqlParameter("to_effective_date", to_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_effective_date_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("NTF_53", sqlParameters);

            return taskString;
        }



        public DataSet NTF_54(System.String old_grades_xml,
                                            System.String new_grades_xml,
                                            System.DateTime? from_effective_date,
                                            System.DateTime? to_effective_date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter old_grades_xml_Parameter = ObjDBManager.CreateSqlParameter("old_grades_xml", old_grades_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(old_grades_xml_Parameter);
            SqlParameter new_grades_xml_Parameter = ObjDBManager.CreateSqlParameter("new_grades_xml", new_grades_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(new_grades_xml_Parameter);
            SqlParameter from_effective_date_Parameter = ObjDBManager.CreateSqlParameter("from_effective_date", from_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_effective_date_Parameter);
            SqlParameter to_effective_date_Parameter = ObjDBManager.CreateSqlParameter("to_effective_date", to_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_effective_date_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("NTF_54", sqlParameters);

            return dset;
        }

        public string NTF_54AsTask(System.String old_grades_xml,
                                                System.String new_grades_xml,
                                                System.DateTime? from_effective_date,
                                                System.DateTime? to_effective_date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter old_grades_xml_Parameter = ObjDBManager.CreateSqlParameter("old_grades_xml", old_grades_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(old_grades_xml_Parameter);
            SqlParameter new_grades_xml_Parameter = ObjDBManager.CreateSqlParameter("new_grades_xml", new_grades_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(new_grades_xml_Parameter);
            SqlParameter from_effective_date_Parameter = ObjDBManager.CreateSqlParameter("from_effective_date", from_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_effective_date_Parameter);
            SqlParameter to_effective_date_Parameter = ObjDBManager.CreateSqlParameter("to_effective_date", to_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_effective_date_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("NTF_54", sqlParameters);

            return taskString;
        }



        public DataSet NTF_55(System.String old_designation_xml,
                                            System.String new_designation_xml,
                                            System.DateTime? from_effective_date,
                                            System.DateTime? to_effective_date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter old_designation_xml_Parameter = ObjDBManager.CreateSqlParameter("old_designation_xml", old_designation_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(old_designation_xml_Parameter);
            SqlParameter new_designation_xml_Parameter = ObjDBManager.CreateSqlParameter("new_designation_xml", new_designation_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(new_designation_xml_Parameter);
            SqlParameter from_effective_date_Parameter = ObjDBManager.CreateSqlParameter("from_effective_date", from_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_effective_date_Parameter);
            SqlParameter to_effective_date_Parameter = ObjDBManager.CreateSqlParameter("to_effective_date", to_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_effective_date_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("NTF_55", sqlParameters);

            return dset;
        }

        public string NTF_55AsTask(System.String old_designation_xml,
                                                System.String new_designation_xml,
                                                System.DateTime? from_effective_date,
                                                System.DateTime? to_effective_date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter old_designation_xml_Parameter = ObjDBManager.CreateSqlParameter("old_designation_xml", old_designation_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(old_designation_xml_Parameter);
            SqlParameter new_designation_xml_Parameter = ObjDBManager.CreateSqlParameter("new_designation_xml", new_designation_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(new_designation_xml_Parameter);
            SqlParameter from_effective_date_Parameter = ObjDBManager.CreateSqlParameter("from_effective_date", from_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_effective_date_Parameter);
            SqlParameter to_effective_date_Parameter = ObjDBManager.CreateSqlParameter("to_effective_date", to_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_effective_date_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("NTF_55", sqlParameters);

            return taskString;
        }



        public DataSet NTF_56(System.String old_sewadar_type_xml,
                                            System.String new_sewadar_type_xml,
                                            System.DateTime? from_effective_date,
                                            System.DateTime? to_effective_date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter old_sewadar_type_xml_Parameter = ObjDBManager.CreateSqlParameter("old_sewadar_type_xml", old_sewadar_type_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(old_sewadar_type_xml_Parameter);
            SqlParameter new_sewadar_type_xml_Parameter = ObjDBManager.CreateSqlParameter("new_sewadar_type_xml", new_sewadar_type_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(new_sewadar_type_xml_Parameter);
            SqlParameter from_effective_date_Parameter = ObjDBManager.CreateSqlParameter("from_effective_date", from_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_effective_date_Parameter);
            SqlParameter to_effective_date_Parameter = ObjDBManager.CreateSqlParameter("to_effective_date", to_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_effective_date_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("NTF_56", sqlParameters);

            return dset;
        }

        public string NTF_56AsTask(System.String old_sewadar_type_xml,
                                                System.String new_sewadar_type_xml,
                                                System.DateTime? from_effective_date,
                                                System.DateTime? to_effective_date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter old_sewadar_type_xml_Parameter = ObjDBManager.CreateSqlParameter("old_sewadar_type_xml", old_sewadar_type_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(old_sewadar_type_xml_Parameter);
            SqlParameter new_sewadar_type_xml_Parameter = ObjDBManager.CreateSqlParameter("new_sewadar_type_xml", new_sewadar_type_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(new_sewadar_type_xml_Parameter);
            SqlParameter from_effective_date_Parameter = ObjDBManager.CreateSqlParameter("from_effective_date", from_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_effective_date_Parameter);
            SqlParameter to_effective_date_Parameter = ObjDBManager.CreateSqlParameter("to_effective_date", to_effective_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_effective_date_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("NTF_56", sqlParameters);

            return taskString;
        }



        public DataSet PostIDCardRequest(System.Int32? p_person_id,
                                                    System.String p_request_type,
                                                    System.String p_include_dependants,
                                                    System.String p_remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_person_id_Parameter = ObjDBManager.CreateSqlParameter("p_person_id", p_person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_person_id_Parameter);
            SqlParameter p_request_type_Parameter = ObjDBManager.CreateSqlParameter("p_request_type", p_request_type, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(p_request_type_Parameter);
            SqlParameter p_include_dependants_Parameter = ObjDBManager.CreateSqlParameter("p_include_dependants", p_include_dependants, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(p_include_dependants_Parameter);
            SqlParameter p_remarks_Parameter = ObjDBManager.CreateSqlParameter("p_remarks", p_remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("PostIDCardRequest", sqlParameters);

            return dset;
        }

        public string PostIDCardRequestAsTask(System.Int32? p_person_id,
                                                            System.String p_request_type,
                                                            System.String p_include_dependants,
                                                            System.String p_remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_person_id_Parameter = ObjDBManager.CreateSqlParameter("p_person_id", p_person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_person_id_Parameter);
            SqlParameter p_request_type_Parameter = ObjDBManager.CreateSqlParameter("p_request_type", p_request_type, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(p_request_type_Parameter);
            SqlParameter p_include_dependants_Parameter = ObjDBManager.CreateSqlParameter("p_include_dependants", p_include_dependants, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(p_include_dependants_Parameter);
            SqlParameter p_remarks_Parameter = ObjDBManager.CreateSqlParameter("p_remarks", p_remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("PostIDCardRequest", sqlParameters);

            return taskString;
        }



        public DataSet Qry_house_history(System.Int32? housing_location_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("housing_location_id", housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_location_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Qry_house_history", sqlParameters);

            return dset;
        }

        public string Qry_house_historyAsTask(System.Int32? housing_location_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("housing_location_id", housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_location_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Qry_house_history", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader Qry_house_historyAsReader(System.Int32? housing_location_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("housing_location_id", housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_location_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("Qry_house_history", sqlParameters);

            return reader;
        }



        public DataSet Qry_house_location(System.Int32? housing_location_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("housing_location_id", housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_location_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Qry_house_location", sqlParameters);

            return dset;
        }

        public string Qry_house_locationAsTask(System.Int32? housing_location_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("housing_location_id", housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_location_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Qry_house_location", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader Qry_house_locationAsReader(System.Int32? housing_location_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("housing_location_id", housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_location_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("Qry_house_location", sqlParameters);

            return reader;
        }



        public DataSet Qry_house_occupant_location(System.Int32? housing_location_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("housing_location_id", housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_location_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Qry_house_occupant_location", sqlParameters);

            return dset;
        }

        public string Qry_house_occupant_locationAsTask(System.Int32? housing_location_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("housing_location_id", housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_location_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Qry_house_occupant_location", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader Qry_house_occupant_locationAsReader(System.Int32? housing_location_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("housing_location_id", housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_location_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("Qry_house_occupant_location", sqlParameters);

            return reader;
        }



        public DataSet QryAddress(System.Int32? person_id,
                                                System.String address_type_cd)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter address_type_cd_Parameter = ObjDBManager.CreateSqlParameter("address_type_cd", address_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(address_type_cd_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryAddress", sqlParameters);

            return dset;
        }

        public string QryAddressAsTask(System.Int32? person_id,
                                                    System.String address_type_cd)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter address_type_cd_Parameter = ObjDBManager.CreateSqlParameter("address_type_cd", address_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(address_type_cd_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryAddress", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryAddressAsReader(System.Int32? person_id,
                                                                System.String address_type_cd)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter address_type_cd_Parameter = ObjDBManager.CreateSqlParameter("address_type_cd", address_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(address_type_cd_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryAddress", sqlParameters);

            return reader;
        }



        public DataSet QryAllotTransferVacateWrapper(System.Int32? person_id,
                                                                System.Int32? allocation_id,
                                                                System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter allocation_id_Parameter = ObjDBManager.CreateSqlParameter("allocation_id", allocation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(allocation_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryAllotTransferVacateWrapper", sqlParameters);

            return dset;
        }

        public string QryAllotTransferVacateWrapperAsTask(System.Int32? person_id,
                                                                        System.Int32? allocation_id,
                                                                        System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter allocation_id_Parameter = ObjDBManager.CreateSqlParameter("allocation_id", allocation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(allocation_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryAllotTransferVacateWrapper", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryAllotTransferVacateWrapperAsReader(System.Int32? person_id,
                                                                                    System.Int32? allocation_id,
                                                                                    System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter allocation_id_Parameter = ObjDBManager.CreateSqlParameter("allocation_id", allocation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(allocation_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryAllotTransferVacateWrapper", sqlParameters);

            return reader;
        }



        public DataSet QryCheckPersonHouse(System.Int32? person_id,
                                                        ref System.Int32 house_count)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter house_count_Parameter = ObjDBManager.CreateSqlParameter("house_count", house_count, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(house_count_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryCheckPersonHouse", sqlParameters);
            house_count = (System.Int32)house_count_Parameter.Value;

            return dset;
        }

        public string QryCheckPersonHouseAsTask(System.Int32? person_id,
                                                            ref System.Int32 house_count)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter house_count_Parameter = ObjDBManager.CreateSqlParameter("house_count", house_count, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(house_count_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryCheckPersonHouse", sqlParameters);
            house_count = (System.Int32)house_count_Parameter.Value;

            return taskString;
        }

        public DCCSqlDataReader QryCheckPersonHouseAsReader(System.Int32? person_id,
                                                                        ref System.Int32 house_count)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter house_count_Parameter = ObjDBManager.CreateSqlParameter("house_count", house_count, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(house_count_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryCheckPersonHouse", sqlParameters);
            house_count = (System.Int32)house_count_Parameter.Value;

            return reader;
        }



        public DataSet QryCheckTwoHouseForMorethan30days(System.Int32? person_id,
                                                                    System.DateTime? NewHouseOccDtPlus30,
                                                                    ref System.Int32 Result)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter NewHouseOccDtPlus30_Parameter = ObjDBManager.CreateSqlParameter("NewHouseOccDtPlus30", NewHouseOccDtPlus30, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(NewHouseOccDtPlus30_Parameter);
            SqlParameter Result_Parameter = ObjDBManager.CreateSqlParameter("Result", Result, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(Result_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryCheckTwoHouseForMorethan30days", sqlParameters);
            Result = (System.Int32)Result_Parameter.Value;

            return dset;
        }

        public string QryCheckTwoHouseForMorethan30daysAsTask(System.Int32? person_id,
                                                                            System.DateTime? NewHouseOccDtPlus30,
                                                                            ref System.Int32 Result)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter NewHouseOccDtPlus30_Parameter = ObjDBManager.CreateSqlParameter("NewHouseOccDtPlus30", NewHouseOccDtPlus30, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(NewHouseOccDtPlus30_Parameter);
            SqlParameter Result_Parameter = ObjDBManager.CreateSqlParameter("Result", Result, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(Result_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryCheckTwoHouseForMorethan30days", sqlParameters);
            Result = (System.Int32)Result_Parameter.Value;

            return taskString;
        }

        public DCCSqlDataReader QryCheckTwoHouseForMorethan30daysAsReader(System.Int32? person_id,
                                                                                        System.DateTime? NewHouseOccDtPlus30,
                                                                                        ref System.Int32 Result)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter NewHouseOccDtPlus30_Parameter = ObjDBManager.CreateSqlParameter("NewHouseOccDtPlus30", NewHouseOccDtPlus30, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(NewHouseOccDtPlus30_Parameter);
            SqlParameter Result_Parameter = ObjDBManager.CreateSqlParameter("Result", Result, SqlDbType.Int, ParameterDirection.Output);
            sqlParameters.Add(Result_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryCheckTwoHouseForMorethan30days", sqlParameters);
            Result = (System.Int32)Result_Parameter.Value;

            return reader;
        }



        public DataSet QryChildren_Results(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryChildren_Results", sqlParameters);

            return dset;
        }

        public string QryChildren_ResultsAsTask(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryChildren_Results", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryChildren_ResultsAsReader(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryChildren_Results", sqlParameters);

            return reader;
        }



        public DataSet QryChildrenEligibility(System.Int32? dependant_id,
                                                            System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryChildrenEligibility", sqlParameters);

            return dset;
        }

        public string QryChildrenEligibilityAsTask(System.Int32? dependant_id,
                                                                System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryChildrenEligibility", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryChildrenEligibilityAsReader(System.Int32? dependant_id,
                                                                            System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryChildrenEligibility", sqlParameters);

            return reader;
        }



        public DataSet QryChildrenFacilitySet()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryChildrenFacilitySet", sqlParameters);
            return dset;
        }

        public string QryChildrenFacilitySetAsTask()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            string taskString = ObjDBManager.GetPrintableSQLString("QryChildrenFacilitySet", sqlParameters);
            return taskString;
        }

        public DCCSqlDataReader QryChildrenFacilitySetAsReader()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryChildrenFacilitySet", sqlParameters);
            return reader;
        }



        public DataSet QryChildrenResultDependantNameInserMode(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryChildrenResultDependantNameInserMode", sqlParameters);

            return dset;
        }

        public string QryChildrenResultDependantNameInserModeAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryChildrenResultDependantNameInserMode", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryChildrenResultDependantNameInserModeAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryChildrenResultDependantNameInserMode", sqlParameters);

            return reader;
        }



        public DataSet QryChildrenResultDependantNameQueryMode(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryChildrenResultDependantNameQueryMode", sqlParameters);

            return dset;
        }

        public string QryChildrenResultDependantNameQueryModeAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryChildrenResultDependantNameQueryMode", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryChildrenResultDependantNameQueryModeAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryChildrenResultDependantNameQueryMode", sqlParameters);

            return reader;
        }



        public DataSet QryCommonExperienceDetailsAndResidentOrVisitorDeatilsWrapper(System.Int32? person_id,
                                                                                                System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryCommonExperienceDetailsAndResidentOrVisitorDeatilsWrapper", sqlParameters);

            return dset;
        }

        public string QryCommonExperienceDetailsAndResidentOrVisitorDeatilsWrapperAsTask(System.Int32? person_id,
                                                                                                    System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryCommonExperienceDetailsAndResidentOrVisitorDeatilsWrapper", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryCommonExperienceDetailsAndResidentOrVisitorDeatilsWrapperAsReader(System.Int32? person_id,
                                                                                                                System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryCommonExperienceDetailsAndResidentOrVisitorDeatilsWrapper", sqlParameters);

            return reader;
        }



        public DataSet QryCommonForAllScreens(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryCommonForAllScreens", sqlParameters);

            return dset;
        }

        public string QryCommonForAllScreensAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryCommonForAllScreens", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryCommonForAllScreensAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryCommonForAllScreens", sqlParameters);

            return reader;
        }



        public DataSet QryCommonHisInfForSewadarAnddependent_adt_persons(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryCommonHisInfForSewadarAnddependent_adt_persons", sqlParameters);

            return dset;
        }

        public string QryCommonHisInfForSewadarAnddependent_adt_personsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryCommonHisInfForSewadarAnddependent_adt_persons", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryCommonHisInfForSewadarAnddependent_adt_personsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryCommonHisInfForSewadarAnddependent_adt_persons", sqlParameters);

            return reader;
        }



        public DataSet QryCommonHistoricalInformation_adt_HousingUnitAllocations(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryCommonHistoricalInformation_adt_HousingUnitAllocations", sqlParameters);

            return dset;
        }

        public string QryCommonHistoricalInformation_adt_HousingUnitAllocationsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryCommonHistoricalInformation_adt_HousingUnitAllocations", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryCommonHistoricalInformation_adt_HousingUnitAllocationsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryCommonHistoricalInformation_adt_HousingUnitAllocations", sqlParameters);

            return reader;
        }



        public DataSet QryCommonHistoricalInformation_Id_card_requests(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryCommonHistoricalInformation_Id_card_requests", sqlParameters);

            return dset;
        }

        public string QryCommonHistoricalInformation_Id_card_requestsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryCommonHistoricalInformation_Id_card_requests", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryCommonHistoricalInformation_Id_card_requestsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryCommonHistoricalInformation_Id_card_requests", sqlParameters);

            return reader;
        }



        public DataSet QryConfidentialInformationWrapper(System.Int32? person_id,
                                                                    System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryConfidentialInformationWrapper", sqlParameters);

            return dset;
        }

        public string QryConfidentialInformationWrapperAsTask(System.Int32? person_id,
                                                                            System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryConfidentialInformationWrapper", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryConfidentialInformationWrapperAsReader(System.Int32? person_id,
                                                                                        System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryConfidentialInformationWrapper", sqlParameters);

            return reader;
        }



        public DataSet QryContractDetails(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryContractDetails", sqlParameters);

            return dset;
        }

        public string QryContractDetailsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryContractDetails", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryContractDetailsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryContractDetails", sqlParameters);

            return reader;
        }



        public DataSet QryDepartmentTransfer(System.Int32? sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryDepartmentTransfer", sqlParameters);

            return dset;
        }

        public string QryDepartmentTransferAsTask(System.Int32? sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryDepartmentTransfer", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryDepartmentTransferAsReader(System.Int32? sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryDepartmentTransfer", sqlParameters);

            return reader;
        }



        public DataSet QryDependantChildren(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryDependantChildren", sqlParameters);

            return dset;
        }

        public string QryDependantChildrenAsTask(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryDependantChildren", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryDependantChildrenAsReader(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryDependantChildren", sqlParameters);

            return reader;
        }



        public DataSet QryDependantName()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryDependantName", sqlParameters);
            return dset;
        }

        public string QryDependantNameAsTask()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            string taskString = ObjDBManager.GetPrintableSQLString("QryDependantName", sqlParameters);
            return taskString;
        }

        public DCCSqlDataReader QryDependantNameAsReader()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryDependantName", sqlParameters);
            return reader;
        }



        public DataSet QryDependantNameInserMode(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryDependantNameInserMode", sqlParameters);

            return dset;
        }

        public string QryDependantNameInserModeAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryDependantNameInserMode", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryDependantNameInserModeAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryDependantNameInserMode", sqlParameters);

            return reader;
        }



        public DataSet QryDependantNameQueryMode(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryDependantNameQueryMode", sqlParameters);

            return dset;
        }

        public string QryDependantNameQueryModeAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryDependantNameQueryMode", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryDependantNameQueryModeAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryDependantNameQueryMode", sqlParameters);

            return reader;
        }



        public DataSet QryDependantNames(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryDependantNames", sqlParameters);

            return dset;
        }

        public string QryDependantNamesAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryDependantNames", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryDependantNamesAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryDependantNames", sqlParameters);

            return reader;
        }



        public DataSet QryDependantPersonsDetails(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryDependantPersonsDetails", sqlParameters);

            return dset;
        }

        public string QryDependantPersonsDetailsAsTask(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryDependantPersonsDetails", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryDependantPersonsDetailsAsReader(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryDependantPersonsDetails", sqlParameters);

            return reader;
        }



        public DataSet QryDependent_Id_card_requests_Historical_Information(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryDependent_Id_card_requests_Historical_Information", sqlParameters);

            return dset;
        }

        public string QryDependent_Id_card_requests_Historical_InformationAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryDependent_Id_card_requests_Historical_Information", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryDependent_Id_card_requests_Historical_InformationAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryDependent_Id_card_requests_Historical_Information", sqlParameters);

            return reader;
        }



        public DataSet QryDetailspersons_dependants(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryDetailspersons_dependants", sqlParameters);

            return dset;
        }

        public string QryDetailspersons_dependantsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryDetailspersons_dependants", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryDetailspersons_dependantsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryDetailspersons_dependants", sqlParameters);

            return reader;
        }



        public DataSet QryEligibleGrantDisbursements(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryEligibleGrantDisbursements", sqlParameters);

            return dset;
        }

        public string QryEligibleGrantDisbursementsAsTask(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryEligibleGrantDisbursements", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryEligibleGrantDisbursementsAsReader(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryEligibleGrantDisbursements", sqlParameters);

            return reader;
        }



        public DataSet QryGrades(System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryGrades", sqlParameters);

            return dset;
        }

        public string QryGradesAsTask(System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryGrades", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryGradesAsReader(System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryGrades", sqlParameters);

            return reader;
        }



        public DataSet QryGradesHistoricalInformation(System.Int16? grade_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(grade_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryGradesHistoricalInformation", sqlParameters);

            return dset;
        }

        public string QryGradesHistoricalInformationAsTask(System.Int16? grade_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(grade_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryGradesHistoricalInformation", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryGradesHistoricalInformationAsReader(System.Int16? grade_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(grade_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryGradesHistoricalInformation", sqlParameters);

            return reader;
        }



        public DataSet QryGrantDisbursements(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryGrantDisbursements", sqlParameters);

            return dset;
        }

        public string QryGrantDisbursementsAsTask(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryGrantDisbursements", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryGrantDisbursementsAsReader(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryGrantDisbursements", sqlParameters);

            return reader;
        }



        public DataSet QryGrantDisbursementsFacilities(System.Int32? dependant_id,
                                                                    System.Int16? facility_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter facility_id_Parameter = ObjDBManager.CreateSqlParameter("facility_id", facility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(facility_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryGrantDisbursementsFacilities", sqlParameters);

            return dset;
        }

        public string QryGrantDisbursementsFacilitiesAsTask(System.Int32? dependant_id,
                                                                        System.Int16? facility_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter facility_id_Parameter = ObjDBManager.CreateSqlParameter("facility_id", facility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(facility_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryGrantDisbursementsFacilities", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryGrantDisbursementsFacilitiesAsReader(System.Int32? dependant_id,
                                                                                    System.Int16? facility_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter facility_id_Parameter = ObjDBManager.CreateSqlParameter("facility_id", facility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(facility_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryGrantDisbursementsFacilities", sqlParameters);

            return reader;
        }



        public DataSet QryHouse_Location_Id(System.Int32? group_location_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter group_location_id_Parameter = ObjDBManager.CreateSqlParameter("group_location_id", group_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(group_location_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryHouse_Location_Id", sqlParameters);

            return dset;
        }

        public string QryHouse_Location_IdAsTask(System.Int32? group_location_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter group_location_id_Parameter = ObjDBManager.CreateSqlParameter("group_location_id", group_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(group_location_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryHouse_Location_Id", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryHouse_Location_IdAsReader(System.Int32? group_location_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter group_location_id_Parameter = ObjDBManager.CreateSqlParameter("group_location_id", group_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(group_location_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryHouse_Location_Id", sqlParameters);

            return reader;
        }



        public DataSet QryHouse_Location_name(System.Int32? housing_location_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("housing_location_id", housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_location_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryHouse_Location_name", sqlParameters);

            return dset;
        }

        public string QryHouse_Location_nameAsTask(System.Int32? housing_location_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("housing_location_id", housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_location_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryHouse_Location_name", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryHouse_Location_nameAsReader(System.Int32? housing_location_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("housing_location_id", housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_location_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryHouse_Location_name", sqlParameters);

            return reader;
        }



        public DataSet QryHouse_Types(System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryHouse_Types", sqlParameters);

            return dset;
        }

        public string QryHouse_TypesAsTask(System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryHouse_Types", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryHouse_TypesAsReader(System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryHouse_Types", sqlParameters);

            return reader;
        }



        public DataSet QryHousesToCheckMorethan30days(System.Int32? person_id,
                                                                    System.Int32? intHousingUnitId)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter intHousingUnitId_Parameter = ObjDBManager.CreateSqlParameter("intHousingUnitId", intHousingUnitId, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(intHousingUnitId_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryHousesToCheckMorethan30days", sqlParameters);

            return dset;
        }

        public string QryHousesToCheckMorethan30daysAsTask(System.Int32? person_id,
                                                                        System.Int32? intHousingUnitId)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter intHousingUnitId_Parameter = ObjDBManager.CreateSqlParameter("intHousingUnitId", intHousingUnitId, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(intHousingUnitId_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryHousesToCheckMorethan30days", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryHousesToCheckMorethan30daysAsReader(System.Int32? person_id,
                                                                                    System.Int32? intHousingUnitId)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter intHousingUnitId_Parameter = ObjDBManager.CreateSqlParameter("intHousingUnitId", intHousingUnitId, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(intHousingUnitId_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryHousesToCheckMorethan30days", sqlParameters);

            return reader;
        }



        public DataSet Qryhousing_status()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DataSet dset = ObjDBManager.ExecuteStoredProc("Qryhousing_status", sqlParameters);
            return dset;
        }

        public string Qryhousing_statusAsTask()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            string taskString = ObjDBManager.GetPrintableSQLString("Qryhousing_status", sqlParameters);
            return taskString;
        }

        public DCCSqlDataReader Qryhousing_statusAsReader()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("Qryhousing_status", sqlParameters);
            return reader;
        }



        public DataSet QryHousingPurpose()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryHousingPurpose", sqlParameters);
            return dset;
        }

        public string QryHousingPurposeAsTask()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            string taskString = ObjDBManager.GetPrintableSQLString("QryHousingPurpose", sqlParameters);
            return taskString;
        }

        public DCCSqlDataReader QryHousingPurposeAsReader()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryHousingPurpose", sqlParameters);
            return reader;
        }



        public DataSet QryHousingPurposes()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryHousingPurposes", sqlParameters);
            return dset;
        }

        public string QryHousingPurposesAsTask()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            string taskString = ObjDBManager.GetPrintableSQLString("QryHousingPurposes", sqlParameters);
            return taskString;
        }

        public DCCSqlDataReader QryHousingPurposesAsReader()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryHousingPurposes", sqlParameters);
            return reader;
        }



        public DataSet QryHousingStatus()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryHousingStatus", sqlParameters);
            return dset;
        }

        public string QryHousingStatusAsTask()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            string taskString = ObjDBManager.GetPrintableSQLString("QryHousingStatus", sqlParameters);
            return taskString;
        }

        public DCCSqlDataReader QryHousingStatusAsReader()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryHousingStatus", sqlParameters);
            return reader;
        }



        public DataSet QryHousingUnitAllocations(System.Int32? allocation_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter allocation_id_Parameter = ObjDBManager.CreateSqlParameter("allocation_id", allocation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(allocation_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryHousingUnitAllocations", sqlParameters);

            return dset;
        }

        public string QryHousingUnitAllocationsAsTask(System.Int32? allocation_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter allocation_id_Parameter = ObjDBManager.CreateSqlParameter("allocation_id", allocation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(allocation_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryHousingUnitAllocations", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryHousingUnitAllocationsAsReader(System.Int32? allocation_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter allocation_id_Parameter = ObjDBManager.CreateSqlParameter("allocation_id", allocation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(allocation_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryHousingUnitAllocations", sqlParameters);

            return reader;
        }



        public DataSet QryHousingUnitBlock(System.Int32? InputId)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter InputId_Parameter = ObjDBManager.CreateSqlParameter("InputId", InputId, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(InputId_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryHousingUnitBlock", sqlParameters);

            return dset;
        }

        public string QryHousingUnitBlockAsTask(System.Int32? InputId)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter InputId_Parameter = ObjDBManager.CreateSqlParameter("InputId", InputId, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(InputId_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryHousingUnitBlock", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryHousingUnitBlockAsReader(System.Int32? InputId)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter InputId_Parameter = ObjDBManager.CreateSqlParameter("InputId", InputId, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(InputId_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryHousingUnitBlock", sqlParameters);

            return reader;
        }



        public DataSet QryHousingUnits(System.Int32? in_housing_location_id,
                                                    System.Int32? in_group_location_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_location_id", in_housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_housing_location_id_Parameter);
            SqlParameter in_group_location_id_Parameter = ObjDBManager.CreateSqlParameter("in_group_location_id", in_group_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_group_location_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryHousingUnits", sqlParameters);

            return dset;
        }

        public string QryHousingUnitsAsTask(System.Int32? in_housing_location_id,
                                                        System.Int32? in_group_location_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_location_id", in_housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_housing_location_id_Parameter);
            SqlParameter in_group_location_id_Parameter = ObjDBManager.CreateSqlParameter("in_group_location_id", in_group_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_group_location_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryHousingUnits", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryHousingUnitsAsReader(System.Int32? in_housing_location_id,
                                                                    System.Int32? in_group_location_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_location_id", in_housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_housing_location_id_Parameter);
            SqlParameter in_group_location_id_Parameter = ObjDBManager.CreateSqlParameter("in_group_location_id", in_group_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_group_location_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryHousingUnits", sqlParameters);

            return reader;
        }



        public DataSet QryId_card_requests(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryId_card_requests", sqlParameters);

            return dset;
        }

        public string QryId_card_requestsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryId_card_requests", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryId_card_requestsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryId_card_requests", sqlParameters);

            return reader;
        }



        public DataSet QryId_card_requestsActive(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryId_card_requestsActive", sqlParameters);

            return dset;
        }

        public string QryId_card_requestsActiveAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryId_card_requestsActive", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryId_card_requestsActiveAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryId_card_requestsActive", sqlParameters);

            return reader;
        }



        public DataSet QryId_card_requestsActiveInActive(System.Int16? status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryId_card_requestsActiveInActive", sqlParameters);

            return dset;
        }

        public string QryId_card_requestsActiveInActiveAsTask(System.Int16? status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryId_card_requestsActiveInActive", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryId_card_requestsActiveInActiveAsReader(System.Int16? status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryId_card_requestsActiveInActive", sqlParameters);

            return reader;
        }



        public DataSet QryId_card_requestsInActive(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryId_card_requestsInActive", sqlParameters);

            return dset;
        }

        public string QryId_card_requestsInActiveAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryId_card_requestsInActive", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryId_card_requestsInActiveAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryId_card_requestsInActive", sqlParameters);

            return reader;
        }



        public DataSet QryIDCardPhotos(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryIDCardPhotos", sqlParameters);

            return dset;
        }

        public string QryIDCardPhotosAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryIDCardPhotos", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryIDCardPhotosAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryIDCardPhotos", sqlParameters);

            return reader;
        }



        public DataSet QryIDCardRequestReasons(System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryIDCardRequestReasons", sqlParameters);

            return dset;
        }

        public string QryIDCardRequestReasonsAsTask(System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryIDCardRequestReasons", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryIDCardRequestReasonsAsReader(System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryIDCardRequestReasons", sqlParameters);

            return reader;
        }



        public DataSet QryIdCardRequestsList(System.String person_type_cd,
                                                        System.Int16? status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_type_cd", person_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_type_cd_Parameter);
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryIdCardRequestsList", sqlParameters);

            return dset;
        }

        public string QryIdCardRequestsListAsTask(System.String person_type_cd,
                                                                System.Int16? status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_type_cd", person_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_type_cd_Parameter);
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryIdCardRequestsList", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryIdCardRequestsListAsReader(System.String person_type_cd,
                                                                            System.Int16? status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_type_cd", person_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_type_cd_Parameter);
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryIdCardRequestsList", sqlParameters);

            return reader;
        }



        public DataSet QryIdCardRequestStatusHistory()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryIdCardRequestStatusHistory", sqlParameters);
            return dset;
        }

        public string QryIdCardRequestStatusHistoryAsTask()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            string taskString = ObjDBManager.GetPrintableSQLString("QryIdCardRequestStatusHistory", sqlParameters);
            return taskString;
        }

        public DCCSqlDataReader QryIdCardRequestStatusHistoryAsReader()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryIdCardRequestStatusHistory", sqlParameters);
            return reader;
        }



        public DataSet QryIdCardRequestStatusHistoryRemarks(System.Int32? Person_Dep_ID,
                                                                        System.DateTime? requested_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter Person_Dep_ID_Parameter = ObjDBManager.CreateSqlParameter("Person_Dep_ID", Person_Dep_ID, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(Person_Dep_ID_Parameter);
            SqlParameter requested_dt_Parameter = ObjDBManager.CreateSqlParameter("requested_dt", requested_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(requested_dt_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryIdCardRequestStatusHistoryRemarks", sqlParameters);

            return dset;
        }

        public string QryIdCardRequestStatusHistoryRemarksAsTask(System.Int32? Person_Dep_ID,
                                                                            System.DateTime? requested_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter Person_Dep_ID_Parameter = ObjDBManager.CreateSqlParameter("Person_Dep_ID", Person_Dep_ID, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(Person_Dep_ID_Parameter);
            SqlParameter requested_dt_Parameter = ObjDBManager.CreateSqlParameter("requested_dt", requested_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(requested_dt_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryIdCardRequestStatusHistoryRemarks", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryIdCardRequestStatusHistoryRemarksAsReader(System.Int32? Person_Dep_ID,
                                                                                        System.DateTime? requested_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter Person_Dep_ID_Parameter = ObjDBManager.CreateSqlParameter("Person_Dep_ID", Person_Dep_ID, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(Person_Dep_ID_Parameter);
            SqlParameter requested_dt_Parameter = ObjDBManager.CreateSqlParameter("requested_dt", requested_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(requested_dt_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryIdCardRequestStatusHistoryRemarks", sqlParameters);

            return reader;
        }



        public DataSet QryInitialMedicalCheckUpDetails(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryInitialMedicalCheckUpDetails", sqlParameters);

            return dset;
        }

        public string QryInitialMedicalCheckUpDetailsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryInitialMedicalCheckUpDetails", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryInitialMedicalCheckUpDetailsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryInitialMedicalCheckUpDetails", sqlParameters);

            return reader;
        }



        public DataSet QryInitiationDate(System.DateTime? InitiateDateFrom,
                                                    System.DateTime? InitiateDateTo)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter InitiateDateFrom_Parameter = ObjDBManager.CreateSqlParameter("InitiateDateFrom", InitiateDateFrom, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(InitiateDateFrom_Parameter);
            SqlParameter InitiateDateTo_Parameter = ObjDBManager.CreateSqlParameter("InitiateDateTo", InitiateDateTo, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(InitiateDateTo_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryInitiationDate", sqlParameters);

            return dset;
        }

        public string QryInitiationDateAsTask(System.DateTime? InitiateDateFrom,
                                                            System.DateTime? InitiateDateTo)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter InitiateDateFrom_Parameter = ObjDBManager.CreateSqlParameter("InitiateDateFrom", InitiateDateFrom, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(InitiateDateFrom_Parameter);
            SqlParameter InitiateDateTo_Parameter = ObjDBManager.CreateSqlParameter("InitiateDateTo", InitiateDateTo, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(InitiateDateTo_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryInitiationDate", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryInitiationDateAsReader(System.DateTime? InitiateDateFrom,
                                                                        System.DateTime? InitiateDateTo)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter InitiateDateFrom_Parameter = ObjDBManager.CreateSqlParameter("InitiateDateFrom", InitiateDateFrom, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(InitiateDateFrom_Parameter);
            SqlParameter InitiateDateTo_Parameter = ObjDBManager.CreateSqlParameter("InitiateDateTo", InitiateDateTo, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(InitiateDateTo_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryInitiationDate", sqlParameters);

            return reader;
        }



        public DataSet QryInitiationDetails(System.Int32? SerialNo)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter SerialNo_Parameter = ObjDBManager.CreateSqlParameter("SerialNo", SerialNo, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(SerialNo_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryInitiationDetails", sqlParameters);

            return dset;
        }

        public string QryInitiationDetailsAsTask(System.Int32? SerialNo)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter SerialNo_Parameter = ObjDBManager.CreateSqlParameter("SerialNo", SerialNo, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(SerialNo_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryInitiationDetails", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryInitiationDetailsAsReader(System.Int32? SerialNo)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter SerialNo_Parameter = ObjDBManager.CreateSqlParameter("SerialNo", SerialNo, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(SerialNo_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryInitiationDetails", sqlParameters);

            return reader;
        }



        public DataSet QryInstitutions(System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryInstitutions", sqlParameters);

            return dset;
        }

        public string QryInstitutionsAsTask(System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryInstitutions", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryInstitutionsAsReader(System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryInstitutions", sqlParameters);

            return reader;
        }



        public DataSet QryJobTypes(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryJobTypes", sqlParameters);

            return dset;
        }

        public string QryJobTypesAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryJobTypes", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryJobTypesAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryJobTypes", sqlParameters);

            return reader;
        }



        public DataSet QryMaritalStatus()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryMaritalStatus", sqlParameters);
            return dset;
        }

        public string QryMaritalStatusAsTask()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            string taskString = ObjDBManager.GetPrintableSQLString("QryMaritalStatus", sqlParameters);
            return taskString;
        }

        public DCCSqlDataReader QryMaritalStatusAsReader()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryMaritalStatus", sqlParameters);
            return reader;
        }



        public DataSet QryNotification_addressees(System.Int16? template_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryNotification_addressees", sqlParameters);

            return dset;
        }

        public string QryNotification_addresseesAsTask(System.Int16? template_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryNotification_addressees", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryNotification_addresseesAsReader(System.Int16? template_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryNotification_addressees", sqlParameters);

            return reader;
        }



        public DataSet QryNotification_addressees_Edit(System.Int32? notification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryNotification_addressees_Edit", sqlParameters);

            return dset;
        }

        public string QryNotification_addressees_EditAsTask(System.Int32? notification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryNotification_addressees_Edit", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryNotification_addressees_EditAsReader(System.Int32? notification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryNotification_addressees_Edit", sqlParameters);

            return reader;
        }



        public DataSet QryNotificationDetails(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryNotificationDetails", sqlParameters);

            return dset;
        }

        public string QryNotificationDetailsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryNotificationDetails", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryNotificationDetailsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryNotificationDetails", sqlParameters);

            return reader;
        }



        public DataSet QryNotificationParagraphs(System.Int32? notification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryNotificationParagraphs", sqlParameters);

            return dset;
        }

        public string QryNotificationParagraphsAsTask(System.Int32? notification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryNotificationParagraphs", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryNotificationParagraphsAsReader(System.Int32? notification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryNotificationParagraphs", sqlParameters);

            return reader;
        }



        public DataSet QryNotifications(System.Int32? notification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryNotifications", sqlParameters);

            return dset;
        }

        public string QryNotificationsAsTask(System.Int32? notification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryNotifications", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryNotificationsAsReader(System.Int32? notification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryNotifications", sqlParameters);

            return reader;
        }



        public DataSet QryNotificationsPlaceHolders(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryNotificationsPlaceHolders", sqlParameters);

            return dset;
        }

        public string QryNotificationsPlaceHoldersAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryNotificationsPlaceHolders", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryNotificationsPlaceHoldersAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryNotificationsPlaceHolders", sqlParameters);

            return reader;
        }



        public DataSet QrynotificationStatus(System.Int32? sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QrynotificationStatus", sqlParameters);

            return dset;
        }

        public string QrynotificationStatusAsTask(System.Int32? sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QrynotificationStatus", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QrynotificationStatusAsReader(System.Int32? sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QrynotificationStatus", sqlParameters);

            return reader;
        }



        public DataSet QryNotificationTemplateParagraphs(System.Int16? template_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryNotificationTemplateParagraphs", sqlParameters);

            return dset;
        }

        public string QryNotificationTemplateParagraphsAsTask(System.Int16? template_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryNotificationTemplateParagraphs", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryNotificationTemplateParagraphsAsReader(System.Int16? template_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryNotificationTemplateParagraphs", sqlParameters);

            return reader;
        }



        public DataSet QryNotificationWrapper(System.Int32? sewadar_id,
                                                            System.Int32? notification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryNotificationWrapper", sqlParameters);

            return dset;
        }

        public string QryNotificationWrapperAsTask(System.Int32? sewadar_id,
                                                                System.Int32? notification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryNotificationWrapper", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryNotificationWrapperAsReader(System.Int32? sewadar_id,
                                                                            System.Int32? notification_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryNotificationWrapper", sqlParameters);

            return reader;
        }



        public DataSet QryNotificationWrappers(System.Int32? sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryNotificationWrappers", sqlParameters);

            return dset;
        }

        public string QryNotificationWrappersAsTask(System.Int32? sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryNotificationWrappers", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryNotificationWrappersAsReader(System.Int32? sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryNotificationWrappers", sqlParameters);

            return reader;
        }



        public DataSet QryNotInsuredReasons(System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryNotInsuredReasons", sqlParameters);

            return dset;
        }

        public string QryNotInsuredReasonsAsTask(System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryNotInsuredReasons", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryNotInsuredReasonsAsReader(System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryNotInsuredReasons", sqlParameters);

            return reader;
        }



        public DataSet QryPerson_Status(System.Int16? person_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPerson_Status", sqlParameters);

            return dset;
        }

        public string QryPerson_StatusAsTask(System.Int16? person_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPerson_Status", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPerson_StatusAsReader(System.Int16? person_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPerson_Status", sqlParameters);

            return reader;
        }



        public DataSet QryPerson_Status_Applicability(System.Int16? person_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPerson_Status_Applicability", sqlParameters);

            return dset;
        }

        public string QryPerson_Status_ApplicabilityAsTask(System.Int16? person_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPerson_Status_Applicability", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPerson_Status_ApplicabilityAsReader(System.Int16? person_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPerson_Status_Applicability", sqlParameters);

            return reader;
        }



        public DataSet QryPerson_Status_Reasons(System.Int16? person_status_id,
                                                            System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPerson_Status_Reasons", sqlParameters);

            return dset;
        }

        public string QryPerson_Status_ReasonsAsTask(System.Int16? person_status_id,
                                                                System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPerson_Status_Reasons", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPerson_Status_ReasonsAsReader(System.Int16? person_status_id,
                                                                            System.String ShowCurrent)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter ShowCurrent_Parameter = ObjDBManager.CreateSqlParameter("ShowCurrent", ShowCurrent, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(ShowCurrent_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPerson_Status_Reasons", sqlParameters);

            return reader;
        }



        public DataSet QryPersons_Complaints(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPersons_Complaints", sqlParameters);

            return dset;
        }

        public string QryPersons_ComplaintsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPersons_Complaints", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPersons_ComplaintsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPersons_Complaints", sqlParameters);

            return reader;
        }



        public DataSet QryPersons_confidential_remarks(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPersons_confidential_remarks", sqlParameters);

            return dset;
        }

        public string QryPersons_confidential_remarksAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPersons_confidential_remarks", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPersons_confidential_remarksAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPersons_confidential_remarks", sqlParameters);

            return reader;
        }



        public DataSet QryPersons_dependants(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPersons_dependants", sqlParameters);

            return dset;
        }

        public string QryPersons_dependantsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPersons_dependants", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPersons_dependantsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPersons_dependants", sqlParameters);

            return reader;
        }



        public DataSet QryPersons_dependants_HistoricalInformation(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPersons_dependants_HistoricalInformation", sqlParameters);

            return dset;
        }

        public string QryPersons_dependants_HistoricalInformationAsTask(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPersons_dependants_HistoricalInformation", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPersons_dependants_HistoricalInformationAsReader(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPersons_dependants_HistoricalInformation", sqlParameters);

            return reader;
        }



        public DataSet Qrypersons_donatable_organs_MedicalDetails(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Qrypersons_donatable_organs_MedicalDetails", sqlParameters);

            return dset;
        }

        public string Qrypersons_donatable_organs_MedicalDetailsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Qrypersons_donatable_organs_MedicalDetails", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader Qrypersons_donatable_organs_MedicalDetailsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("Qrypersons_donatable_organs_MedicalDetails", sqlParameters);

            return reader;
        }



        public DataSet QryPersons_insurances(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPersons_insurances", sqlParameters);

            return dset;
        }

        public string QryPersons_insurancesAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPersons_insurances", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPersons_insurancesAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPersons_insurances", sqlParameters);

            return reader;
        }



        public DataSet QryPersons_insurancesDetailHistory(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPersons_insurancesDetailHistory", sqlParameters);

            return dset;
        }

        public string QryPersons_insurancesDetailHistoryAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPersons_insurancesDetailHistory", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPersons_insurancesDetailHistoryAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPersons_insurancesDetailHistory", sqlParameters);

            return reader;
        }



        public DataSet QryPersons_insurancesHistory(System.Int32? person_id,
                                                                System.String screen_id,
                                                                System.String insurance_type)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            SqlParameter insurance_type_Parameter = ObjDBManager.CreateSqlParameter("insurance_type", insurance_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_type_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPersons_insurancesHistory", sqlParameters);

            return dset;
        }

        public string QryPersons_insurancesHistoryAsTask(System.Int32? person_id,
                                                                    System.String screen_id,
                                                                    System.String insurance_type)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            SqlParameter insurance_type_Parameter = ObjDBManager.CreateSqlParameter("insurance_type", insurance_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_type_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPersons_insurancesHistory", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPersons_insurancesHistoryAsReader(System.Int32? person_id,
                                                                                System.String screen_id,
                                                                                System.String insurance_type)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            SqlParameter insurance_type_Parameter = ObjDBManager.CreateSqlParameter("insurance_type", insurance_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_type_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPersons_insurancesHistory", sqlParameters);

            return reader;
        }



        public DataSet QryPersons_relatives_in_sewa(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPersons_relatives_in_sewa", sqlParameters);

            return dset;
        }

        public string QryPersons_relatives_in_sewaAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPersons_relatives_in_sewa", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPersons_relatives_in_sewaAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPersons_relatives_in_sewa", sqlParameters);

            return reader;
        }



        public DataSet QryPersonsConfidentialInf_GeneralRemarks(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPersonsConfidentialInf_GeneralRemarks", sqlParameters);

            return dset;
        }

        public string QryPersonsConfidentialInf_GeneralRemarksAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPersonsConfidentialInf_GeneralRemarks", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPersonsConfidentialInf_GeneralRemarksAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPersonsConfidentialInf_GeneralRemarks", sqlParameters);

            return reader;
        }



        public DataSet QryPersonsDependants(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPersonsDependants", sqlParameters);

            return dset;
        }

        public string QryPersonsDependantsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPersonsDependants", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPersonsDependantsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPersonsDependants", sqlParameters);

            return reader;
        }



        public DataSet QryPersonsDetailsWrapper(System.Int32? person_id,
                                                            System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPersonsDetailsWrapper", sqlParameters);

            return dset;
        }

        public string QryPersonsDetailsWrapperAsTask(System.Int32? person_id,
                                                                System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPersonsDetailsWrapper", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPersonsDetailsWrapperAsReader(System.Int32? person_id,
                                                                            System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPersonsDetailsWrapper", sqlParameters);

            return reader;
        }



        public DataSet QryPersonsDocuments(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPersonsDocuments", sqlParameters);

            return dset;
        }

        public string QryPersonsDocumentsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPersonsDocuments", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPersonsDocumentsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPersonsDocuments", sqlParameters);

            return reader;
        }



        public DataSet QryPersonsQualifications(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPersonsQualifications", sqlParameters);

            return dset;
        }

        public string QryPersonsQualificationsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPersonsQualifications", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPersonsQualificationsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPersonsQualifications", sqlParameters);

            return reader;
        }



        public DataSet QryPersonsRelations_StatusDetails(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPersonsRelations_StatusDetails", sqlParameters);

            return dset;
        }

        public string QryPersonsRelations_StatusDetailsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPersonsRelations_StatusDetails", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPersonsRelations_StatusDetailsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPersonsRelations_StatusDetails", sqlParameters);

            return reader;
        }



        public DataSet QryPersonsRelativesInSewa(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPersonsRelativesInSewa", sqlParameters);

            return dset;
        }

        public string QryPersonsRelativesInSewaAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPersonsRelativesInSewa", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPersonsRelativesInSewaAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPersonsRelativesInSewa", sqlParameters);

            return reader;
        }



        public DataSet QryPersonsSkills(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPersonsSkills", sqlParameters);

            return dset;
        }

        public string QryPersonsSkillsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPersonsSkills", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPersonsSkillsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPersonsSkills", sqlParameters);

            return reader;
        }



        public DataSet QryPersonstxnts(System.Int32? person_id,
                                                    System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPersonstxnts", sqlParameters);

            return dset;
        }

        public string QryPersonstxntsAsTask(System.Int32? person_id,
                                                        System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPersonstxnts", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPersonstxntsAsReader(System.Int32? person_id,
                                                                    System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPersonstxnts", sqlParameters);

            return reader;
        }



        public DataSet QryPersonsWorkStatus(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPersonsWorkStatus", sqlParameters);

            return dset;
        }

        public string QryPersonsWorkStatusAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPersonsWorkStatus", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPersonsWorkStatusAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPersonsWorkStatus", sqlParameters);

            return reader;
        }



        public DataSet QryPlaceHolderEdit()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPlaceHolderEdit", sqlParameters);
            return dset;
        }

        public string QryPlaceHolderEditAsTask()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            string taskString = ObjDBManager.GetPrintableSQLString("QryPlaceHolderEdit", sqlParameters);
            return taskString;
        }

        public DCCSqlDataReader QryPlaceHolderEditAsReader()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPlaceHolderEdit", sqlParameters);
            return reader;
        }



        public DataSet QryPreviousSewaDetails(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryPreviousSewaDetails", sqlParameters);

            return dset;
        }

        public string QryPreviousSewaDetailsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryPreviousSewaDetails", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryPreviousSewaDetailsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryPreviousSewaDetails", sqlParameters);

            return reader;
        }



        public DataSet QryReferencePlaceHoldres(System.Int32? sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryReferencePlaceHoldres", sqlParameters);

            return dset;
        }

        public string QryReferencePlaceHoldresAsTask(System.Int32? sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryReferencePlaceHoldres", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryReferencePlaceHoldresAsReader(System.Int32? sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryReferencePlaceHoldres", sqlParameters);

            return reader;
        }



        public DataSet QryResidentDptStatusInformation_adt_persons_dependants(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryResidentDptStatusInformation_adt_persons_dependants", sqlParameters);

            return dset;
        }

        public string QryResidentDptStatusInformation_adt_persons_dependantsAsTask(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryResidentDptStatusInformation_adt_persons_dependants", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryResidentDptStatusInformation_adt_persons_dependantsAsReader(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryResidentDptStatusInformation_adt_persons_dependants", sqlParameters);

            return reader;
        }



        public DataSet QryResidentOrVisitorInformation_adt_persons(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryResidentOrVisitorInformation_adt_persons", sqlParameters);

            return dset;
        }

        public string QryResidentOrVisitorInformation_adt_personsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryResidentOrVisitorInformation_adt_persons", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryResidentOrVisitorInformation_adt_personsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryResidentOrVisitorInformation_adt_persons", sqlParameters);

            return reader;
        }



        public DataSet QryResidentOrVisitorStatusInformation_adt_persons(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryResidentOrVisitorStatusInformation_adt_persons", sqlParameters);

            return dset;
        }

        public string QryResidentOrVisitorStatusInformation_adt_personsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryResidentOrVisitorStatusInformation_adt_persons", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryResidentOrVisitorStatusInformation_adt_personsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryResidentOrVisitorStatusInformation_adt_persons", sqlParameters);

            return reader;
        }



        public DataSet QryResidentsOrVisitorDetailsWrapper(System.Int32? person_id,
                                                                        System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryResidentsOrVisitorDetailsWrapper", sqlParameters);

            return dset;
        }

        public string QryResidentsOrVisitorDetailsWrapperAsTask(System.Int32? person_id,
                                                                            System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryResidentsOrVisitorDetailsWrapper", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryResidentsOrVisitorDetailsWrapperAsReader(System.Int32? person_id,
                                                                                        System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryResidentsOrVisitorDetailsWrapper", sqlParameters);

            return reader;
        }



        public DataSet QryResidentsOrVisitorKinRelation_Status(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryResidentsOrVisitorKinRelation_Status", sqlParameters);

            return dset;
        }

        public string QryResidentsOrVisitorKinRelation_StatusAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryResidentsOrVisitorKinRelation_Status", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryResidentsOrVisitorKinRelation_StatusAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryResidentsOrVisitorKinRelation_Status", sqlParameters);

            return reader;
        }



        public DataSet QryResidentsORVisitors_relatives_in_sewa(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryResidentsORVisitors_relatives_in_sewa", sqlParameters);

            return dset;
        }

        public string QryResidentsORVisitors_relatives_in_sewaAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryResidentsORVisitors_relatives_in_sewa", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryResidentsORVisitors_relatives_in_sewaAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryResidentsORVisitors_relatives_in_sewa", sqlParameters);

            return reader;
        }



        public DataSet QryResidentsORVisitorsDocuments(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryResidentsORVisitorsDocuments", sqlParameters);

            return dset;
        }

        public string QryResidentsORVisitorsDocumentsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryResidentsORVisitorsDocuments", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryResidentsORVisitorsDocumentsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryResidentsORVisitorsDocuments", sqlParameters);

            return reader;
        }



        public DataSet QryResidentsORVisitorsQualifications(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryResidentsORVisitorsQualifications", sqlParameters);

            return dset;
        }

        public string QryResidentsORVisitorsQualificationsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryResidentsORVisitorsQualifications", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryResidentsORVisitorsQualificationsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryResidentsORVisitorsQualifications", sqlParameters);

            return reader;
        }



        public DataSet QryResidentsORVisitorsSkills(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryResidentsORVisitorsSkills", sqlParameters);

            return dset;
        }

        public string QryResidentsORVisitorsSkillsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryResidentsORVisitorsSkills", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryResidentsORVisitorsSkillsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryResidentsORVisitorsSkills", sqlParameters);

            return reader;
        }



        public DataSet QrySecretaryInitials()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DataSet dset = ObjDBManager.ExecuteStoredProc("QrySecretaryInitials", sqlParameters);
            return dset;
        }

        public string QrySecretaryInitialsAsTask()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            string taskString = ObjDBManager.GetPrintableSQLString("QrySecretaryInitials", sqlParameters);
            return taskString;
        }

        public DCCSqlDataReader QrySecretaryInitialsAsReader()
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QrySecretaryInitials", sqlParameters);
            return reader;
        }



        public DataSet QrySectionEdit(System.Int32? sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QrySectionEdit", sqlParameters);

            return dset;
        }

        public string QrySectionEditAsTask(System.Int32? sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QrySectionEdit", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QrySectionEditAsReader(System.Int32? sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QrySectionEdit", sqlParameters);

            return reader;
        }



        public DataSet QrySecurityClearance(System.Int32? person_id,
                                                        System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QrySecurityClearance", sqlParameters);

            return dset;
        }

        public string QrySecurityClearanceAsTask(System.Int32? person_id,
                                                            System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QrySecurityClearance", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QrySecurityClearanceAsReader(System.Int32? person_id,
                                                                        System.String screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter screen_id_Parameter = ObjDBManager.CreateSqlParameter("screen_id", screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(screen_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QrySecurityClearance", sqlParameters);

            return reader;
        }



        public DataSet QrySecurityClearancSponsor(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QrySecurityClearancSponsor", sqlParameters);

            return dset;
        }

        public string QrySecurityClearancSponsorAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QrySecurityClearancSponsor", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QrySecurityClearancSponsorAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QrySecurityClearancSponsor", sqlParameters);

            return reader;
        }



        public DataSet QrySewadarContractsDetails(System.Int32? in_sewadar_id,
                                                                System.Int16? in_contract_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_id", in_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_id_Parameter);
            SqlParameter in_contract_id_Parameter = ObjDBManager.CreateSqlParameter("in_contract_id", in_contract_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_contract_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QrySewadarContractsDetails", sqlParameters);

            return dset;
        }

        public string QrySewadarContractsDetailsAsTask(System.Int32? in_sewadar_id,
                                                                    System.Int16? in_contract_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_id", in_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_id_Parameter);
            SqlParameter in_contract_id_Parameter = ObjDBManager.CreateSqlParameter("in_contract_id", in_contract_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_contract_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QrySewadarContractsDetails", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QrySewadarContractsDetailsAsReader(System.Int32? in_sewadar_id,
                                                                                System.Int16? in_contract_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_id", in_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_id_Parameter);
            SqlParameter in_contract_id_Parameter = ObjDBManager.CreateSqlParameter("in_contract_id", in_contract_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_contract_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QrySewadarContractsDetails", sqlParameters);

            return reader;
        }



        public DataSet QrySewadarContractsSummary(System.Int32? in_sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_id", in_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QrySewadarContractsSummary", sqlParameters);

            return dset;
        }

        public string QrySewadarContractsSummaryAsTask(System.Int32? in_sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_id", in_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QrySewadarContractsSummary", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QrySewadarContractsSummaryAsReader(System.Int32? in_sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_id", in_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QrySewadarContractsSummary", sqlParameters);

            return reader;
        }



        public DataSet QrySewadarContractsWrapper(System.Int32? in_sewadar_id,
                                                                System.String in_screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_id", in_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_id_Parameter);
            SqlParameter in_screen_id_Parameter = ObjDBManager.CreateSqlParameter("in_screen_id", in_screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(in_screen_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QrySewadarContractsWrapper", sqlParameters);

            return dset;
        }

        public string QrySewadarContractsWrapperAsTask(System.Int32? in_sewadar_id,
                                                                    System.String in_screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_id", in_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_id_Parameter);
            SqlParameter in_screen_id_Parameter = ObjDBManager.CreateSqlParameter("in_screen_id", in_screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(in_screen_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QrySewadarContractsWrapper", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QrySewadarContractsWrapperAsReader(System.Int32? in_sewadar_id,
                                                                                System.String in_screen_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_id", in_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_id_Parameter);
            SqlParameter in_screen_id_Parameter = ObjDBManager.CreateSqlParameter("in_screen_id", in_screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(in_screen_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QrySewadarContractsWrapper", sqlParameters);

            return reader;
        }



        public DataSet QrySewadarDetails(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QrySewadarDetails", sqlParameters);

            return dset;
        }

        public string QrySewadarDetailsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QrySewadarDetails", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QrySewadarDetailsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QrySewadarDetails", sqlParameters);

            return reader;
        }



        public DataSet QrySewadarDptStatusInformation_adt_persons_dependants(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QrySewadarDptStatusInformation_adt_persons_dependants", sqlParameters);

            return dset;
        }

        public string QrySewadarDptStatusInformation_adt_persons_dependantsAsTask(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QrySewadarDptStatusInformation_adt_persons_dependants", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QrySewadarDptStatusInformation_adt_persons_dependantsAsReader(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QrySewadarDptStatusInformation_adt_persons_dependants", sqlParameters);

            return reader;
        }



        public DataSet QrySewadarOfficialInformation_adt_sewadars(System.Int32? sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QrySewadarOfficialInformation_adt_sewadars", sqlParameters);

            return dset;
        }

        public string QrySewadarOfficialInformation_adt_sewadarsAsTask(System.Int32? sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QrySewadarOfficialInformation_adt_sewadars", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QrySewadarOfficialInformation_adt_sewadarsAsReader(System.Int32? sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QrySewadarOfficialInformation_adt_sewadars", sqlParameters);

            return reader;
        }



        public DataSet QrySewadarTypes(System.String in_sewadartype_nm)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadartype_nm_Parameter = ObjDBManager.CreateSqlParameter("in_sewadartype_nm", in_sewadartype_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadartype_nm_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QrySewadarTypes", sqlParameters);

            return dset;
        }

        public string QrySewadarTypesAsTask(System.String in_sewadartype_nm)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadartype_nm_Parameter = ObjDBManager.CreateSqlParameter("in_sewadartype_nm", in_sewadartype_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadartype_nm_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QrySewadarTypes", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QrySewadarTypesAsReader(System.String in_sewadartype_nm)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadartype_nm_Parameter = ObjDBManager.CreateSqlParameter("in_sewadartype_nm", in_sewadartype_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadartype_nm_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QrySewadarTypes", sqlParameters);

            return reader;
        }



        public DataSet QryStatusNotification(System.Int16? person_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryStatusNotification", sqlParameters);

            return dset;
        }

        public string QryStatusNotificationAsTask(System.Int16? person_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryStatusNotification", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryStatusNotificationAsReader(System.Int16? person_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryStatusNotification", sqlParameters);

            return reader;
        }



        public DataSet QryStatusReasonsNotification(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryStatusReasonsNotification", sqlParameters);

            return dset;
        }

        public string QryStatusReasonsNotificationAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryStatusReasonsNotification", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryStatusReasonsNotificationAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryStatusReasonsNotification", sqlParameters);

            return reader;
        }



        public DataSet QryStatusWiseListOfHousingUnits(System.Int32? housing_location_id,
                                                                    System.Int16? housing_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("housing_location_id", housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_location_id_Parameter);
            SqlParameter housing_status_id_Parameter = ObjDBManager.CreateSqlParameter("housing_status_id", housing_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(housing_status_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryStatusWiseListOfHousingUnits", sqlParameters);

            return dset;
        }

        public string QryStatusWiseListOfHousingUnitsAsTask(System.Int32? housing_location_id,
                                                                        System.Int16? housing_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("housing_location_id", housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_location_id_Parameter);
            SqlParameter housing_status_id_Parameter = ObjDBManager.CreateSqlParameter("housing_status_id", housing_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(housing_status_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryStatusWiseListOfHousingUnits", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryStatusWiseListOfHousingUnitsAsReader(System.Int32? housing_location_id,
                                                                                    System.Int16? housing_status_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("housing_location_id", housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(housing_location_id_Parameter);
            SqlParameter housing_status_id_Parameter = ObjDBManager.CreateSqlParameter("housing_status_id", housing_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(housing_status_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryStatusWiseListOfHousingUnits", sqlParameters);

            return reader;
        }



        public DataSet QryVisitorDptStatusInformation_adt_persons_dependants(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryVisitorDptStatusInformation_adt_persons_dependants", sqlParameters);

            return dset;
        }

        public string QryVisitorDptStatusInformation_adt_persons_dependantsAsTask(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryVisitorDptStatusInformation_adt_persons_dependants", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryVisitorDptStatusInformation_adt_persons_dependantsAsReader(System.Int32? dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryVisitorDptStatusInformation_adt_persons_dependants", sqlParameters);

            return reader;
        }



        public DataSet QryWorkExperienceDetails(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("QryWorkExperienceDetails", sqlParameters);

            return dset;
        }

        public string QryWorkExperienceDetailsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("QryWorkExperienceDetails", sqlParameters);

            return taskString;
        }

        public DCCSqlDataReader QryWorkExperienceDetailsAsReader(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DCCSqlDataReader reader = ObjDBManager.ExecuteReader("QryWorkExperienceDetails", sqlParameters);

            return reader;
        }



        public DataSet RMSAuditLogOperation(System.Int32? p_session_id,
                                                        System.String p_application_id,
                                                        System.Int32? p_user_no,
                                                        System.String p_user_role_id,
                                                        System.String p_operation,
                                                        System.String p_screen_id,
                                                        System.String p_object_id,
                                                        System.Int32? p_person_id,
                                                        System.Int32? p_sewadar_id,
                                                        System.Int32? p_dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_session_id_Parameter = ObjDBManager.CreateSqlParameter("p_session_id", p_session_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_session_id_Parameter);
            SqlParameter p_application_id_Parameter = ObjDBManager.CreateSqlParameter("p_application_id", p_application_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(p_application_id_Parameter);
            SqlParameter p_user_no_Parameter = ObjDBManager.CreateSqlParameter("p_user_no", p_user_no, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_user_no_Parameter);
            SqlParameter p_user_role_id_Parameter = ObjDBManager.CreateSqlParameter("p_user_role_id", p_user_role_id, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_user_role_id_Parameter);
            SqlParameter p_operation_Parameter = ObjDBManager.CreateSqlParameter("p_operation", p_operation, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(p_operation_Parameter);
            SqlParameter p_screen_id_Parameter = ObjDBManager.CreateSqlParameter("p_screen_id", p_screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(p_screen_id_Parameter);
            SqlParameter p_object_id_Parameter = ObjDBManager.CreateSqlParameter("p_object_id", p_object_id, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_object_id_Parameter);
            SqlParameter p_person_id_Parameter = ObjDBManager.CreateSqlParameter("p_person_id", p_person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_person_id_Parameter);
            SqlParameter p_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("p_sewadar_id", p_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_sewadar_id_Parameter);
            SqlParameter p_dependant_id_Parameter = ObjDBManager.CreateSqlParameter("p_dependant_id", p_dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_dependant_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("RMSAuditLogOperation", sqlParameters);

            return dset;
        }

        public string RMSAuditLogOperationAsTask(System.Int32? p_session_id,
                                                            System.String p_application_id,
                                                            System.Int32? p_user_no,
                                                            System.String p_user_role_id,
                                                            System.String p_operation,
                                                            System.String p_screen_id,
                                                            System.String p_object_id,
                                                            System.Int32? p_person_id,
                                                            System.Int32? p_sewadar_id,
                                                            System.Int32? p_dependant_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_session_id_Parameter = ObjDBManager.CreateSqlParameter("p_session_id", p_session_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_session_id_Parameter);
            SqlParameter p_application_id_Parameter = ObjDBManager.CreateSqlParameter("p_application_id", p_application_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(p_application_id_Parameter);
            SqlParameter p_user_no_Parameter = ObjDBManager.CreateSqlParameter("p_user_no", p_user_no, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_user_no_Parameter);
            SqlParameter p_user_role_id_Parameter = ObjDBManager.CreateSqlParameter("p_user_role_id", p_user_role_id, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_user_role_id_Parameter);
            SqlParameter p_operation_Parameter = ObjDBManager.CreateSqlParameter("p_operation", p_operation, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(p_operation_Parameter);
            SqlParameter p_screen_id_Parameter = ObjDBManager.CreateSqlParameter("p_screen_id", p_screen_id, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(p_screen_id_Parameter);
            SqlParameter p_object_id_Parameter = ObjDBManager.CreateSqlParameter("p_object_id", p_object_id, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(p_object_id_Parameter);
            SqlParameter p_person_id_Parameter = ObjDBManager.CreateSqlParameter("p_person_id", p_person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_person_id_Parameter);
            SqlParameter p_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("p_sewadar_id", p_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_sewadar_id_Parameter);
            SqlParameter p_dependant_id_Parameter = ObjDBManager.CreateSqlParameter("p_dependant_id", p_dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_dependant_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("RMSAuditLogOperation", sqlParameters);

            return taskString;
        }



        public DataSet SWD_51(System.Int32? Age_of_Retirement,
                                            System.DateTime? Start_Date,
                                            System.DateTime? End_Date,
                                            System.String insurance_criteria_XML)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter Age_of_Retirement_Parameter = ObjDBManager.CreateSqlParameter("Age_of_Retirement", Age_of_Retirement, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(Age_of_Retirement_Parameter);
            SqlParameter Start_Date_Parameter = ObjDBManager.CreateSqlParameter("Start_Date", Start_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(Start_Date_Parameter);
            SqlParameter End_Date_Parameter = ObjDBManager.CreateSqlParameter("End_Date", End_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(End_Date_Parameter);
            SqlParameter insurance_criteria_XML_Parameter = ObjDBManager.CreateSqlParameter("insurance_criteria_XML", insurance_criteria_XML, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_criteria_XML_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("SWD_51", sqlParameters);

            return dset;
        }

        public string SWD_51AsTask(System.Int32? Age_of_Retirement,
                                                System.DateTime? Start_Date,
                                                System.DateTime? End_Date,
                                                System.String insurance_criteria_XML)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter Age_of_Retirement_Parameter = ObjDBManager.CreateSqlParameter("Age_of_Retirement", Age_of_Retirement, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(Age_of_Retirement_Parameter);
            SqlParameter Start_Date_Parameter = ObjDBManager.CreateSqlParameter("Start_Date", Start_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(Start_Date_Parameter);
            SqlParameter End_Date_Parameter = ObjDBManager.CreateSqlParameter("End_Date", End_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(End_Date_Parameter);
            SqlParameter insurance_criteria_XML_Parameter = ObjDBManager.CreateSqlParameter("insurance_criteria_XML", insurance_criteria_XML, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_criteria_XML_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("SWD_51", sqlParameters);

            return taskString;
        }



        public DataSet SWD_52_1(System.String insurance_type_XML,
                                            System.DateTime? from_date,
                                            System.DateTime? to_date,
                                            System.String department_ids_XML)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter insurance_type_XML_Parameter = ObjDBManager.CreateSqlParameter("insurance_type_XML", insurance_type_XML, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_type_XML_Parameter);
            SqlParameter from_date_Parameter = ObjDBManager.CreateSqlParameter("from_date", from_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_date_Parameter);
            SqlParameter to_date_Parameter = ObjDBManager.CreateSqlParameter("to_date", to_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_date_Parameter);
            SqlParameter department_ids_XML_Parameter = ObjDBManager.CreateSqlParameter("department_ids_XML", department_ids_XML, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(department_ids_XML_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("SWD_52_1", sqlParameters);

            return dset;
        }

        public string SWD_52_1AsTask(System.String insurance_type_XML,
                                                System.DateTime? from_date,
                                                System.DateTime? to_date,
                                                System.String department_ids_XML)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter insurance_type_XML_Parameter = ObjDBManager.CreateSqlParameter("insurance_type_XML", insurance_type_XML, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_type_XML_Parameter);
            SqlParameter from_date_Parameter = ObjDBManager.CreateSqlParameter("from_date", from_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_date_Parameter);
            SqlParameter to_date_Parameter = ObjDBManager.CreateSqlParameter("to_date", to_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_date_Parameter);
            SqlParameter department_ids_XML_Parameter = ObjDBManager.CreateSqlParameter("department_ids_XML", department_ids_XML, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(department_ids_XML_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("SWD_52_1", sqlParameters);

            return taskString;
        }



        public DataSet SWD_52_2(System.String insurance_type_XML,
                                            System.DateTime? from_date,
                                            System.DateTime? to_date,
                                            System.String department_ids_XML)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter insurance_type_XML_Parameter = ObjDBManager.CreateSqlParameter("insurance_type_XML", insurance_type_XML, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_type_XML_Parameter);
            SqlParameter from_date_Parameter = ObjDBManager.CreateSqlParameter("from_date", from_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_date_Parameter);
            SqlParameter to_date_Parameter = ObjDBManager.CreateSqlParameter("to_date", to_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_date_Parameter);
            SqlParameter department_ids_XML_Parameter = ObjDBManager.CreateSqlParameter("department_ids_XML", department_ids_XML, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(department_ids_XML_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("SWD_52_2", sqlParameters);

            return dset;
        }

        public string SWD_52_2AsTask(System.String insurance_type_XML,
                                                System.DateTime? from_date,
                                                System.DateTime? to_date,
                                                System.String department_ids_XML)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter insurance_type_XML_Parameter = ObjDBManager.CreateSqlParameter("insurance_type_XML", insurance_type_XML, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_type_XML_Parameter);
            SqlParameter from_date_Parameter = ObjDBManager.CreateSqlParameter("from_date", from_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_date_Parameter);
            SqlParameter to_date_Parameter = ObjDBManager.CreateSqlParameter("to_date", to_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_date_Parameter);
            SqlParameter department_ids_XML_Parameter = ObjDBManager.CreateSqlParameter("department_ids_XML", department_ids_XML, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(department_ids_XML_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("SWD_52_2", sqlParameters);

            return taskString;
        }



        public DataSet SWD_52_3(System.String insurance_type_XML,
                                            System.DateTime? from_date,
                                            System.DateTime? to_date,
                                            System.String department_ids_XML)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter insurance_type_XML_Parameter = ObjDBManager.CreateSqlParameter("insurance_type_XML", insurance_type_XML, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_type_XML_Parameter);
            SqlParameter from_date_Parameter = ObjDBManager.CreateSqlParameter("from_date", from_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_date_Parameter);
            SqlParameter to_date_Parameter = ObjDBManager.CreateSqlParameter("to_date", to_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_date_Parameter);
            SqlParameter department_ids_XML_Parameter = ObjDBManager.CreateSqlParameter("department_ids_XML", department_ids_XML, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(department_ids_XML_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("SWD_52_3", sqlParameters);

            return dset;
        }

        public string SWD_52_3AsTask(System.String insurance_type_XML,
                                                System.DateTime? from_date,
                                                System.DateTime? to_date,
                                                System.String department_ids_XML)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter insurance_type_XML_Parameter = ObjDBManager.CreateSqlParameter("insurance_type_XML", insurance_type_XML, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_type_XML_Parameter);
            SqlParameter from_date_Parameter = ObjDBManager.CreateSqlParameter("from_date", from_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_date_Parameter);
            SqlParameter to_date_Parameter = ObjDBManager.CreateSqlParameter("to_date", to_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_date_Parameter);
            SqlParameter department_ids_XML_Parameter = ObjDBManager.CreateSqlParameter("department_ids_XML", department_ids_XML, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(department_ids_XML_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("SWD_52_3", sqlParameters);

            return taskString;
        }



        public DataSet SWD_52_4(System.String insurance_type_XML,
                                            System.DateTime? from_date,
                                            System.DateTime? to_date,
                                            System.String department_ids_XML)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter insurance_type_XML_Parameter = ObjDBManager.CreateSqlParameter("insurance_type_XML", insurance_type_XML, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_type_XML_Parameter);
            SqlParameter from_date_Parameter = ObjDBManager.CreateSqlParameter("from_date", from_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_date_Parameter);
            SqlParameter to_date_Parameter = ObjDBManager.CreateSqlParameter("to_date", to_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_date_Parameter);
            SqlParameter department_ids_XML_Parameter = ObjDBManager.CreateSqlParameter("department_ids_XML", department_ids_XML, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(department_ids_XML_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("SWD_52_4", sqlParameters);

            return dset;
        }

        public string SWD_52_4AsTask(System.String insurance_type_XML,
                                                System.DateTime? from_date,
                                                System.DateTime? to_date,
                                                System.String department_ids_XML)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter insurance_type_XML_Parameter = ObjDBManager.CreateSqlParameter("insurance_type_XML", insurance_type_XML, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_type_XML_Parameter);
            SqlParameter from_date_Parameter = ObjDBManager.CreateSqlParameter("from_date", from_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_date_Parameter);
            SqlParameter to_date_Parameter = ObjDBManager.CreateSqlParameter("to_date", to_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_date_Parameter);
            SqlParameter department_ids_XML_Parameter = ObjDBManager.CreateSqlParameter("department_ids_XML", department_ids_XML, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(department_ids_XML_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("SWD_52_4", sqlParameters);

            return taskString;
        }



        public DataSet SWD_53(System.String in_sewadar_ids_xml,
                                            System.DateTime? from_date,
                                            System.DateTime? to_date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadar_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_ids_xml", in_sewadar_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_ids_xml_Parameter);
            SqlParameter from_date_Parameter = ObjDBManager.CreateSqlParameter("from_date", from_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_date_Parameter);
            SqlParameter to_date_Parameter = ObjDBManager.CreateSqlParameter("to_date", to_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_date_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("SWD_53", sqlParameters);

            return dset;
        }

        public string SWD_53AsTask(System.String in_sewadar_ids_xml,
                                                System.DateTime? from_date,
                                                System.DateTime? to_date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_sewadar_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_ids_xml", in_sewadar_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_ids_xml_Parameter);
            SqlParameter from_date_Parameter = ObjDBManager.CreateSqlParameter("from_date", from_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_date_Parameter);
            SqlParameter to_date_Parameter = ObjDBManager.CreateSqlParameter("to_date", to_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_date_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("SWD_53", sqlParameters);

            return taskString;
        }



        public DataSet SWD_55(System.String departments_ids_xml,
                                            System.String in_sewadar_ids_xml,
                                            System.String in_sewadar_type_ids_xml,
                                            System.String in_status_id_xml,
                                            System.String is_active)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter in_sewadar_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_ids_xml", in_sewadar_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_ids_xml_Parameter);
            SqlParameter in_sewadar_type_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_type_ids_xml", in_sewadar_type_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_type_ids_xml_Parameter);
            SqlParameter in_status_id_xml_Parameter = ObjDBManager.CreateSqlParameter("in_status_id_xml", in_status_id_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_status_id_xml_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("SWD_55", sqlParameters);

            return dset;
        }

        public string SWD_55AsTask(System.String departments_ids_xml,
                                                System.String in_sewadar_ids_xml,
                                                System.String in_sewadar_type_ids_xml,
                                                System.String in_status_id_xml,
                                                System.String is_active)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter in_sewadar_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_ids_xml", in_sewadar_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_ids_xml_Parameter);
            SqlParameter in_sewadar_type_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_type_ids_xml", in_sewadar_type_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_type_ids_xml_Parameter);
            SqlParameter in_status_id_xml_Parameter = ObjDBManager.CreateSqlParameter("in_status_id_xml", in_status_id_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_status_id_xml_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("SWD_55", sqlParameters);

            return taskString;
        }



        public DataSet SWD_56(System.DateTime? from_date,
                                            System.DateTime? to_date,
                                            System.String departments_ids_xml,
                                            System.String is_active,
                                            System.Int16? person_status_id,
                                            System.String sewadars_ids_xml)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter from_date_Parameter = ObjDBManager.CreateSqlParameter("from_date", from_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_date_Parameter);
            SqlParameter to_date_Parameter = ObjDBManager.CreateSqlParameter("to_date", to_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_date_Parameter);
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter sewadars_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadars_ids_xml", sewadars_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadars_ids_xml_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("SWD_56", sqlParameters);

            return dset;
        }

        public string SWD_56AsTask(System.DateTime? from_date,
                                                System.DateTime? to_date,
                                                System.String departments_ids_xml,
                                                System.String is_active,
                                                System.Int16? person_status_id,
                                                System.String sewadars_ids_xml)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter from_date_Parameter = ObjDBManager.CreateSqlParameter("from_date", from_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_date_Parameter);
            SqlParameter to_date_Parameter = ObjDBManager.CreateSqlParameter("to_date", to_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_date_Parameter);
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter sewadars_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadars_ids_xml", sewadars_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadars_ids_xml_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("SWD_56", sqlParameters);

            return taskString;
        }



        public DataSet SWD_57(System.DateTime? as_on_date,
                                            System.String departments_ids_xml,
                                            System.String sewadar_status_ids_xml,
                                            System.String sewadar_types_ids_xml,
                                            System.Int32? age_range,
                                            System.String is_active,
                                            System.Int32? Show_Residents)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter as_on_date_Parameter = ObjDBManager.CreateSqlParameter("as_on_date", as_on_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(as_on_date_Parameter);
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter sewadar_status_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadar_status_ids_xml", sewadar_status_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadar_status_ids_xml_Parameter);
            SqlParameter sewadar_types_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadar_types_ids_xml", sewadar_types_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadar_types_ids_xml_Parameter);
            SqlParameter age_range_Parameter = ObjDBManager.CreateSqlParameter("age_range", age_range, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(age_range_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            SqlParameter Show_Residents_Parameter = ObjDBManager.CreateSqlParameter("Show_Residents", Show_Residents, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(Show_Residents_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("SWD_57", sqlParameters);

            return dset;
        }

        public string SWD_57AsTask(System.DateTime? as_on_date,
                                                System.String departments_ids_xml,
                                                System.String sewadar_status_ids_xml,
                                                System.String sewadar_types_ids_xml,
                                                System.Int32? age_range,
                                                System.String is_active,
                                                System.Int32? Show_Residents)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter as_on_date_Parameter = ObjDBManager.CreateSqlParameter("as_on_date", as_on_date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(as_on_date_Parameter);
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter sewadar_status_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadar_status_ids_xml", sewadar_status_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadar_status_ids_xml_Parameter);
            SqlParameter sewadar_types_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("sewadar_types_ids_xml", sewadar_types_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(sewadar_types_ids_xml_Parameter);
            SqlParameter age_range_Parameter = ObjDBManager.CreateSqlParameter("age_range", age_range, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(age_range_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            SqlParameter Show_Residents_Parameter = ObjDBManager.CreateSqlParameter("Show_Residents", Show_Residents, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(Show_Residents_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("SWD_57", sqlParameters);

            return taskString;
        }



        public DataSet SWD_58(System.String departments_ids_xml,
                                            System.String in_sewadar_type_ids_xml,
                                            System.String in_status_id_xml,
                                            System.String is_active)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter in_sewadar_type_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_type_ids_xml", in_sewadar_type_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_type_ids_xml_Parameter);
            SqlParameter in_status_id_xml_Parameter = ObjDBManager.CreateSqlParameter("in_status_id_xml", in_status_id_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_status_id_xml_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("SWD_58", sqlParameters);

            return dset;
        }

        public string SWD_58AsTask(System.String departments_ids_xml,
                                                System.String in_sewadar_type_ids_xml,
                                                System.String in_status_id_xml,
                                                System.String is_active)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter departments_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("departments_ids_xml", departments_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(departments_ids_xml_Parameter);
            SqlParameter in_sewadar_type_ids_xml_Parameter = ObjDBManager.CreateSqlParameter("in_sewadar_type_ids_xml", in_sewadar_type_ids_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_sewadar_type_ids_xml_Parameter);
            SqlParameter in_status_id_xml_Parameter = ObjDBManager.CreateSqlParameter("in_status_id_xml", in_status_id_xml, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_status_id_xml_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("SWD_58", sqlParameters);

            return taskString;
        }



        public DataSet SWD_RPT_06_Contract_Expiring_Details(System.DateTime? From_Date,
                                                                        System.DateTime? To_Date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter From_Date_Parameter = ObjDBManager.CreateSqlParameter("From_Date", From_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(From_Date_Parameter);
            SqlParameter To_Date_Parameter = ObjDBManager.CreateSqlParameter("To_Date", To_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(To_Date_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("SWD_RPT_06_Contract_Expiring_Details", sqlParameters);

            return dset;
        }

        public string SWD_RPT_06_Contract_Expiring_DetailsAsTask(System.DateTime? From_Date,
                                                                            System.DateTime? To_Date)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter From_Date_Parameter = ObjDBManager.CreateSqlParameter("From_Date", From_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(From_Date_Parameter);
            SqlParameter To_Date_Parameter = ObjDBManager.CreateSqlParameter("To_Date", To_Date, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(To_Date_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("SWD_RPT_06_Contract_Expiring_Details", sqlParameters);

            return taskString;
        }



        public DataSet UpdaddresseesAndaddressee_place_holders(System.Int32? addressee_id,
                                                                            System.Int16? addressee_sq)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter addressee_id_Parameter = ObjDBManager.CreateSqlParameter("addressee_id", addressee_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(addressee_id_Parameter);
            SqlParameter addressee_sq_Parameter = ObjDBManager.CreateSqlParameter("addressee_sq", addressee_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(addressee_sq_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdaddresseesAndaddressee_place_holders", sqlParameters);

            return dset;
        }

        public string UpdaddresseesAndaddressee_place_holdersAsTask(System.Int32? addressee_id,
                                                                                System.Int16? addressee_sq)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter addressee_id_Parameter = ObjDBManager.CreateSqlParameter("addressee_id", addressee_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(addressee_id_Parameter);
            SqlParameter addressee_sq_Parameter = ObjDBManager.CreateSqlParameter("addressee_sq", addressee_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(addressee_sq_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdaddresseesAndaddressee_place_holders", sqlParameters);

            return taskString;
        }



        public DataSet UpdAfterNotification(System.Int32? person_id,
                                                        System.Int16? working_unit_id,
                                                        System.Int16? designation_id,
                                                        System.Byte? sewadar_type_id,
                                                        System.Int16? grade_id,
                                                        System.Int16? status_id,
                                                        System.DateTime? status_dt,
                                                        System.Int32? status_reason_id,
                                                        System.DateTime? notification_dt,
                                                        System.Int32? notification_id,
                                                        System.Byte? sewadar_type_indicator,
                                                        System.DateTime? effective_dt,
                                                        System.Int16? template_id,
                                                        System.String notification_subject,
                                                        System.String notification_remarks,
                                                        System.String notification_status_cd,
                                                        System.DateTime? notification_status_dt,
                                                        System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter working_unit_id_Parameter = ObjDBManager.CreateSqlParameter("working_unit_id", working_unit_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(working_unit_id_Parameter);
            SqlParameter designation_id_Parameter = ObjDBManager.CreateSqlParameter("designation_id", designation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(designation_id_Parameter);
            SqlParameter sewadar_type_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_type_id", sewadar_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(sewadar_type_id_Parameter);
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(grade_id_Parameter);
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            SqlParameter status_dt_Parameter = ObjDBManager.CreateSqlParameter("status_dt", status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(status_dt_Parameter);
            SqlParameter status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("status_reason_id", status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(status_reason_id_Parameter);
            SqlParameter notification_dt_Parameter = ObjDBManager.CreateSqlParameter("notification_dt", notification_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(notification_dt_Parameter);
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            SqlParameter sewadar_type_indicator_Parameter = ObjDBManager.CreateSqlParameter("sewadar_type_indicator", sewadar_type_indicator, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(sewadar_type_indicator_Parameter);
            SqlParameter effective_dt_Parameter = ObjDBManager.CreateSqlParameter("effective_dt", effective_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_dt_Parameter);
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter notification_subject_Parameter = ObjDBManager.CreateSqlParameter("notification_subject", notification_subject, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_subject_Parameter);
            SqlParameter notification_remarks_Parameter = ObjDBManager.CreateSqlParameter("notification_remarks", notification_remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_remarks_Parameter);
            SqlParameter notification_status_cd_Parameter = ObjDBManager.CreateSqlParameter("notification_status_cd", notification_status_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_status_cd_Parameter);
            SqlParameter notification_status_dt_Parameter = ObjDBManager.CreateSqlParameter("notification_status_dt", notification_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(notification_status_dt_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdAfterNotification", sqlParameters);

            return dset;
        }

        public string UpdAfterNotificationAsTask(System.Int32? person_id,
                                                            System.Int16? working_unit_id,
                                                            System.Int16? designation_id,
                                                            System.Byte? sewadar_type_id,
                                                            System.Int16? grade_id,
                                                            System.Int16? status_id,
                                                            System.DateTime? status_dt,
                                                            System.Int32? status_reason_id,
                                                            System.DateTime? notification_dt,
                                                            System.Int32? notification_id,
                                                            System.Byte? sewadar_type_indicator,
                                                            System.DateTime? effective_dt,
                                                            System.Int16? template_id,
                                                            System.String notification_subject,
                                                            System.String notification_remarks,
                                                            System.String notification_status_cd,
                                                            System.DateTime? notification_status_dt,
                                                            System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter working_unit_id_Parameter = ObjDBManager.CreateSqlParameter("working_unit_id", working_unit_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(working_unit_id_Parameter);
            SqlParameter designation_id_Parameter = ObjDBManager.CreateSqlParameter("designation_id", designation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(designation_id_Parameter);
            SqlParameter sewadar_type_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_type_id", sewadar_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(sewadar_type_id_Parameter);
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(grade_id_Parameter);
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            SqlParameter status_dt_Parameter = ObjDBManager.CreateSqlParameter("status_dt", status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(status_dt_Parameter);
            SqlParameter status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("status_reason_id", status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(status_reason_id_Parameter);
            SqlParameter notification_dt_Parameter = ObjDBManager.CreateSqlParameter("notification_dt", notification_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(notification_dt_Parameter);
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            SqlParameter sewadar_type_indicator_Parameter = ObjDBManager.CreateSqlParameter("sewadar_type_indicator", sewadar_type_indicator, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(sewadar_type_indicator_Parameter);
            SqlParameter effective_dt_Parameter = ObjDBManager.CreateSqlParameter("effective_dt", effective_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_dt_Parameter);
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter notification_subject_Parameter = ObjDBManager.CreateSqlParameter("notification_subject", notification_subject, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_subject_Parameter);
            SqlParameter notification_remarks_Parameter = ObjDBManager.CreateSqlParameter("notification_remarks", notification_remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_remarks_Parameter);
            SqlParameter notification_status_cd_Parameter = ObjDBManager.CreateSqlParameter("notification_status_cd", notification_status_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_status_cd_Parameter);
            SqlParameter notification_status_dt_Parameter = ObjDBManager.CreateSqlParameter("notification_status_dt", notification_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(notification_status_dt_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdAfterNotification", sqlParameters);

            return taskString;
        }



        public DataSet UpdAfterNotifications(System.Int32? person_id,
                                                        System.Int16? working_unit_id,
                                                        System.Int16? designation_id,
                                                        System.DateTime? joining_dt,
                                                        System.Byte? sewadar_type_id,
                                                        System.Int16? grade_id,
                                                        System.Int16? status_id,
                                                        System.DateTime? status_dt,
                                                        System.Int32? status_reason_id,
                                                        System.DateTime? notification_dt,
                                                        System.Int32? notification_id,
                                                        System.Byte? sewadar_type_indicator,
                                                        System.DateTime? effective_dt,
                                                        System.Int16? template_id,
                                                        System.String notification_subject,
                                                        System.String notification_remarks,
                                                        System.String notification_status_cd,
                                                        System.DateTime? notification_status_dt,
                                                        System.Byte[] TXN_TS)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter working_unit_id_Parameter = ObjDBManager.CreateSqlParameter("working_unit_id", working_unit_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(working_unit_id_Parameter);
            SqlParameter designation_id_Parameter = ObjDBManager.CreateSqlParameter("designation_id", designation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(designation_id_Parameter);
            SqlParameter joining_dt_Parameter = ObjDBManager.CreateSqlParameter("joining_dt", joining_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(joining_dt_Parameter);
            SqlParameter sewadar_type_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_type_id", sewadar_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(sewadar_type_id_Parameter);
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(grade_id_Parameter);
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            SqlParameter status_dt_Parameter = ObjDBManager.CreateSqlParameter("status_dt", status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(status_dt_Parameter);
            SqlParameter status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("status_reason_id", status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(status_reason_id_Parameter);
            SqlParameter notification_dt_Parameter = ObjDBManager.CreateSqlParameter("notification_dt", notification_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(notification_dt_Parameter);
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            SqlParameter sewadar_type_indicator_Parameter = ObjDBManager.CreateSqlParameter("sewadar_type_indicator", sewadar_type_indicator, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(sewadar_type_indicator_Parameter);
            SqlParameter effective_dt_Parameter = ObjDBManager.CreateSqlParameter("effective_dt", effective_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_dt_Parameter);
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter notification_subject_Parameter = ObjDBManager.CreateSqlParameter("notification_subject", notification_subject, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_subject_Parameter);
            SqlParameter notification_remarks_Parameter = ObjDBManager.CreateSqlParameter("notification_remarks", notification_remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_remarks_Parameter);
            SqlParameter notification_status_cd_Parameter = ObjDBManager.CreateSqlParameter("notification_status_cd", notification_status_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_status_cd_Parameter);
            SqlParameter notification_status_dt_Parameter = ObjDBManager.CreateSqlParameter("notification_status_dt", notification_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(notification_status_dt_Parameter);
            SqlParameter TXN_TS_Parameter = ObjDBManager.CreateSqlParameter("TXN_TS", TXN_TS, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(TXN_TS_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdAfterNotifications", sqlParameters);

            return dset;
        }

        public string UpdAfterNotificationsAsTask(System.Int32? person_id,
                                                                System.Int16? working_unit_id,
                                                                System.Int16? designation_id,
                                                                System.DateTime? joining_dt,
                                                                System.Byte? sewadar_type_id,
                                                                System.Int16? grade_id,
                                                                System.Int16? status_id,
                                                                System.DateTime? status_dt,
                                                                System.Int32? status_reason_id,
                                                                System.DateTime? notification_dt,
                                                                System.Int32? notification_id,
                                                                System.Byte? sewadar_type_indicator,
                                                                System.DateTime? effective_dt,
                                                                System.Int16? template_id,
                                                                System.String notification_subject,
                                                                System.String notification_remarks,
                                                                System.String notification_status_cd,
                                                                System.DateTime? notification_status_dt,
                                                                System.Byte[] TXN_TS)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter working_unit_id_Parameter = ObjDBManager.CreateSqlParameter("working_unit_id", working_unit_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(working_unit_id_Parameter);
            SqlParameter designation_id_Parameter = ObjDBManager.CreateSqlParameter("designation_id", designation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(designation_id_Parameter);
            SqlParameter joining_dt_Parameter = ObjDBManager.CreateSqlParameter("joining_dt", joining_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(joining_dt_Parameter);
            SqlParameter sewadar_type_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_type_id", sewadar_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(sewadar_type_id_Parameter);
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(grade_id_Parameter);
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            SqlParameter status_dt_Parameter = ObjDBManager.CreateSqlParameter("status_dt", status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(status_dt_Parameter);
            SqlParameter status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("status_reason_id", status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(status_reason_id_Parameter);
            SqlParameter notification_dt_Parameter = ObjDBManager.CreateSqlParameter("notification_dt", notification_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(notification_dt_Parameter);
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            SqlParameter sewadar_type_indicator_Parameter = ObjDBManager.CreateSqlParameter("sewadar_type_indicator", sewadar_type_indicator, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(sewadar_type_indicator_Parameter);
            SqlParameter effective_dt_Parameter = ObjDBManager.CreateSqlParameter("effective_dt", effective_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_dt_Parameter);
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter notification_subject_Parameter = ObjDBManager.CreateSqlParameter("notification_subject", notification_subject, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_subject_Parameter);
            SqlParameter notification_remarks_Parameter = ObjDBManager.CreateSqlParameter("notification_remarks", notification_remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_remarks_Parameter);
            SqlParameter notification_status_cd_Parameter = ObjDBManager.CreateSqlParameter("notification_status_cd", notification_status_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_status_cd_Parameter);
            SqlParameter notification_status_dt_Parameter = ObjDBManager.CreateSqlParameter("notification_status_dt", notification_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(notification_status_dt_Parameter);
            SqlParameter TXN_TS_Parameter = ObjDBManager.CreateSqlParameter("TXN_TS", TXN_TS, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(TXN_TS_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdAfterNotifications", sqlParameters);

            return taskString;
        }



        public DataSet UpdatePhoto(System.Int32? p_person_id,
                                                System.Byte[] p_photo,
                                                System.DateTime? p_photo_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_person_id_Parameter = ObjDBManager.CreateSqlParameter("p_person_id", p_person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_person_id_Parameter);
            SqlParameter p_photo_Parameter = ObjDBManager.CreateSqlParameter("p_photo", p_photo, SqlDbType.Image, ParameterDirection.Input);
            sqlParameters.Add(p_photo_Parameter);
            SqlParameter p_photo_dt_Parameter = ObjDBManager.CreateSqlParameter("p_photo_dt", p_photo_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(p_photo_dt_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdatePhoto", sqlParameters);

            return dset;
        }

        public string UpdatePhotoAsTask(System.Int32? p_person_id,
                                                    System.Byte[] p_photo,
                                                    System.DateTime? p_photo_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter p_person_id_Parameter = ObjDBManager.CreateSqlParameter("p_person_id", p_person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(p_person_id_Parameter);
            SqlParameter p_photo_Parameter = ObjDBManager.CreateSqlParameter("p_photo", p_photo, SqlDbType.Image, ParameterDirection.Input);
            sqlParameters.Add(p_photo_Parameter);
            SqlParameter p_photo_dt_Parameter = ObjDBManager.CreateSqlParameter("p_photo_dt", p_photo_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(p_photo_dt_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdatePhoto", sqlParameters);

            return taskString;
        }



        public DataSet UpdateTestProc(System.Int32? id,
                                                    System.String name,
                                                    System.String lastname,
                                                    System.Int32? age,
                                                    System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter id_Parameter = ObjDBManager.CreateSqlParameter("id", id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(id_Parameter);
            SqlParameter name_Parameter = ObjDBManager.CreateSqlParameter("name", name, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(name_Parameter);
            SqlParameter lastname_Parameter = ObjDBManager.CreateSqlParameter("lastname", lastname, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(lastname_Parameter);
            SqlParameter age_Parameter = ObjDBManager.CreateSqlParameter("age", age, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(age_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdateTestProc", sqlParameters);

            return dset;
        }

        public string UpdateTestProcAsTask(System.Int32? id,
                                                        System.String name,
                                                        System.String lastname,
                                                        System.Int32? age,
                                                        System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter id_Parameter = ObjDBManager.CreateSqlParameter("id", id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(id_Parameter);
            SqlParameter name_Parameter = ObjDBManager.CreateSqlParameter("name", name, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(name_Parameter);
            SqlParameter lastname_Parameter = ObjDBManager.CreateSqlParameter("lastname", lastname, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(lastname_Parameter);
            SqlParameter age_Parameter = ObjDBManager.CreateSqlParameter("age", age, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(age_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdateTestProc", sqlParameters);

            return taskString;
        }



        public DataSet UpdChildren_facilities(System.Int16? children_facility_id,
                                                            System.String children_facility_cd,
                                                            System.String children_facility_nm,
                                                            System.String children_facility_dsc,
                                                            System.String frequency,
                                                            System.Int16? children_facility_set_id,
                                                            System.String are_males_eligible,
                                                            System.String are_females_eligible,
                                                            System.String qualification_type,
                                                            System.String facility_type,
                                                            System.Int32? facility_amt,
                                                            System.Byte? criteria_percentage,
                                                            System.String criteria_qualification_type,
                                                            System.DateTime? effective_from,
                                                            System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter children_facility_id_Parameter = ObjDBManager.CreateSqlParameter("children_facility_id", children_facility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(children_facility_id_Parameter);
            SqlParameter children_facility_cd_Parameter = ObjDBManager.CreateSqlParameter("children_facility_cd", children_facility_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(children_facility_cd_Parameter);
            SqlParameter children_facility_nm_Parameter = ObjDBManager.CreateSqlParameter("children_facility_nm", children_facility_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(children_facility_nm_Parameter);
            SqlParameter children_facility_dsc_Parameter = ObjDBManager.CreateSqlParameter("children_facility_dsc", children_facility_dsc, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(children_facility_dsc_Parameter);
            SqlParameter frequency_Parameter = ObjDBManager.CreateSqlParameter("frequency", frequency, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(frequency_Parameter);
            SqlParameter children_facility_set_id_Parameter = ObjDBManager.CreateSqlParameter("children_facility_set_id", children_facility_set_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(children_facility_set_id_Parameter);
            SqlParameter are_males_eligible_Parameter = ObjDBManager.CreateSqlParameter("are_males_eligible", are_males_eligible, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(are_males_eligible_Parameter);
            SqlParameter are_females_eligible_Parameter = ObjDBManager.CreateSqlParameter("are_females_eligible", are_females_eligible, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(are_females_eligible_Parameter);
            SqlParameter qualification_type_Parameter = ObjDBManager.CreateSqlParameter("qualification_type", qualification_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(qualification_type_Parameter);
            SqlParameter facility_type_Parameter = ObjDBManager.CreateSqlParameter("facility_type", facility_type, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(facility_type_Parameter);
            SqlParameter facility_amt_Parameter = ObjDBManager.CreateSqlParameter("facility_amt", facility_amt, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(facility_amt_Parameter);
            SqlParameter criteria_percentage_Parameter = ObjDBManager.CreateSqlParameter("criteria_percentage", criteria_percentage, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(criteria_percentage_Parameter);
            SqlParameter criteria_qualification_type_Parameter = ObjDBManager.CreateSqlParameter("criteria_qualification_type", criteria_qualification_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(criteria_qualification_type_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdChildren_facilities", sqlParameters);

            return dset;
        }

        public string UpdChildren_facilitiesAsTask(System.Int16? children_facility_id,
                                                                System.String children_facility_cd,
                                                                System.String children_facility_nm,
                                                                System.String children_facility_dsc,
                                                                System.String frequency,
                                                                System.Int16? children_facility_set_id,
                                                                System.String are_males_eligible,
                                                                System.String are_females_eligible,
                                                                System.String qualification_type,
                                                                System.String facility_type,
                                                                System.Int32? facility_amt,
                                                                System.Byte? criteria_percentage,
                                                                System.String criteria_qualification_type,
                                                                System.DateTime? effective_from,
                                                                System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter children_facility_id_Parameter = ObjDBManager.CreateSqlParameter("children_facility_id", children_facility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(children_facility_id_Parameter);
            SqlParameter children_facility_cd_Parameter = ObjDBManager.CreateSqlParameter("children_facility_cd", children_facility_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(children_facility_cd_Parameter);
            SqlParameter children_facility_nm_Parameter = ObjDBManager.CreateSqlParameter("children_facility_nm", children_facility_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(children_facility_nm_Parameter);
            SqlParameter children_facility_dsc_Parameter = ObjDBManager.CreateSqlParameter("children_facility_dsc", children_facility_dsc, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(children_facility_dsc_Parameter);
            SqlParameter frequency_Parameter = ObjDBManager.CreateSqlParameter("frequency", frequency, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(frequency_Parameter);
            SqlParameter children_facility_set_id_Parameter = ObjDBManager.CreateSqlParameter("children_facility_set_id", children_facility_set_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(children_facility_set_id_Parameter);
            SqlParameter are_males_eligible_Parameter = ObjDBManager.CreateSqlParameter("are_males_eligible", are_males_eligible, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(are_males_eligible_Parameter);
            SqlParameter are_females_eligible_Parameter = ObjDBManager.CreateSqlParameter("are_females_eligible", are_females_eligible, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(are_females_eligible_Parameter);
            SqlParameter qualification_type_Parameter = ObjDBManager.CreateSqlParameter("qualification_type", qualification_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(qualification_type_Parameter);
            SqlParameter facility_type_Parameter = ObjDBManager.CreateSqlParameter("facility_type", facility_type, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(facility_type_Parameter);
            SqlParameter facility_amt_Parameter = ObjDBManager.CreateSqlParameter("facility_amt", facility_amt, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(facility_amt_Parameter);
            SqlParameter criteria_percentage_Parameter = ObjDBManager.CreateSqlParameter("criteria_percentage", criteria_percentage, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(criteria_percentage_Parameter);
            SqlParameter criteria_qualification_type_Parameter = ObjDBManager.CreateSqlParameter("criteria_qualification_type", criteria_qualification_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(criteria_qualification_type_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdChildren_facilities", sqlParameters);

            return taskString;
        }



        public DataSet UpdChildrenEligibleFacilities(System.Int32? dependant_id,
                                                                System.Int16? Facility_id,
                                                                System.Int16? oldFacility_id,
                                                                System.DateTime? effective_from,
                                                                System.DateTime? effective_till,
                                                                System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter Facility_id_Parameter = ObjDBManager.CreateSqlParameter("Facility_id", Facility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(Facility_id_Parameter);
            SqlParameter oldFacility_id_Parameter = ObjDBManager.CreateSqlParameter("oldFacility_id", oldFacility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(oldFacility_id_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdChildrenEligibleFacilities", sqlParameters);

            return dset;
        }

        public string UpdChildrenEligibleFacilitiesAsTask(System.Int32? dependant_id,
                                                                        System.Int16? Facility_id,
                                                                        System.Int16? oldFacility_id,
                                                                        System.DateTime? effective_from,
                                                                        System.DateTime? effective_till,
                                                                        System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter Facility_id_Parameter = ObjDBManager.CreateSqlParameter("Facility_id", Facility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(Facility_id_Parameter);
            SqlParameter oldFacility_id_Parameter = ObjDBManager.CreateSqlParameter("oldFacility_id", oldFacility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(oldFacility_id_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdChildrenEligibleFacilities", sqlParameters);

            return taskString;
        }



        public DataSet UpdChildrenGrantDisbursement(System.Int32? disbursement_id,
                                                                System.DateTime? disbursement_dt,
                                                                System.Int32? dependant_id,
                                                                System.DateTime? effective_from,
                                                                System.Int16? children_facility_id,
                                                                System.Int32? applicable_year,
                                                                System.Byte? applicable_unit,
                                                                System.Int32? claim_amt,
                                                                System.Int32? disbursed_amt,
                                                                System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter disbursement_id_Parameter = ObjDBManager.CreateSqlParameter("disbursement_id", disbursement_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(disbursement_id_Parameter);
            SqlParameter disbursement_dt_Parameter = ObjDBManager.CreateSqlParameter("disbursement_dt", disbursement_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(disbursement_dt_Parameter);
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter children_facility_id_Parameter = ObjDBManager.CreateSqlParameter("children_facility_id", children_facility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(children_facility_id_Parameter);
            SqlParameter applicable_year_Parameter = ObjDBManager.CreateSqlParameter("applicable_year", applicable_year, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(applicable_year_Parameter);
            SqlParameter applicable_unit_Parameter = ObjDBManager.CreateSqlParameter("applicable_unit", applicable_unit, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(applicable_unit_Parameter);
            SqlParameter claim_amt_Parameter = ObjDBManager.CreateSqlParameter("claim_amt", claim_amt, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(claim_amt_Parameter);
            SqlParameter disbursed_amt_Parameter = ObjDBManager.CreateSqlParameter("disbursed_amt", disbursed_amt, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(disbursed_amt_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdChildrenGrantDisbursement", sqlParameters);

            return dset;
        }

        public string UpdChildrenGrantDisbursementAsTask(System.Int32? disbursement_id,
                                                                    System.DateTime? disbursement_dt,
                                                                    System.Int32? dependant_id,
                                                                    System.DateTime? effective_from,
                                                                    System.Int16? children_facility_id,
                                                                    System.Int32? applicable_year,
                                                                    System.Byte? applicable_unit,
                                                                    System.Int32? claim_amt,
                                                                    System.Int32? disbursed_amt,
                                                                    System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter disbursement_id_Parameter = ObjDBManager.CreateSqlParameter("disbursement_id", disbursement_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(disbursement_id_Parameter);
            SqlParameter disbursement_dt_Parameter = ObjDBManager.CreateSqlParameter("disbursement_dt", disbursement_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(disbursement_dt_Parameter);
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter children_facility_id_Parameter = ObjDBManager.CreateSqlParameter("children_facility_id", children_facility_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(children_facility_id_Parameter);
            SqlParameter applicable_year_Parameter = ObjDBManager.CreateSqlParameter("applicable_year", applicable_year, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(applicable_year_Parameter);
            SqlParameter applicable_unit_Parameter = ObjDBManager.CreateSqlParameter("applicable_unit", applicable_unit, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(applicable_unit_Parameter);
            SqlParameter claim_amt_Parameter = ObjDBManager.CreateSqlParameter("claim_amt", claim_amt, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(claim_amt_Parameter);
            SqlParameter disbursed_amt_Parameter = ObjDBManager.CreateSqlParameter("disbursed_amt", disbursed_amt, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(disbursed_amt_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdChildrenGrantDisbursement", sqlParameters);

            return taskString;
        }



        public DataSet UpdChildrenResults(System.Int32? dependant_id,
                                                        System.Int16? qualification_id,
                                                        System.Int16? tempqualification_id,
                                                        System.Int16? year_of_qualification,
                                                        System.Byte? marks_percentage,
                                                        System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            SqlParameter tempqualification_id_Parameter = ObjDBManager.CreateSqlParameter("tempqualification_id", tempqualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(tempqualification_id_Parameter);
            SqlParameter year_of_qualification_Parameter = ObjDBManager.CreateSqlParameter("year_of_qualification", year_of_qualification, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(year_of_qualification_Parameter);
            SqlParameter marks_percentage_Parameter = ObjDBManager.CreateSqlParameter("marks_percentage", marks_percentage, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(marks_percentage_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdChildrenResults", sqlParameters);

            return dset;
        }

        public string UpdChildrenResultsAsTask(System.Int32? dependant_id,
                                                            System.Int16? qualification_id,
                                                            System.Int16? tempqualification_id,
                                                            System.Int16? year_of_qualification,
                                                            System.Byte? marks_percentage,
                                                            System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            SqlParameter tempqualification_id_Parameter = ObjDBManager.CreateSqlParameter("tempqualification_id", tempqualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(tempqualification_id_Parameter);
            SqlParameter year_of_qualification_Parameter = ObjDBManager.CreateSqlParameter("year_of_qualification", year_of_qualification, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(year_of_qualification_Parameter);
            SqlParameter marks_percentage_Parameter = ObjDBManager.CreateSqlParameter("marks_percentage", marks_percentage, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(marks_percentage_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdChildrenResults", sqlParameters);

            return taskString;
        }



        public DataSet UpdConfidentialInformation(System.Int32? person_id,
                                                                System.Int16? currency_id,
                                                                System.String income_source_nm,
                                                                System.Int32? monthly_income,
                                                                System.String commercial_activity)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter currency_id_Parameter = ObjDBManager.CreateSqlParameter("currency_id", currency_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(currency_id_Parameter);
            SqlParameter income_source_nm_Parameter = ObjDBManager.CreateSqlParameter("income_source_nm", income_source_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(income_source_nm_Parameter);
            SqlParameter monthly_income_Parameter = ObjDBManager.CreateSqlParameter("monthly_income", monthly_income, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(monthly_income_Parameter);
            SqlParameter commercial_activity_Parameter = ObjDBManager.CreateSqlParameter("commercial_activity", commercial_activity, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(commercial_activity_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdConfidentialInformation", sqlParameters);

            return dset;
        }

        public string UpdConfidentialInformationAsTask(System.Int32? person_id,
                                                                    System.Int16? currency_id,
                                                                    System.String income_source_nm,
                                                                    System.Int32? monthly_income,
                                                                    System.String commercial_activity)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter currency_id_Parameter = ObjDBManager.CreateSqlParameter("currency_id", currency_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(currency_id_Parameter);
            SqlParameter income_source_nm_Parameter = ObjDBManager.CreateSqlParameter("income_source_nm", income_source_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(income_source_nm_Parameter);
            SqlParameter monthly_income_Parameter = ObjDBManager.CreateSqlParameter("monthly_income", monthly_income, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(monthly_income_Parameter);
            SqlParameter commercial_activity_Parameter = ObjDBManager.CreateSqlParameter("commercial_activity", commercial_activity, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(commercial_activity_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdConfidentialInformation", sqlParameters);

            return taskString;
        }



        public DataSet UpdGrades(System.Int32? grade_id,
                                            System.String grade_nm,
                                            System.Int32? starting_pay_scale,
                                            System.Int32? increment_1,
                                            System.Int32? intermediate_scale,
                                            System.Int32? increment_2,
                                            System.Int32? final_pay_scale,
                                            System.DateTime? effective_from,
                                            System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(grade_id_Parameter);
            SqlParameter grade_nm_Parameter = ObjDBManager.CreateSqlParameter("grade_nm", grade_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(grade_nm_Parameter);
            SqlParameter starting_pay_scale_Parameter = ObjDBManager.CreateSqlParameter("starting_pay_scale", starting_pay_scale, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(starting_pay_scale_Parameter);
            SqlParameter increment_1_Parameter = ObjDBManager.CreateSqlParameter("increment_1", increment_1, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(increment_1_Parameter);
            SqlParameter intermediate_scale_Parameter = ObjDBManager.CreateSqlParameter("intermediate_scale", intermediate_scale, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(intermediate_scale_Parameter);
            SqlParameter increment_2_Parameter = ObjDBManager.CreateSqlParameter("increment_2", increment_2, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(increment_2_Parameter);
            SqlParameter final_pay_scale_Parameter = ObjDBManager.CreateSqlParameter("final_pay_scale", final_pay_scale, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(final_pay_scale_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdGrades", sqlParameters);

            return dset;
        }

        public string UpdGradesAsTask(System.Int32? grade_id,
                                                    System.String grade_nm,
                                                    System.Int32? starting_pay_scale,
                                                    System.Int32? increment_1,
                                                    System.Int32? intermediate_scale,
                                                    System.Int32? increment_2,
                                                    System.Int32? final_pay_scale,
                                                    System.DateTime? effective_from,
                                                    System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(grade_id_Parameter);
            SqlParameter grade_nm_Parameter = ObjDBManager.CreateSqlParameter("grade_nm", grade_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(grade_nm_Parameter);
            SqlParameter starting_pay_scale_Parameter = ObjDBManager.CreateSqlParameter("starting_pay_scale", starting_pay_scale, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(starting_pay_scale_Parameter);
            SqlParameter increment_1_Parameter = ObjDBManager.CreateSqlParameter("increment_1", increment_1, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(increment_1_Parameter);
            SqlParameter intermediate_scale_Parameter = ObjDBManager.CreateSqlParameter("intermediate_scale", intermediate_scale, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(intermediate_scale_Parameter);
            SqlParameter increment_2_Parameter = ObjDBManager.CreateSqlParameter("increment_2", increment_2, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(increment_2_Parameter);
            SqlParameter final_pay_scale_Parameter = ObjDBManager.CreateSqlParameter("final_pay_scale", final_pay_scale, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(final_pay_scale_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdGrades", sqlParameters);

            return taskString;
        }



        public DataSet UpdHouseInPersons(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdHouseInPersons", sqlParameters);

            return dset;
        }

        public string UpdHouseInPersonsAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdHouseInPersons", sqlParameters);

            return taskString;
        }



        public DataSet UpdHouseTypes(System.Int16? housing_type_id,
                                                System.String housing_type_cd,
                                                System.String housing_type_nm,
                                                System.DateTime? effective_from,
                                                System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_type_id_Parameter = ObjDBManager.CreateSqlParameter("housing_type_id", housing_type_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(housing_type_id_Parameter);
            SqlParameter housing_type_cd_Parameter = ObjDBManager.CreateSqlParameter("housing_type_cd", housing_type_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(housing_type_cd_Parameter);
            SqlParameter housing_type_nm_Parameter = ObjDBManager.CreateSqlParameter("housing_type_nm", housing_type_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(housing_type_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdHouseTypes", sqlParameters);

            return dset;
        }

        public string UpdHouseTypesAsTask(System.Int16? housing_type_id,
                                                        System.String housing_type_cd,
                                                        System.String housing_type_nm,
                                                        System.DateTime? effective_from,
                                                        System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_type_id_Parameter = ObjDBManager.CreateSqlParameter("housing_type_id", housing_type_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(housing_type_id_Parameter);
            SqlParameter housing_type_cd_Parameter = ObjDBManager.CreateSqlParameter("housing_type_cd", housing_type_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(housing_type_cd_Parameter);
            SqlParameter housing_type_nm_Parameter = ObjDBManager.CreateSqlParameter("housing_type_nm", housing_type_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(housing_type_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdHouseTypes", sqlParameters);

            return taskString;
        }



        public DataSet UpdHousingPurposes(System.Int16? housing_purpose_id,
                                                        System.String housing_purpose_cd,
                                                        System.String housing_purpose_nm,
                                                        System.DateTime? effective_from,
                                                        System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_purpose_id_Parameter = ObjDBManager.CreateSqlParameter("housing_purpose_id", housing_purpose_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(housing_purpose_id_Parameter);
            SqlParameter housing_purpose_cd_Parameter = ObjDBManager.CreateSqlParameter("housing_purpose_cd", housing_purpose_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(housing_purpose_cd_Parameter);
            SqlParameter housing_purpose_nm_Parameter = ObjDBManager.CreateSqlParameter("housing_purpose_nm", housing_purpose_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(housing_purpose_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdHousingPurposes", sqlParameters);

            return dset;
        }

        public string UpdHousingPurposesAsTask(System.Int16? housing_purpose_id,
                                                            System.String housing_purpose_cd,
                                                            System.String housing_purpose_nm,
                                                            System.DateTime? effective_from,
                                                            System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter housing_purpose_id_Parameter = ObjDBManager.CreateSqlParameter("housing_purpose_id", housing_purpose_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(housing_purpose_id_Parameter);
            SqlParameter housing_purpose_cd_Parameter = ObjDBManager.CreateSqlParameter("housing_purpose_cd", housing_purpose_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(housing_purpose_cd_Parameter);
            SqlParameter housing_purpose_nm_Parameter = ObjDBManager.CreateSqlParameter("housing_purpose_nm", housing_purpose_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(housing_purpose_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdHousingPurposes", sqlParameters);

            return taskString;
        }



        public DataSet UpdHousingUnits(System.Int32? in_housing_location_id,
                                                    System.Int16? in_housing_status_id,
                                                    System.Int16? in_status_reason_id,
                                                    System.DateTime? in_status_dt,
                                                    System.String in_location_full_nm,
                                                    System.String in_location_short_nm,
                                                    System.String in_location_cd,
                                                    System.String in_address_part,
                                                    System.String in_separator,
                                                    System.String in_housing_location_addr,
                                                    System.String in_is_root,
                                                    System.String in_is_leaf,
                                                    System.Int32? in_group_location_id,
                                                    System.Int16? in_housing_purpose_id,
                                                    System.Int16? in_housing_type_id,
                                                    System.String in_remarks,
                                                    System.DateTime? in_effective_from,
                                                    System.DateTime? in_effective_till,
                                                    System.Byte[] in_txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_location_id", in_housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_housing_location_id_Parameter);
            SqlParameter in_housing_status_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_status_id", in_housing_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_housing_status_id_Parameter);
            SqlParameter in_status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("in_status_reason_id", in_status_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_status_reason_id_Parameter);
            SqlParameter in_status_dt_Parameter = ObjDBManager.CreateSqlParameter("in_status_dt", in_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(in_status_dt_Parameter);
            SqlParameter in_location_full_nm_Parameter = ObjDBManager.CreateSqlParameter("in_location_full_nm", in_location_full_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_location_full_nm_Parameter);
            SqlParameter in_location_short_nm_Parameter = ObjDBManager.CreateSqlParameter("in_location_short_nm", in_location_short_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_location_short_nm_Parameter);
            SqlParameter in_location_cd_Parameter = ObjDBManager.CreateSqlParameter("in_location_cd", in_location_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_location_cd_Parameter);
            SqlParameter in_address_part_Parameter = ObjDBManager.CreateSqlParameter("in_address_part", in_address_part, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(in_address_part_Parameter);
            SqlParameter in_separator_Parameter = ObjDBManager.CreateSqlParameter("in_separator", in_separator, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_separator_Parameter);
            SqlParameter in_housing_location_addr_Parameter = ObjDBManager.CreateSqlParameter("in_housing_location_addr", in_housing_location_addr, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_housing_location_addr_Parameter);
            SqlParameter in_is_root_Parameter = ObjDBManager.CreateSqlParameter("in_is_root", in_is_root, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_is_root_Parameter);
            SqlParameter in_is_leaf_Parameter = ObjDBManager.CreateSqlParameter("in_is_leaf", in_is_leaf, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_is_leaf_Parameter);
            SqlParameter in_group_location_id_Parameter = ObjDBManager.CreateSqlParameter("in_group_location_id", in_group_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_group_location_id_Parameter);
            SqlParameter in_housing_purpose_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_purpose_id", in_housing_purpose_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_housing_purpose_id_Parameter);
            SqlParameter in_housing_type_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_type_id", in_housing_type_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_housing_type_id_Parameter);
            SqlParameter in_remarks_Parameter = ObjDBManager.CreateSqlParameter("in_remarks", in_remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_remarks_Parameter);
            SqlParameter in_effective_from_Parameter = ObjDBManager.CreateSqlParameter("in_effective_from", in_effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(in_effective_from_Parameter);
            SqlParameter in_effective_till_Parameter = ObjDBManager.CreateSqlParameter("in_effective_till", in_effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(in_effective_till_Parameter);
            SqlParameter in_txn_ts_Parameter = ObjDBManager.CreateSqlParameter("in_txn_ts", in_txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(in_txn_ts_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdHousingUnits", sqlParameters);

            return dset;
        }

        public string UpdHousingUnitsAsTask(System.Int32? in_housing_location_id,
                                                        System.Int16? in_housing_status_id,
                                                        System.Int16? in_status_reason_id,
                                                        System.DateTime? in_status_dt,
                                                        System.String in_location_full_nm,
                                                        System.String in_location_short_nm,
                                                        System.String in_location_cd,
                                                        System.String in_address_part,
                                                        System.String in_separator,
                                                        System.String in_housing_location_addr,
                                                        System.String in_is_root,
                                                        System.String in_is_leaf,
                                                        System.Int32? in_group_location_id,
                                                        System.Int16? in_housing_purpose_id,
                                                        System.Int16? in_housing_type_id,
                                                        System.String in_remarks,
                                                        System.DateTime? in_effective_from,
                                                        System.DateTime? in_effective_till,
                                                        System.Byte[] in_txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter in_housing_location_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_location_id", in_housing_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_housing_location_id_Parameter);
            SqlParameter in_housing_status_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_status_id", in_housing_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_housing_status_id_Parameter);
            SqlParameter in_status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("in_status_reason_id", in_status_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_status_reason_id_Parameter);
            SqlParameter in_status_dt_Parameter = ObjDBManager.CreateSqlParameter("in_status_dt", in_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(in_status_dt_Parameter);
            SqlParameter in_location_full_nm_Parameter = ObjDBManager.CreateSqlParameter("in_location_full_nm", in_location_full_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_location_full_nm_Parameter);
            SqlParameter in_location_short_nm_Parameter = ObjDBManager.CreateSqlParameter("in_location_short_nm", in_location_short_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_location_short_nm_Parameter);
            SqlParameter in_location_cd_Parameter = ObjDBManager.CreateSqlParameter("in_location_cd", in_location_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_location_cd_Parameter);
            SqlParameter in_address_part_Parameter = ObjDBManager.CreateSqlParameter("in_address_part", in_address_part, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(in_address_part_Parameter);
            SqlParameter in_separator_Parameter = ObjDBManager.CreateSqlParameter("in_separator", in_separator, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_separator_Parameter);
            SqlParameter in_housing_location_addr_Parameter = ObjDBManager.CreateSqlParameter("in_housing_location_addr", in_housing_location_addr, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_housing_location_addr_Parameter);
            SqlParameter in_is_root_Parameter = ObjDBManager.CreateSqlParameter("in_is_root", in_is_root, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_is_root_Parameter);
            SqlParameter in_is_leaf_Parameter = ObjDBManager.CreateSqlParameter("in_is_leaf", in_is_leaf, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_is_leaf_Parameter);
            SqlParameter in_group_location_id_Parameter = ObjDBManager.CreateSqlParameter("in_group_location_id", in_group_location_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(in_group_location_id_Parameter);
            SqlParameter in_housing_purpose_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_purpose_id", in_housing_purpose_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_housing_purpose_id_Parameter);
            SqlParameter in_housing_type_id_Parameter = ObjDBManager.CreateSqlParameter("in_housing_type_id", in_housing_type_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(in_housing_type_id_Parameter);
            SqlParameter in_remarks_Parameter = ObjDBManager.CreateSqlParameter("in_remarks", in_remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(in_remarks_Parameter);
            SqlParameter in_effective_from_Parameter = ObjDBManager.CreateSqlParameter("in_effective_from", in_effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(in_effective_from_Parameter);
            SqlParameter in_effective_till_Parameter = ObjDBManager.CreateSqlParameter("in_effective_till", in_effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(in_effective_till_Parameter);
            SqlParameter in_txn_ts_Parameter = ObjDBManager.CreateSqlParameter("in_txn_ts", in_txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(in_txn_ts_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdHousingUnits", sqlParameters);

            return taskString;
        }



        public DataSet UpdHousingUnitsStatus(System.Int32? OldHousingUnitId,
                                                        System.Int32? NewHousingUnitId,
                                                        System.String status_for_old_house,
                                                        System.String status_for_new_house)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter OldHousingUnitId_Parameter = ObjDBManager.CreateSqlParameter("OldHousingUnitId", OldHousingUnitId, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(OldHousingUnitId_Parameter);
            SqlParameter NewHousingUnitId_Parameter = ObjDBManager.CreateSqlParameter("NewHousingUnitId", NewHousingUnitId, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(NewHousingUnitId_Parameter);
            SqlParameter status_for_old_house_Parameter = ObjDBManager.CreateSqlParameter("status_for_old_house", status_for_old_house, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(status_for_old_house_Parameter);
            SqlParameter status_for_new_house_Parameter = ObjDBManager.CreateSqlParameter("status_for_new_house", status_for_new_house, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(status_for_new_house_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdHousingUnitsStatus", sqlParameters);

            return dset;
        }

        public string UpdHousingUnitsStatusAsTask(System.Int32? OldHousingUnitId,
                                                                System.Int32? NewHousingUnitId,
                                                                System.String status_for_old_house,
                                                                System.String status_for_new_house)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter OldHousingUnitId_Parameter = ObjDBManager.CreateSqlParameter("OldHousingUnitId", OldHousingUnitId, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(OldHousingUnitId_Parameter);
            SqlParameter NewHousingUnitId_Parameter = ObjDBManager.CreateSqlParameter("NewHousingUnitId", NewHousingUnitId, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(NewHousingUnitId_Parameter);
            SqlParameter status_for_old_house_Parameter = ObjDBManager.CreateSqlParameter("status_for_old_house", status_for_old_house, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(status_for_old_house_Parameter);
            SqlParameter status_for_new_house_Parameter = ObjDBManager.CreateSqlParameter("status_for_new_house", status_for_new_house, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(status_for_new_house_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdHousingUnitsStatus", sqlParameters);

            return taskString;
        }



        public DataSet UpdHousingUnitsStatusAfterDelete(System.Int32? HousingUnitId)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter HousingUnitId_Parameter = ObjDBManager.CreateSqlParameter("HousingUnitId", HousingUnitId, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(HousingUnitId_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdHousingUnitsStatusAfterDelete", sqlParameters);

            return dset;
        }

        public string UpdHousingUnitsStatusAfterDeleteAsTask(System.Int32? HousingUnitId)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter HousingUnitId_Parameter = ObjDBManager.CreateSqlParameter("HousingUnitId", HousingUnitId, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(HousingUnitId_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdHousingUnitsStatusAfterDelete", sqlParameters);

            return taskString;
        }



        public DataSet UpdIDCardRequestReasons(System.Int16? id_card_request_reason_id,
                                                            System.String id_card_request_reason_cd,
                                                            System.String id_card_request_reason_nm,
                                                            System.DateTime? effective_from,
                                                            System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter id_card_request_reason_id_Parameter = ObjDBManager.CreateSqlParameter("id_card_request_reason_id", id_card_request_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(id_card_request_reason_id_Parameter);
            SqlParameter id_card_request_reason_cd_Parameter = ObjDBManager.CreateSqlParameter("id_card_request_reason_cd", id_card_request_reason_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(id_card_request_reason_cd_Parameter);
            SqlParameter id_card_request_reason_nm_Parameter = ObjDBManager.CreateSqlParameter("id_card_request_reason_nm", id_card_request_reason_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(id_card_request_reason_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdIDCardRequestReasons", sqlParameters);

            return dset;
        }

        public string UpdIDCardRequestReasonsAsTask(System.Int16? id_card_request_reason_id,
                                                                System.String id_card_request_reason_cd,
                                                                System.String id_card_request_reason_nm,
                                                                System.DateTime? effective_from,
                                                                System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter id_card_request_reason_id_Parameter = ObjDBManager.CreateSqlParameter("id_card_request_reason_id", id_card_request_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(id_card_request_reason_id_Parameter);
            SqlParameter id_card_request_reason_cd_Parameter = ObjDBManager.CreateSqlParameter("id_card_request_reason_cd", id_card_request_reason_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(id_card_request_reason_cd_Parameter);
            SqlParameter id_card_request_reason_nm_Parameter = ObjDBManager.CreateSqlParameter("id_card_request_reason_nm", id_card_request_reason_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(id_card_request_reason_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdIDCardRequestReasons", sqlParameters);

            return taskString;
        }



        public DataSet UpdInstitutions(System.Int16? institution_id,
                                                    System.String institution_cd,
                                                    System.String institution_nm,
                                                    System.String institution_type,
                                                    System.String location,
                                                    System.String is_transport_reqd,
                                                    System.DateTime? effective_from,
                                                    System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter institution_id_Parameter = ObjDBManager.CreateSqlParameter("institution_id", institution_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(institution_id_Parameter);
            SqlParameter institution_cd_Parameter = ObjDBManager.CreateSqlParameter("institution_cd", institution_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_cd_Parameter);
            SqlParameter institution_nm_Parameter = ObjDBManager.CreateSqlParameter("institution_nm", institution_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_nm_Parameter);
            SqlParameter institution_type_Parameter = ObjDBManager.CreateSqlParameter("institution_type", institution_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_type_Parameter);
            SqlParameter location_Parameter = ObjDBManager.CreateSqlParameter("location", location, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(location_Parameter);
            SqlParameter is_transport_reqd_Parameter = ObjDBManager.CreateSqlParameter("is_transport_reqd", is_transport_reqd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_transport_reqd_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdInstitutions", sqlParameters);

            return dset;
        }

        public string UpdInstitutionsAsTask(System.Int16? institution_id,
                                                        System.String institution_cd,
                                                        System.String institution_nm,
                                                        System.String institution_type,
                                                        System.String location,
                                                        System.String is_transport_reqd,
                                                        System.DateTime? effective_from,
                                                        System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter institution_id_Parameter = ObjDBManager.CreateSqlParameter("institution_id", institution_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(institution_id_Parameter);
            SqlParameter institution_cd_Parameter = ObjDBManager.CreateSqlParameter("institution_cd", institution_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_cd_Parameter);
            SqlParameter institution_nm_Parameter = ObjDBManager.CreateSqlParameter("institution_nm", institution_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_nm_Parameter);
            SqlParameter institution_type_Parameter = ObjDBManager.CreateSqlParameter("institution_type", institution_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_type_Parameter);
            SqlParameter location_Parameter = ObjDBManager.CreateSqlParameter("location", location, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(location_Parameter);
            SqlParameter is_transport_reqd_Parameter = ObjDBManager.CreateSqlParameter("is_transport_reqd", is_transport_reqd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_transport_reqd_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdInstitutions", sqlParameters);

            return taskString;
        }



        public DataSet UpdJob_Type(System.Int32? person_id,
                                                System.String job_type)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter job_type_Parameter = ObjDBManager.CreateSqlParameter("job_type", job_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(job_type_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdJob_Type", sqlParameters);

            return dset;
        }

        public string UpdJob_TypeAsTask(System.Int32? person_id,
                                                    System.String job_type)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter job_type_Parameter = ObjDBManager.CreateSqlParameter("job_type", job_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(job_type_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdJob_Type", sqlParameters);

            return taskString;
        }



        public DataSet UpdJobTypes(System.Int32? person_id,
                                                System.String job_type)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter job_type_Parameter = ObjDBManager.CreateSqlParameter("job_type", job_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(job_type_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdJobTypes", sqlParameters);

            return dset;
        }

        public string UpdJobTypesAsTask(System.Int32? person_id,
                                                    System.String job_type)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter job_type_Parameter = ObjDBManager.CreateSqlParameter("job_type", job_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(job_type_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdJobTypes", sqlParameters);

            return taskString;
        }



        public DataSet UpdMedicalDetails(System.Int32? person_id,
                                                    System.String is_diabetic,
                                                    System.String blood_group,
                                                    System.String medical_status,
                                                    System.DateTime? medical_status_dt,
                                                    System.String medical_status_remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter is_diabetic_Parameter = ObjDBManager.CreateSqlParameter("is_diabetic", is_diabetic, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_diabetic_Parameter);
            SqlParameter blood_group_Parameter = ObjDBManager.CreateSqlParameter("blood_group", blood_group, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(blood_group_Parameter);
            SqlParameter medical_status_Parameter = ObjDBManager.CreateSqlParameter("medical_status", medical_status, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(medical_status_Parameter);
            SqlParameter medical_status_dt_Parameter = ObjDBManager.CreateSqlParameter("medical_status_dt", medical_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(medical_status_dt_Parameter);
            SqlParameter medical_status_remarks_Parameter = ObjDBManager.CreateSqlParameter("medical_status_remarks", medical_status_remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(medical_status_remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdMedicalDetails", sqlParameters);

            return dset;
        }

        public string UpdMedicalDetailsAsTask(System.Int32? person_id,
                                                            System.String is_diabetic,
                                                            System.String blood_group,
                                                            System.String medical_status,
                                                            System.DateTime? medical_status_dt,
                                                            System.String medical_status_remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter is_diabetic_Parameter = ObjDBManager.CreateSqlParameter("is_diabetic", is_diabetic, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_diabetic_Parameter);
            SqlParameter blood_group_Parameter = ObjDBManager.CreateSqlParameter("blood_group", blood_group, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(blood_group_Parameter);
            SqlParameter medical_status_Parameter = ObjDBManager.CreateSqlParameter("medical_status", medical_status, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(medical_status_Parameter);
            SqlParameter medical_status_dt_Parameter = ObjDBManager.CreateSqlParameter("medical_status_dt", medical_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(medical_status_dt_Parameter);
            SqlParameter medical_status_remarks_Parameter = ObjDBManager.CreateSqlParameter("medical_status_remarks", medical_status_remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(medical_status_remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdMedicalDetails", sqlParameters);

            return taskString;
        }



        public DataSet UpdNotification(System.Int32? notification_id,
                                                    System.DateTime? effective_dt,
                                                    System.Int16? template_id,
                                                    System.String notification_subject,
                                                    System.String notification_remarks,
                                                    System.String notification_status_cd,
                                                    System.DateTime? notification_status_dt,
                                                    System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            SqlParameter effective_dt_Parameter = ObjDBManager.CreateSqlParameter("effective_dt", effective_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_dt_Parameter);
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter notification_subject_Parameter = ObjDBManager.CreateSqlParameter("notification_subject", notification_subject, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_subject_Parameter);
            SqlParameter notification_remarks_Parameter = ObjDBManager.CreateSqlParameter("notification_remarks", notification_remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_remarks_Parameter);
            SqlParameter notification_status_cd_Parameter = ObjDBManager.CreateSqlParameter("notification_status_cd", notification_status_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_status_cd_Parameter);
            SqlParameter notification_status_dt_Parameter = ObjDBManager.CreateSqlParameter("notification_status_dt", notification_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(notification_status_dt_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdNotification", sqlParameters);

            return dset;
        }

        public string UpdNotificationAsTask(System.Int32? notification_id,
                                                        System.DateTime? effective_dt,
                                                        System.Int16? template_id,
                                                        System.String notification_subject,
                                                        System.String notification_remarks,
                                                        System.String notification_status_cd,
                                                        System.DateTime? notification_status_dt,
                                                        System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            SqlParameter effective_dt_Parameter = ObjDBManager.CreateSqlParameter("effective_dt", effective_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_dt_Parameter);
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter notification_subject_Parameter = ObjDBManager.CreateSqlParameter("notification_subject", notification_subject, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_subject_Parameter);
            SqlParameter notification_remarks_Parameter = ObjDBManager.CreateSqlParameter("notification_remarks", notification_remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_remarks_Parameter);
            SqlParameter notification_status_cd_Parameter = ObjDBManager.CreateSqlParameter("notification_status_cd", notification_status_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_status_cd_Parameter);
            SqlParameter notification_status_dt_Parameter = ObjDBManager.CreateSqlParameter("notification_status_dt", notification_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(notification_status_dt_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdNotification", sqlParameters);

            return taskString;
        }



        public DataSet Updnotification_addressees(System.Int16? template_id,
                                                                System.String addressee_txt,
                                                                System.String addressee_type)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter addressee_txt_Parameter = ObjDBManager.CreateSqlParameter("addressee_txt", addressee_txt, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(addressee_txt_Parameter);
            SqlParameter addressee_type_Parameter = ObjDBManager.CreateSqlParameter("addressee_type", addressee_type, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(addressee_type_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Updnotification_addressees", sqlParameters);

            return dset;
        }

        public string Updnotification_addresseesAsTask(System.Int16? template_id,
                                                                    System.String addressee_txt,
                                                                    System.String addressee_type)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter addressee_txt_Parameter = ObjDBManager.CreateSqlParameter("addressee_txt", addressee_txt, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(addressee_txt_Parameter);
            SqlParameter addressee_type_Parameter = ObjDBManager.CreateSqlParameter("addressee_type", addressee_type, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(addressee_type_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Updnotification_addressees", sqlParameters);

            return taskString;
        }



        public DataSet Updnotification_addressees_Edit(System.Int32? addressee_id,
                                                                    System.Int32? notification_id,
                                                                    System.String addressee_txt,
                                                                    System.String addressee_type)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter addressee_id_Parameter = ObjDBManager.CreateSqlParameter("addressee_id", addressee_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(addressee_id_Parameter);
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            SqlParameter addressee_txt_Parameter = ObjDBManager.CreateSqlParameter("addressee_txt", addressee_txt, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(addressee_txt_Parameter);
            SqlParameter addressee_type_Parameter = ObjDBManager.CreateSqlParameter("addressee_type", addressee_type, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(addressee_type_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Updnotification_addressees_Edit", sqlParameters);

            return dset;
        }

        public string Updnotification_addressees_EditAsTask(System.Int32? addressee_id,
                                                                        System.Int32? notification_id,
                                                                        System.String addressee_txt,
                                                                        System.String addressee_type)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter addressee_id_Parameter = ObjDBManager.CreateSqlParameter("addressee_id", addressee_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(addressee_id_Parameter);
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            SqlParameter addressee_txt_Parameter = ObjDBManager.CreateSqlParameter("addressee_txt", addressee_txt, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(addressee_txt_Parameter);
            SqlParameter addressee_type_Parameter = ObjDBManager.CreateSqlParameter("addressee_type", addressee_type, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(addressee_type_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Updnotification_addressees_Edit", sqlParameters);

            return taskString;
        }



        public DataSet Updnotification_template_paragraphs(System.Int16? template_id,
                                                                        System.Int16? template_para_sq,
                                                                        System.String template_para,
                                                                        System.Int16? Oldtemplate_para_sq)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter template_para_sq_Parameter = ObjDBManager.CreateSqlParameter("template_para_sq", template_para_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_para_sq_Parameter);
            SqlParameter template_para_Parameter = ObjDBManager.CreateSqlParameter("template_para", template_para, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(template_para_Parameter);
            SqlParameter Oldtemplate_para_sq_Parameter = ObjDBManager.CreateSqlParameter("Oldtemplate_para_sq", Oldtemplate_para_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(Oldtemplate_para_sq_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Updnotification_template_paragraphs", sqlParameters);

            return dset;
        }

        public string Updnotification_template_paragraphsAsTask(System.Int16? template_id,
                                                                            System.Int16? template_para_sq,
                                                                            System.String template_para,
                                                                            System.Int16? Oldtemplate_para_sq)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter template_para_sq_Parameter = ObjDBManager.CreateSqlParameter("template_para_sq", template_para_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_para_sq_Parameter);
            SqlParameter template_para_Parameter = ObjDBManager.CreateSqlParameter("template_para", template_para, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(template_para_Parameter);
            SqlParameter Oldtemplate_para_sq_Parameter = ObjDBManager.CreateSqlParameter("Oldtemplate_para_sq", Oldtemplate_para_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(Oldtemplate_para_sq_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Updnotification_template_paragraphs", sqlParameters);

            return taskString;
        }



        public DataSet Updnotification_templates(System.Int16? template_id,
                                                            System.String template_nm,
                                                            System.String template_subject,
                                                            System.String can_use_for_multiple_sewadars,
                                                            System.DateTime? effective_from,
                                                            System.DateTime? effective_till,
                                                            System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter template_nm_Parameter = ObjDBManager.CreateSqlParameter("template_nm", template_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(template_nm_Parameter);
            SqlParameter template_subject_Parameter = ObjDBManager.CreateSqlParameter("template_subject", template_subject, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(template_subject_Parameter);
            SqlParameter can_use_for_multiple_sewadars_Parameter = ObjDBManager.CreateSqlParameter("can_use_for_multiple_sewadars", can_use_for_multiple_sewadars, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(can_use_for_multiple_sewadars_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Updnotification_templates", sqlParameters);

            return dset;
        }

        public string Updnotification_templatesAsTask(System.Int16? template_id,
                                                                    System.String template_nm,
                                                                    System.String template_subject,
                                                                    System.String can_use_for_multiple_sewadars,
                                                                    System.DateTime? effective_from,
                                                                    System.DateTime? effective_till,
                                                                    System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter template_id_Parameter = ObjDBManager.CreateSqlParameter("template_id", template_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(template_id_Parameter);
            SqlParameter template_nm_Parameter = ObjDBManager.CreateSqlParameter("template_nm", template_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(template_nm_Parameter);
            SqlParameter template_subject_Parameter = ObjDBManager.CreateSqlParameter("template_subject", template_subject, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(template_subject_Parameter);
            SqlParameter can_use_for_multiple_sewadars_Parameter = ObjDBManager.CreateSqlParameter("can_use_for_multiple_sewadars", can_use_for_multiple_sewadars, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(can_use_for_multiple_sewadars_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Updnotification_templates", sqlParameters);

            return taskString;
        }



        public DataSet Updnotifications_paragraphs(System.Int32? notification_id,
                                                                System.Int16? notification_para_sq,
                                                                System.String notification_para,
                                                                System.Int16? Oldnotification_para_sq)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            SqlParameter notification_para_sq_Parameter = ObjDBManager.CreateSqlParameter("notification_para_sq", notification_para_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(notification_para_sq_Parameter);
            SqlParameter notification_para_Parameter = ObjDBManager.CreateSqlParameter("notification_para", notification_para, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_para_Parameter);
            SqlParameter Oldnotification_para_sq_Parameter = ObjDBManager.CreateSqlParameter("Oldnotification_para_sq", Oldnotification_para_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(Oldnotification_para_sq_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Updnotifications_paragraphs", sqlParameters);

            return dset;
        }

        public string Updnotifications_paragraphsAsTask(System.Int32? notification_id,
                                                                    System.Int16? notification_para_sq,
                                                                    System.String notification_para,
                                                                    System.Int16? Oldnotification_para_sq)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter notification_id_Parameter = ObjDBManager.CreateSqlParameter("notification_id", notification_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(notification_id_Parameter);
            SqlParameter notification_para_sq_Parameter = ObjDBManager.CreateSqlParameter("notification_para_sq", notification_para_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(notification_para_sq_Parameter);
            SqlParameter notification_para_Parameter = ObjDBManager.CreateSqlParameter("notification_para", notification_para, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(notification_para_Parameter);
            SqlParameter Oldnotification_para_sq_Parameter = ObjDBManager.CreateSqlParameter("Oldnotification_para_sq", Oldnotification_para_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(Oldnotification_para_sq_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Updnotifications_paragraphs", sqlParameters);

            return taskString;
        }



        public DataSet UpdNotInsuredReasons(System.Int16? not_insured_reason_id,
                                                        System.String not_insured_reason_cd,
                                                        System.String not_insured_reason_nm,
                                                        System.DateTime? effective_from,
                                                        System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter not_insured_reason_id_Parameter = ObjDBManager.CreateSqlParameter("not_insured_reason_id", not_insured_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(not_insured_reason_id_Parameter);
            SqlParameter not_insured_reason_cd_Parameter = ObjDBManager.CreateSqlParameter("not_insured_reason_cd", not_insured_reason_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(not_insured_reason_cd_Parameter);
            SqlParameter not_insured_reason_nm_Parameter = ObjDBManager.CreateSqlParameter("not_insured_reason_nm", not_insured_reason_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(not_insured_reason_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdNotInsuredReasons", sqlParameters);

            return dset;
        }

        public string UpdNotInsuredReasonsAsTask(System.Int16? not_insured_reason_id,
                                                            System.String not_insured_reason_cd,
                                                            System.String not_insured_reason_nm,
                                                            System.DateTime? effective_from,
                                                            System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter not_insured_reason_id_Parameter = ObjDBManager.CreateSqlParameter("not_insured_reason_id", not_insured_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(not_insured_reason_id_Parameter);
            SqlParameter not_insured_reason_cd_Parameter = ObjDBManager.CreateSqlParameter("not_insured_reason_cd", not_insured_reason_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(not_insured_reason_cd_Parameter);
            SqlParameter not_insured_reason_nm_Parameter = ObjDBManager.CreateSqlParameter("not_insured_reason_nm", not_insured_reason_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(not_insured_reason_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdNotInsuredReasons", sqlParameters);

            return taskString;
        }



        public DataSet UpdPerson_Status(System.Int16? person_status_id,
                                                    System.String person_status_cd,
                                                    System.String person_status_nm,
                                                    System.String is_active,
                                                    System.String status_reason_need,
                                                    System.Byte? future_days,
                                                    System.String remarks,
                                                    System.DateTime? effective_from,
                                                    System.DateTime? effective_till,
                                                    System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter person_status_cd_Parameter = ObjDBManager.CreateSqlParameter("person_status_cd", person_status_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_cd_Parameter);
            SqlParameter person_status_nm_Parameter = ObjDBManager.CreateSqlParameter("person_status_nm", person_status_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_nm_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            SqlParameter status_reason_need_Parameter = ObjDBManager.CreateSqlParameter("status_reason_need", status_reason_need, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(status_reason_need_Parameter);
            SqlParameter future_days_Parameter = ObjDBManager.CreateSqlParameter("future_days", future_days, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(future_days_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdPerson_Status", sqlParameters);

            return dset;
        }

        public string UpdPerson_StatusAsTask(System.Int16? person_status_id,
                                                        System.String person_status_cd,
                                                        System.String person_status_nm,
                                                        System.String is_active,
                                                        System.String status_reason_need,
                                                        System.Byte? future_days,
                                                        System.String remarks,
                                                        System.DateTime? effective_from,
                                                        System.DateTime? effective_till,
                                                        System.Byte[] txn_ts)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter person_status_cd_Parameter = ObjDBManager.CreateSqlParameter("person_status_cd", person_status_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_cd_Parameter);
            SqlParameter person_status_nm_Parameter = ObjDBManager.CreateSqlParameter("person_status_nm", person_status_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_nm_Parameter);
            SqlParameter is_active_Parameter = ObjDBManager.CreateSqlParameter("is_active", is_active, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_active_Parameter);
            SqlParameter status_reason_need_Parameter = ObjDBManager.CreateSqlParameter("status_reason_need", status_reason_need, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(status_reason_need_Parameter);
            SqlParameter future_days_Parameter = ObjDBManager.CreateSqlParameter("future_days", future_days, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(future_days_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            SqlParameter txn_ts_Parameter = ObjDBManager.CreateSqlParameter("txn_ts", txn_ts, SqlDbType.Timestamp, ParameterDirection.Input);
            sqlParameters.Add(txn_ts_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdPerson_Status", sqlParameters);

            return taskString;
        }



        public DataSet UpdPerson_Status_Applicability(System.Int16? person_status_id,
                                                                    System.String person_type_cd,
                                                                    System.String is_application_access)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter person_type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_type_cd", person_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_type_cd_Parameter);
            SqlParameter is_application_access_Parameter = ObjDBManager.CreateSqlParameter("is_application_access", is_application_access, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_application_access_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdPerson_Status_Applicability", sqlParameters);

            return dset;
        }

        public string UpdPerson_Status_ApplicabilityAsTask(System.Int16? person_status_id,
                                                                        System.String person_type_cd,
                                                                        System.String is_application_access)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_id", person_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(person_status_id_Parameter);
            SqlParameter person_type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_type_cd", person_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_type_cd_Parameter);
            SqlParameter is_application_access_Parameter = ObjDBManager.CreateSqlParameter("is_application_access", is_application_access, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_application_access_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdPerson_Status_Applicability", sqlParameters);

            return taskString;
        }



        public DataSet UpdPerson_Status_Reasons(System.Int32? person_status_reason_id,
                                                            System.String person_status_reason_cd,
                                                            System.String person_status_reason_nm,
                                                            System.DateTime? effective_from,
                                                            System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_reason_id", person_status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_status_reason_id_Parameter);
            SqlParameter person_status_reason_cd_Parameter = ObjDBManager.CreateSqlParameter("person_status_reason_cd", person_status_reason_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_reason_cd_Parameter);
            SqlParameter person_status_reason_nm_Parameter = ObjDBManager.CreateSqlParameter("person_status_reason_nm", person_status_reason_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_reason_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdPerson_Status_Reasons", sqlParameters);

            return dset;
        }

        public string UpdPerson_Status_ReasonsAsTask(System.Int32? person_status_reason_id,
                                                                System.String person_status_reason_cd,
                                                                System.String person_status_reason_nm,
                                                                System.DateTime? effective_from,
                                                                System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("person_status_reason_id", person_status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_status_reason_id_Parameter);
            SqlParameter person_status_reason_cd_Parameter = ObjDBManager.CreateSqlParameter("person_status_reason_cd", person_status_reason_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_reason_cd_Parameter);
            SqlParameter person_status_reason_nm_Parameter = ObjDBManager.CreateSqlParameter("person_status_reason_nm", person_status_reason_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(person_status_reason_nm_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdPerson_Status_Reasons", sqlParameters);

            return taskString;
        }



        public DataSet UpdPersonBankDetails(System.Int32? person_id,
                                                        System.String bank_nm,
                                                        System.String bank_account_cd)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter bank_nm_Parameter = ObjDBManager.CreateSqlParameter("bank_nm", bank_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(bank_nm_Parameter);
            SqlParameter bank_account_cd_Parameter = ObjDBManager.CreateSqlParameter("bank_account_cd", bank_account_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(bank_account_cd_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdPersonBankDetails", sqlParameters);

            return dset;
        }

        public string UpdPersonBankDetailsAsTask(System.Int32? person_id,
                                                            System.String bank_nm,
                                                            System.String bank_account_cd)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter bank_nm_Parameter = ObjDBManager.CreateSqlParameter("bank_nm", bank_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(bank_nm_Parameter);
            SqlParameter bank_account_cd_Parameter = ObjDBManager.CreateSqlParameter("bank_account_cd", bank_account_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(bank_account_cd_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdPersonBankDetails", sqlParameters);

            return taskString;
        }



        public DataSet UpdPersonPreviousSewaDetailsSequenceNo(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdPersonPreviousSewaDetailsSequenceNo", sqlParameters);

            return dset;
        }

        public string UpdPersonPreviousSewaDetailsSequenceNoAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdPersonPreviousSewaDetailsSequenceNo", sqlParameters);

            return taskString;
        }



        public DataSet UpdPersons_Complaints(System.Int32? person_id,
                                                        System.DateTime? complaint_dtm,
                                                        System.String complaint_dsc,
                                                        System.DateTime? oldcomplaint_dtm,
                                                        System.String action_taken)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter complaint_dtm_Parameter = ObjDBManager.CreateSqlParameter("complaint_dtm", complaint_dtm, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(complaint_dtm_Parameter);
            SqlParameter complaint_dsc_Parameter = ObjDBManager.CreateSqlParameter("complaint_dsc", complaint_dsc, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(complaint_dsc_Parameter);
            SqlParameter oldcomplaint_dtm_Parameter = ObjDBManager.CreateSqlParameter("oldcomplaint_dtm", oldcomplaint_dtm, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(oldcomplaint_dtm_Parameter);
            SqlParameter action_taken_Parameter = ObjDBManager.CreateSqlParameter("action_taken", action_taken, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(action_taken_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdPersons_Complaints", sqlParameters);

            return dset;
        }

        public string UpdPersons_ComplaintsAsTask(System.Int32? person_id,
                                                                System.DateTime? complaint_dtm,
                                                                System.String complaint_dsc,
                                                                System.DateTime? oldcomplaint_dtm,
                                                                System.String action_taken)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter complaint_dtm_Parameter = ObjDBManager.CreateSqlParameter("complaint_dtm", complaint_dtm, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(complaint_dtm_Parameter);
            SqlParameter complaint_dsc_Parameter = ObjDBManager.CreateSqlParameter("complaint_dsc", complaint_dsc, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(complaint_dsc_Parameter);
            SqlParameter oldcomplaint_dtm_Parameter = ObjDBManager.CreateSqlParameter("oldcomplaint_dtm", oldcomplaint_dtm, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(oldcomplaint_dtm_Parameter);
            SqlParameter action_taken_Parameter = ObjDBManager.CreateSqlParameter("action_taken", action_taken, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(action_taken_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdPersons_Complaints", sqlParameters);

            return taskString;
        }



        public DataSet UpdPersons_confidential_remarks(System.Int32? person_id,
                                                                    System.String remarks,
                                                                    System.String OldRemarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter OldRemarks_Parameter = ObjDBManager.CreateSqlParameter("OldRemarks", OldRemarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(OldRemarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdPersons_confidential_remarks", sqlParameters);

            return dset;
        }

        public string UpdPersons_confidential_remarksAsTask(System.Int32? person_id,
                                                                        System.String remarks,
                                                                        System.String OldRemarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter OldRemarks_Parameter = ObjDBManager.CreateSqlParameter("OldRemarks", OldRemarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(OldRemarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdPersons_confidential_remarks", sqlParameters);

            return taskString;
        }



        public DataSet UpdPersons_dependants(System.Int32? person_id,
                                                        System.String person_Type_cd,
                                                        System.String first_nm,
                                                        System.String middle_nm,
                                                        System.String last_nm,
                                                        System.String short_nm,
                                                        System.String gender,
                                                        System.String marital_status,
                                                        System.DateTime? birth_dt,
                                                        System.String is_foreign_initiate,
                                                        System.Int32? initiation_id,
                                                        System.Int16? status_id,
                                                        System.DateTime? status_dt,
                                                        System.Int32? status_reason_id,
                                                        System.Int32? dependant_id,
                                                        System.Int16? dependant_no,
                                                        System.Int16? dependant_sq,
                                                        System.Int16? relationship_id,
                                                        System.String is_dependant,
                                                        System.String is_doing_sewa,
                                                        System.String is_staying_at_dera,
                                                        System.Int16? institution_id,
                                                        System.String occupation,
                                                        System.String remarks,
                                                        System.Int16? qualification_id,
                                                        System.Int16? qlfctn_subject_id,
                                                        System.Int16? qualification_year,
                                                        System.String institution_nm)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter person_Type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_Type_cd", person_Type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_Type_cd_Parameter);
            SqlParameter first_nm_Parameter = ObjDBManager.CreateSqlParameter("first_nm", first_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(first_nm_Parameter);
            SqlParameter middle_nm_Parameter = ObjDBManager.CreateSqlParameter("middle_nm", middle_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(middle_nm_Parameter);
            SqlParameter last_nm_Parameter = ObjDBManager.CreateSqlParameter("last_nm", last_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(last_nm_Parameter);
            SqlParameter short_nm_Parameter = ObjDBManager.CreateSqlParameter("short_nm", short_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(short_nm_Parameter);
            SqlParameter gender_Parameter = ObjDBManager.CreateSqlParameter("gender", gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(gender_Parameter);
            SqlParameter marital_status_Parameter = ObjDBManager.CreateSqlParameter("marital_status", marital_status, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(marital_status_Parameter);
            SqlParameter birth_dt_Parameter = ObjDBManager.CreateSqlParameter("birth_dt", birth_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(birth_dt_Parameter);
            SqlParameter is_foreign_initiate_Parameter = ObjDBManager.CreateSqlParameter("is_foreign_initiate", is_foreign_initiate, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_foreign_initiate_Parameter);
            SqlParameter initiation_id_Parameter = ObjDBManager.CreateSqlParameter("initiation_id", initiation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(initiation_id_Parameter);
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            SqlParameter status_dt_Parameter = ObjDBManager.CreateSqlParameter("status_dt", status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(status_dt_Parameter);
            SqlParameter status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("status_reason_id", status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(status_reason_id_Parameter);
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter dependant_no_Parameter = ObjDBManager.CreateSqlParameter("dependant_no", dependant_no, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(dependant_no_Parameter);
            SqlParameter dependant_sq_Parameter = ObjDBManager.CreateSqlParameter("dependant_sq", dependant_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(dependant_sq_Parameter);
            SqlParameter relationship_id_Parameter = ObjDBManager.CreateSqlParameter("relationship_id", relationship_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(relationship_id_Parameter);
            SqlParameter is_dependant_Parameter = ObjDBManager.CreateSqlParameter("is_dependant", is_dependant, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_dependant_Parameter);
            SqlParameter is_doing_sewa_Parameter = ObjDBManager.CreateSqlParameter("is_doing_sewa", is_doing_sewa, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_doing_sewa_Parameter);
            SqlParameter is_staying_at_dera_Parameter = ObjDBManager.CreateSqlParameter("is_staying_at_dera", is_staying_at_dera, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_staying_at_dera_Parameter);
            SqlParameter institution_id_Parameter = ObjDBManager.CreateSqlParameter("institution_id", institution_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(institution_id_Parameter);
            SqlParameter occupation_Parameter = ObjDBManager.CreateSqlParameter("occupation", occupation, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(occupation_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            SqlParameter qlfctn_subject_id_Parameter = ObjDBManager.CreateSqlParameter("qlfctn_subject_id", qlfctn_subject_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qlfctn_subject_id_Parameter);
            SqlParameter qualification_year_Parameter = ObjDBManager.CreateSqlParameter("qualification_year", qualification_year, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_year_Parameter);
            SqlParameter institution_nm_Parameter = ObjDBManager.CreateSqlParameter("institution_nm", institution_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_nm_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdPersons_dependants", sqlParameters);

            return dset;
        }

        public string UpdPersons_dependantsAsTask(System.Int32? person_id,
                                                                System.String person_Type_cd,
                                                                System.String first_nm,
                                                                System.String middle_nm,
                                                                System.String last_nm,
                                                                System.String short_nm,
                                                                System.String gender,
                                                                System.String marital_status,
                                                                System.DateTime? birth_dt,
                                                                System.String is_foreign_initiate,
                                                                System.Int32? initiation_id,
                                                                System.Int16? status_id,
                                                                System.DateTime? status_dt,
                                                                System.Int32? status_reason_id,
                                                                System.Int32? dependant_id,
                                                                System.Int16? dependant_no,
                                                                System.Int16? dependant_sq,
                                                                System.Int16? relationship_id,
                                                                System.String is_dependant,
                                                                System.String is_doing_sewa,
                                                                System.String is_staying_at_dera,
                                                                System.Int16? institution_id,
                                                                System.String occupation,
                                                                System.String remarks,
                                                                System.Int16? qualification_id,
                                                                System.Int16? qlfctn_subject_id,
                                                                System.Int16? qualification_year,
                                                                System.String institution_nm)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter person_Type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_Type_cd", person_Type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_Type_cd_Parameter);
            SqlParameter first_nm_Parameter = ObjDBManager.CreateSqlParameter("first_nm", first_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(first_nm_Parameter);
            SqlParameter middle_nm_Parameter = ObjDBManager.CreateSqlParameter("middle_nm", middle_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(middle_nm_Parameter);
            SqlParameter last_nm_Parameter = ObjDBManager.CreateSqlParameter("last_nm", last_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(last_nm_Parameter);
            SqlParameter short_nm_Parameter = ObjDBManager.CreateSqlParameter("short_nm", short_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(short_nm_Parameter);
            SqlParameter gender_Parameter = ObjDBManager.CreateSqlParameter("gender", gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(gender_Parameter);
            SqlParameter marital_status_Parameter = ObjDBManager.CreateSqlParameter("marital_status", marital_status, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(marital_status_Parameter);
            SqlParameter birth_dt_Parameter = ObjDBManager.CreateSqlParameter("birth_dt", birth_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(birth_dt_Parameter);
            SqlParameter is_foreign_initiate_Parameter = ObjDBManager.CreateSqlParameter("is_foreign_initiate", is_foreign_initiate, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_foreign_initiate_Parameter);
            SqlParameter initiation_id_Parameter = ObjDBManager.CreateSqlParameter("initiation_id", initiation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(initiation_id_Parameter);
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            SqlParameter status_dt_Parameter = ObjDBManager.CreateSqlParameter("status_dt", status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(status_dt_Parameter);
            SqlParameter status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("status_reason_id", status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(status_reason_id_Parameter);
            SqlParameter dependant_id_Parameter = ObjDBManager.CreateSqlParameter("dependant_id", dependant_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(dependant_id_Parameter);
            SqlParameter dependant_no_Parameter = ObjDBManager.CreateSqlParameter("dependant_no", dependant_no, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(dependant_no_Parameter);
            SqlParameter dependant_sq_Parameter = ObjDBManager.CreateSqlParameter("dependant_sq", dependant_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(dependant_sq_Parameter);
            SqlParameter relationship_id_Parameter = ObjDBManager.CreateSqlParameter("relationship_id", relationship_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(relationship_id_Parameter);
            SqlParameter is_dependant_Parameter = ObjDBManager.CreateSqlParameter("is_dependant", is_dependant, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_dependant_Parameter);
            SqlParameter is_doing_sewa_Parameter = ObjDBManager.CreateSqlParameter("is_doing_sewa", is_doing_sewa, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_doing_sewa_Parameter);
            SqlParameter is_staying_at_dera_Parameter = ObjDBManager.CreateSqlParameter("is_staying_at_dera", is_staying_at_dera, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_staying_at_dera_Parameter);
            SqlParameter institution_id_Parameter = ObjDBManager.CreateSqlParameter("institution_id", institution_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(institution_id_Parameter);
            SqlParameter occupation_Parameter = ObjDBManager.CreateSqlParameter("occupation", occupation, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(occupation_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            SqlParameter qlfctn_subject_id_Parameter = ObjDBManager.CreateSqlParameter("qlfctn_subject_id", qlfctn_subject_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qlfctn_subject_id_Parameter);
            SqlParameter qualification_year_Parameter = ObjDBManager.CreateSqlParameter("qualification_year", qualification_year, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_year_Parameter);
            SqlParameter institution_nm_Parameter = ObjDBManager.CreateSqlParameter("institution_nm", institution_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_nm_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdPersons_dependants", sqlParameters);

            return taskString;
        }



        public DataSet Updpersons_donatable_organs(System.Int32? person_id,
                                                                System.Int32? donatable_organ_id,
                                                                System.Int32? OldOrganID,
                                                                System.DateTime? consent_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter donatable_organ_id_Parameter = ObjDBManager.CreateSqlParameter("donatable_organ_id", donatable_organ_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(donatable_organ_id_Parameter);
            SqlParameter OldOrganID_Parameter = ObjDBManager.CreateSqlParameter("OldOrganID", OldOrganID, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(OldOrganID_Parameter);
            SqlParameter consent_dt_Parameter = ObjDBManager.CreateSqlParameter("consent_dt", consent_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(consent_dt_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("Updpersons_donatable_organs", sqlParameters);

            return dset;
        }

        public string Updpersons_donatable_organsAsTask(System.Int32? person_id,
                                                                    System.Int32? donatable_organ_id,
                                                                    System.Int32? OldOrganID,
                                                                    System.DateTime? consent_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter donatable_organ_id_Parameter = ObjDBManager.CreateSqlParameter("donatable_organ_id", donatable_organ_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(donatable_organ_id_Parameter);
            SqlParameter OldOrganID_Parameter = ObjDBManager.CreateSqlParameter("OldOrganID", OldOrganID, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(OldOrganID_Parameter);
            SqlParameter consent_dt_Parameter = ObjDBManager.CreateSqlParameter("consent_dt", consent_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(consent_dt_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("Updpersons_donatable_organs", sqlParameters);

            return taskString;
        }



        public DataSet UpdPersons_general_remarks(System.Int32? person_id,
                                                                System.String remarks,
                                                                System.String oldRemarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter oldRemarks_Parameter = ObjDBManager.CreateSqlParameter("oldRemarks", oldRemarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(oldRemarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdPersons_general_remarks", sqlParameters);

            return dset;
        }

        public string UpdPersons_general_remarksAsTask(System.Int32? person_id,
                                                                    System.String remarks,
                                                                    System.String oldRemarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter oldRemarks_Parameter = ObjDBManager.CreateSqlParameter("oldRemarks", oldRemarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(oldRemarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdPersons_general_remarks", sqlParameters);

            return taskString;
        }



        public DataSet UpdPersons_insurances(System.Int32? person_id,
                                                        System.String insurance_type,
                                                        System.Int16? not_insured_reason_id,
                                                        System.DateTime? effective_from,
                                                        System.DateTime? effective_till,
                                                        System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter insurance_type_Parameter = ObjDBManager.CreateSqlParameter("insurance_type", insurance_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_type_Parameter);
            SqlParameter not_insured_reason_id_Parameter = ObjDBManager.CreateSqlParameter("not_insured_reason_id", not_insured_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(not_insured_reason_id_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdPersons_insurances", sqlParameters);

            return dset;
        }

        public string UpdPersons_insurancesAsTask(System.Int32? person_id,
                                                                System.String insurance_type,
                                                                System.Int16? not_insured_reason_id,
                                                                System.DateTime? effective_from,
                                                                System.DateTime? effective_till,
                                                                System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter insurance_type_Parameter = ObjDBManager.CreateSqlParameter("insurance_type", insurance_type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(insurance_type_Parameter);
            SqlParameter not_insured_reason_id_Parameter = ObjDBManager.CreateSqlParameter("not_insured_reason_id", not_insured_reason_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(not_insured_reason_id_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdPersons_insurances", sqlParameters);

            return taskString;
        }



        public DataSet UpdPersonsDetails(System.Int32? person_id,
                                                    System.String person_type_cd,
                                                    System.String title,
                                                    System.String first_nm,
                                                    System.String middle_nm,
                                                    System.String last_nm,
                                                    System.String short_nm,
                                                    System.String gender,
                                                    System.String marital_status,
                                                    System.String fh_name_Type,
                                                    System.String father_husband_nm,
                                                    System.DateTime? birth_dt,
                                                    System.String is_foreign_initiate,
                                                    System.Int32? initiation_id,
                                                    System.Int32? file_no,
                                                    System.Int32? spouse_sewadar_id,
                                                    System.Int32? sponsor_sewadar_id,
                                                    System.String next_of_kin_nm,
                                                    System.Int16? next_of_kin_relation_id,
                                                    System.String initails,
                                                    System.String introduced_by)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter person_type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_type_cd", person_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_type_cd_Parameter);
            SqlParameter title_Parameter = ObjDBManager.CreateSqlParameter("title", title, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(title_Parameter);
            SqlParameter first_nm_Parameter = ObjDBManager.CreateSqlParameter("first_nm", first_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(first_nm_Parameter);
            SqlParameter middle_nm_Parameter = ObjDBManager.CreateSqlParameter("middle_nm", middle_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(middle_nm_Parameter);
            SqlParameter last_nm_Parameter = ObjDBManager.CreateSqlParameter("last_nm", last_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(last_nm_Parameter);
            SqlParameter short_nm_Parameter = ObjDBManager.CreateSqlParameter("short_nm", short_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(short_nm_Parameter);
            SqlParameter gender_Parameter = ObjDBManager.CreateSqlParameter("gender", gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(gender_Parameter);
            SqlParameter marital_status_Parameter = ObjDBManager.CreateSqlParameter("marital_status", marital_status, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(marital_status_Parameter);
            SqlParameter fh_name_Type_Parameter = ObjDBManager.CreateSqlParameter("fh_name_Type", fh_name_Type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(fh_name_Type_Parameter);
            SqlParameter father_husband_nm_Parameter = ObjDBManager.CreateSqlParameter("father_husband_nm", father_husband_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(father_husband_nm_Parameter);
            SqlParameter birth_dt_Parameter = ObjDBManager.CreateSqlParameter("birth_dt", birth_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(birth_dt_Parameter);
            SqlParameter is_foreign_initiate_Parameter = ObjDBManager.CreateSqlParameter("is_foreign_initiate", is_foreign_initiate, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_foreign_initiate_Parameter);
            SqlParameter initiation_id_Parameter = ObjDBManager.CreateSqlParameter("initiation_id", initiation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(initiation_id_Parameter);
            SqlParameter file_no_Parameter = ObjDBManager.CreateSqlParameter("file_no", file_no, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(file_no_Parameter);
            SqlParameter spouse_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("spouse_sewadar_id", spouse_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(spouse_sewadar_id_Parameter);
            SqlParameter sponsor_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sponsor_sewadar_id", sponsor_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sponsor_sewadar_id_Parameter);
            SqlParameter next_of_kin_nm_Parameter = ObjDBManager.CreateSqlParameter("next_of_kin_nm", next_of_kin_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(next_of_kin_nm_Parameter);
            SqlParameter next_of_kin_relation_id_Parameter = ObjDBManager.CreateSqlParameter("next_of_kin_relation_id", next_of_kin_relation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(next_of_kin_relation_id_Parameter);
            SqlParameter initails_Parameter = ObjDBManager.CreateSqlParameter("initails", initails, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(initails_Parameter);
            SqlParameter introduced_by_Parameter = ObjDBManager.CreateSqlParameter("introduced_by", introduced_by, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(introduced_by_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdPersonsDetails", sqlParameters);

            return dset;
        }

        public string UpdPersonsDetailsAsTask(System.Int32? person_id,
                                                            System.String person_type_cd,
                                                            System.String title,
                                                            System.String first_nm,
                                                            System.String middle_nm,
                                                            System.String last_nm,
                                                            System.String short_nm,
                                                            System.String gender,
                                                            System.String marital_status,
                                                            System.String fh_name_Type,
                                                            System.String father_husband_nm,
                                                            System.DateTime? birth_dt,
                                                            System.String is_foreign_initiate,
                                                            System.Int32? initiation_id,
                                                            System.Int32? file_no,
                                                            System.Int32? spouse_sewadar_id,
                                                            System.Int32? sponsor_sewadar_id,
                                                            System.String next_of_kin_nm,
                                                            System.Int16? next_of_kin_relation_id,
                                                            System.String initails,
                                                            System.String introduced_by)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter person_type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_type_cd", person_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_type_cd_Parameter);
            SqlParameter title_Parameter = ObjDBManager.CreateSqlParameter("title", title, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(title_Parameter);
            SqlParameter first_nm_Parameter = ObjDBManager.CreateSqlParameter("first_nm", first_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(first_nm_Parameter);
            SqlParameter middle_nm_Parameter = ObjDBManager.CreateSqlParameter("middle_nm", middle_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(middle_nm_Parameter);
            SqlParameter last_nm_Parameter = ObjDBManager.CreateSqlParameter("last_nm", last_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(last_nm_Parameter);
            SqlParameter short_nm_Parameter = ObjDBManager.CreateSqlParameter("short_nm", short_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(short_nm_Parameter);
            SqlParameter gender_Parameter = ObjDBManager.CreateSqlParameter("gender", gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(gender_Parameter);
            SqlParameter marital_status_Parameter = ObjDBManager.CreateSqlParameter("marital_status", marital_status, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(marital_status_Parameter);
            SqlParameter fh_name_Type_Parameter = ObjDBManager.CreateSqlParameter("fh_name_Type", fh_name_Type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(fh_name_Type_Parameter);
            SqlParameter father_husband_nm_Parameter = ObjDBManager.CreateSqlParameter("father_husband_nm", father_husband_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(father_husband_nm_Parameter);
            SqlParameter birth_dt_Parameter = ObjDBManager.CreateSqlParameter("birth_dt", birth_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(birth_dt_Parameter);
            SqlParameter is_foreign_initiate_Parameter = ObjDBManager.CreateSqlParameter("is_foreign_initiate", is_foreign_initiate, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_foreign_initiate_Parameter);
            SqlParameter initiation_id_Parameter = ObjDBManager.CreateSqlParameter("initiation_id", initiation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(initiation_id_Parameter);
            SqlParameter file_no_Parameter = ObjDBManager.CreateSqlParameter("file_no", file_no, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(file_no_Parameter);
            SqlParameter spouse_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("spouse_sewadar_id", spouse_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(spouse_sewadar_id_Parameter);
            SqlParameter sponsor_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sponsor_sewadar_id", sponsor_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sponsor_sewadar_id_Parameter);
            SqlParameter next_of_kin_nm_Parameter = ObjDBManager.CreateSqlParameter("next_of_kin_nm", next_of_kin_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(next_of_kin_nm_Parameter);
            SqlParameter next_of_kin_relation_id_Parameter = ObjDBManager.CreateSqlParameter("next_of_kin_relation_id", next_of_kin_relation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(next_of_kin_relation_id_Parameter);
            SqlParameter initails_Parameter = ObjDBManager.CreateSqlParameter("initails", initails, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(initails_Parameter);
            SqlParameter introduced_by_Parameter = ObjDBManager.CreateSqlParameter("introduced_by", introduced_by, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(introduced_by_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdPersonsDetails", sqlParameters);

            return taskString;
        }



        public DataSet UpdPersonsDocuments(System.Int32? person_id,
                                                        System.Int16? document_sq,
                                                        System.Int32? document_type_id,
                                                        System.String document_no,
                                                        System.DateTime? issue_dt,
                                                        System.DateTime? expiry_dt,
                                                        System.String issue_place,
                                                        System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter document_sq_Parameter = ObjDBManager.CreateSqlParameter("document_sq", document_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(document_sq_Parameter);
            SqlParameter document_type_id_Parameter = ObjDBManager.CreateSqlParameter("document_type_id", document_type_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(document_type_id_Parameter);
            SqlParameter document_no_Parameter = ObjDBManager.CreateSqlParameter("document_no", document_no, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(document_no_Parameter);
            SqlParameter issue_dt_Parameter = ObjDBManager.CreateSqlParameter("issue_dt", issue_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(issue_dt_Parameter);
            SqlParameter expiry_dt_Parameter = ObjDBManager.CreateSqlParameter("expiry_dt", expiry_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(expiry_dt_Parameter);
            SqlParameter issue_place_Parameter = ObjDBManager.CreateSqlParameter("issue_place", issue_place, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(issue_place_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdPersonsDocuments", sqlParameters);

            return dset;
        }

        public string UpdPersonsDocumentsAsTask(System.Int32? person_id,
                                                            System.Int16? document_sq,
                                                            System.Int32? document_type_id,
                                                            System.String document_no,
                                                            System.DateTime? issue_dt,
                                                            System.DateTime? expiry_dt,
                                                            System.String issue_place,
                                                            System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter document_sq_Parameter = ObjDBManager.CreateSqlParameter("document_sq", document_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(document_sq_Parameter);
            SqlParameter document_type_id_Parameter = ObjDBManager.CreateSqlParameter("document_type_id", document_type_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(document_type_id_Parameter);
            SqlParameter document_no_Parameter = ObjDBManager.CreateSqlParameter("document_no", document_no, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(document_no_Parameter);
            SqlParameter issue_dt_Parameter = ObjDBManager.CreateSqlParameter("issue_dt", issue_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(issue_dt_Parameter);
            SqlParameter expiry_dt_Parameter = ObjDBManager.CreateSqlParameter("expiry_dt", expiry_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(expiry_dt_Parameter);
            SqlParameter issue_place_Parameter = ObjDBManager.CreateSqlParameter("issue_place", issue_place, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(issue_place_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdPersonsDocuments", sqlParameters);

            return taskString;
        }



        public DataSet UpdPersonsQualifications(System.Int32? person_id,
                                                            System.Int16? qualification_sq,
                                                            System.Int16? qualification_id,
                                                            System.Int16? qlfctn_subject_id,
                                                            System.Int16? qualification_year,
                                                            System.String institution_nm,
                                                            System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter qualification_sq_Parameter = ObjDBManager.CreateSqlParameter("qualification_sq", qualification_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_sq_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            SqlParameter qlfctn_subject_id_Parameter = ObjDBManager.CreateSqlParameter("qlfctn_subject_id", qlfctn_subject_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qlfctn_subject_id_Parameter);
            SqlParameter qualification_year_Parameter = ObjDBManager.CreateSqlParameter("qualification_year", qualification_year, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_year_Parameter);
            SqlParameter institution_nm_Parameter = ObjDBManager.CreateSqlParameter("institution_nm", institution_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_nm_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdPersonsQualifications", sqlParameters);

            return dset;
        }

        public string UpdPersonsQualificationsAsTask(System.Int32? person_id,
                                                                System.Int16? qualification_sq,
                                                                System.Int16? qualification_id,
                                                                System.Int16? qlfctn_subject_id,
                                                                System.Int16? qualification_year,
                                                                System.String institution_nm,
                                                                System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter qualification_sq_Parameter = ObjDBManager.CreateSqlParameter("qualification_sq", qualification_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_sq_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            SqlParameter qlfctn_subject_id_Parameter = ObjDBManager.CreateSqlParameter("qlfctn_subject_id", qlfctn_subject_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qlfctn_subject_id_Parameter);
            SqlParameter qualification_year_Parameter = ObjDBManager.CreateSqlParameter("qualification_year", qualification_year, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_year_Parameter);
            SqlParameter institution_nm_Parameter = ObjDBManager.CreateSqlParameter("institution_nm", institution_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_nm_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdPersonsQualifications", sqlParameters);

            return taskString;
        }



        public DataSet UpdPersonsRelativesinSewa(System.Int32? person_id,
                                                            System.Int32? relative_sewadar_id,
                                                            System.Int16? relation_id,
                                                            System.Int32? Oldrelative_sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter relative_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("relative_sewadar_id", relative_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(relative_sewadar_id_Parameter);
            SqlParameter relation_id_Parameter = ObjDBManager.CreateSqlParameter("relation_id", relation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(relation_id_Parameter);
            SqlParameter Oldrelative_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("Oldrelative_sewadar_id", Oldrelative_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(Oldrelative_sewadar_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdPersonsRelativesinSewa", sqlParameters);

            return dset;
        }

        public string UpdPersonsRelativesinSewaAsTask(System.Int32? person_id,
                                                                    System.Int32? relative_sewadar_id,
                                                                    System.Int16? relation_id,
                                                                    System.Int32? Oldrelative_sewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter relative_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("relative_sewadar_id", relative_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(relative_sewadar_id_Parameter);
            SqlParameter relation_id_Parameter = ObjDBManager.CreateSqlParameter("relation_id", relation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(relation_id_Parameter);
            SqlParameter Oldrelative_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("Oldrelative_sewadar_id", Oldrelative_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(Oldrelative_sewadar_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdPersonsRelativesinSewa", sqlParameters);

            return taskString;
        }



        public DataSet UpdPersonsSkills(System.Int32? person_id,
                                                    System.Int16? skill_id,
                                                    System.Int16? OldSkill_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter skill_id_Parameter = ObjDBManager.CreateSqlParameter("skill_id", skill_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(skill_id_Parameter);
            SqlParameter OldSkill_id_Parameter = ObjDBManager.CreateSqlParameter("OldSkill_id", OldSkill_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(OldSkill_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdPersonsSkills", sqlParameters);

            return dset;
        }

        public string UpdPersonsSkillsAsTask(System.Int32? person_id,
                                                        System.Int16? skill_id,
                                                        System.Int16? OldSkill_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter skill_id_Parameter = ObjDBManager.CreateSqlParameter("skill_id", skill_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(skill_id_Parameter);
            SqlParameter OldSkill_id_Parameter = ObjDBManager.CreateSqlParameter("OldSkill_id", OldSkill_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(OldSkill_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdPersonsSkills", sqlParameters);

            return taskString;
        }



        public DataSet UpdPersonsWorkStatus(System.Int32? person_id,
                                                        System.String is_work_status_ok,
                                                        System.DateTime? work_status_report_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter is_work_status_ok_Parameter = ObjDBManager.CreateSqlParameter("is_work_status_ok", is_work_status_ok, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_work_status_ok_Parameter);
            SqlParameter work_status_report_dt_Parameter = ObjDBManager.CreateSqlParameter("work_status_report_dt", work_status_report_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(work_status_report_dt_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdPersonsWorkStatus", sqlParameters);

            return dset;
        }

        public string UpdPersonsWorkStatusAsTask(System.Int32? person_id,
                                                            System.String is_work_status_ok,
                                                            System.DateTime? work_status_report_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter is_work_status_ok_Parameter = ObjDBManager.CreateSqlParameter("is_work_status_ok", is_work_status_ok, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_work_status_ok_Parameter);
            SqlParameter work_status_report_dt_Parameter = ObjDBManager.CreateSqlParameter("work_status_report_dt", work_status_report_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(work_status_report_dt_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdPersonsWorkStatus", sqlParameters);

            return taskString;
        }



        public DataSet UpdPersonWorkExperienceDetailsSequence(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdPersonWorkExperienceDetailsSequence", sqlParameters);

            return dset;
        }

        public string UpdPersonWorkExperienceDetailsSequenceAsTask(System.Int32? person_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdPersonWorkExperienceDetailsSequence", sqlParameters);

            return taskString;
        }



        public DataSet UpdPreviousSewaDetails(System.Int32? person_id,
                                                            System.Int16? sewa_detail_sq,
                                                            System.DateTime? from_dt,
                                                            System.DateTime? from_dt_old,
                                                            System.DateTime? to_dt,
                                                            System.Int32? satsang_center_id,
                                                            System.String department,
                                                            System.String id_no,
                                                            System.String responsibility,
                                                            System.String reason_for_leaving)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter sewa_detail_sq_Parameter = ObjDBManager.CreateSqlParameter("sewa_detail_sq", sewa_detail_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(sewa_detail_sq_Parameter);
            SqlParameter from_dt_Parameter = ObjDBManager.CreateSqlParameter("from_dt", from_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_dt_Parameter);
            SqlParameter from_dt_old_Parameter = ObjDBManager.CreateSqlParameter("from_dt_old", from_dt_old, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_dt_old_Parameter);
            SqlParameter to_dt_Parameter = ObjDBManager.CreateSqlParameter("to_dt", to_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_dt_Parameter);
            SqlParameter satsang_center_id_Parameter = ObjDBManager.CreateSqlParameter("satsang_center_id", satsang_center_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(satsang_center_id_Parameter);
            SqlParameter department_Parameter = ObjDBManager.CreateSqlParameter("department", department, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(department_Parameter);
            SqlParameter id_no_Parameter = ObjDBManager.CreateSqlParameter("id_no", id_no, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(id_no_Parameter);
            SqlParameter responsibility_Parameter = ObjDBManager.CreateSqlParameter("responsibility", responsibility, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(responsibility_Parameter);
            SqlParameter reason_for_leaving_Parameter = ObjDBManager.CreateSqlParameter("reason_for_leaving", reason_for_leaving, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(reason_for_leaving_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdPreviousSewaDetails", sqlParameters);

            return dset;
        }

        public string UpdPreviousSewaDetailsAsTask(System.Int32? person_id,
                                                                System.Int16? sewa_detail_sq,
                                                                System.DateTime? from_dt,
                                                                System.DateTime? from_dt_old,
                                                                System.DateTime? to_dt,
                                                                System.Int32? satsang_center_id,
                                                                System.String department,
                                                                System.String id_no,
                                                                System.String responsibility,
                                                                System.String reason_for_leaving)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter sewa_detail_sq_Parameter = ObjDBManager.CreateSqlParameter("sewa_detail_sq", sewa_detail_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(sewa_detail_sq_Parameter);
            SqlParameter from_dt_Parameter = ObjDBManager.CreateSqlParameter("from_dt", from_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_dt_Parameter);
            SqlParameter from_dt_old_Parameter = ObjDBManager.CreateSqlParameter("from_dt_old", from_dt_old, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_dt_old_Parameter);
            SqlParameter to_dt_Parameter = ObjDBManager.CreateSqlParameter("to_dt", to_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_dt_Parameter);
            SqlParameter satsang_center_id_Parameter = ObjDBManager.CreateSqlParameter("satsang_center_id", satsang_center_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(satsang_center_id_Parameter);
            SqlParameter department_Parameter = ObjDBManager.CreateSqlParameter("department", department, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(department_Parameter);
            SqlParameter id_no_Parameter = ObjDBManager.CreateSqlParameter("id_no", id_no, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(id_no_Parameter);
            SqlParameter responsibility_Parameter = ObjDBManager.CreateSqlParameter("responsibility", responsibility, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(responsibility_Parameter);
            SqlParameter reason_for_leaving_Parameter = ObjDBManager.CreateSqlParameter("reason_for_leaving", reason_for_leaving, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(reason_for_leaving_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdPreviousSewaDetails", sqlParameters);

            return taskString;
        }



        public DataSet UpdResidentsORVisitorsDetails(System.Int32? person_id,
                                                                System.String person_type_cd,
                                                                System.String title,
                                                                System.String first_nm,
                                                                System.String middle_nm,
                                                                System.String last_nm,
                                                                System.String short_nm,
                                                                System.String gender,
                                                                System.String marital_status,
                                                                System.String fh_name_Type,
                                                                System.String father_husband_nm,
                                                                System.DateTime? birth_dt,
                                                                System.String is_foreign_initiate,
                                                                System.Int32? initiation_id,
                                                                System.String next_of_kin_nm,
                                                                System.Int16? next_of_kin_relation_id,
                                                                System.Int16? status_id,
                                                                System.Int32? status_reason_id,
                                                                System.DateTime? status_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter person_type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_type_cd", person_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_type_cd_Parameter);
            SqlParameter title_Parameter = ObjDBManager.CreateSqlParameter("title", title, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(title_Parameter);
            SqlParameter first_nm_Parameter = ObjDBManager.CreateSqlParameter("first_nm", first_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(first_nm_Parameter);
            SqlParameter middle_nm_Parameter = ObjDBManager.CreateSqlParameter("middle_nm", middle_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(middle_nm_Parameter);
            SqlParameter last_nm_Parameter = ObjDBManager.CreateSqlParameter("last_nm", last_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(last_nm_Parameter);
            SqlParameter short_nm_Parameter = ObjDBManager.CreateSqlParameter("short_nm", short_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(short_nm_Parameter);
            SqlParameter gender_Parameter = ObjDBManager.CreateSqlParameter("gender", gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(gender_Parameter);
            SqlParameter marital_status_Parameter = ObjDBManager.CreateSqlParameter("marital_status", marital_status, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(marital_status_Parameter);
            SqlParameter fh_name_Type_Parameter = ObjDBManager.CreateSqlParameter("fh_name_Type", fh_name_Type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(fh_name_Type_Parameter);
            SqlParameter father_husband_nm_Parameter = ObjDBManager.CreateSqlParameter("father_husband_nm", father_husband_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(father_husband_nm_Parameter);
            SqlParameter birth_dt_Parameter = ObjDBManager.CreateSqlParameter("birth_dt", birth_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(birth_dt_Parameter);
            SqlParameter is_foreign_initiate_Parameter = ObjDBManager.CreateSqlParameter("is_foreign_initiate", is_foreign_initiate, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_foreign_initiate_Parameter);
            SqlParameter initiation_id_Parameter = ObjDBManager.CreateSqlParameter("initiation_id", initiation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(initiation_id_Parameter);
            SqlParameter next_of_kin_nm_Parameter = ObjDBManager.CreateSqlParameter("next_of_kin_nm", next_of_kin_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(next_of_kin_nm_Parameter);
            SqlParameter next_of_kin_relation_id_Parameter = ObjDBManager.CreateSqlParameter("next_of_kin_relation_id", next_of_kin_relation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(next_of_kin_relation_id_Parameter);
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            SqlParameter status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("status_reason_id", status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(status_reason_id_Parameter);
            SqlParameter status_dt_Parameter = ObjDBManager.CreateSqlParameter("status_dt", status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(status_dt_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdResidentsORVisitorsDetails", sqlParameters);

            return dset;
        }

        public string UpdResidentsORVisitorsDetailsAsTask(System.Int32? person_id,
                                                                        System.String person_type_cd,
                                                                        System.String title,
                                                                        System.String first_nm,
                                                                        System.String middle_nm,
                                                                        System.String last_nm,
                                                                        System.String short_nm,
                                                                        System.String gender,
                                                                        System.String marital_status,
                                                                        System.String fh_name_Type,
                                                                        System.String father_husband_nm,
                                                                        System.DateTime? birth_dt,
                                                                        System.String is_foreign_initiate,
                                                                        System.Int32? initiation_id,
                                                                        System.String next_of_kin_nm,
                                                                        System.Int16? next_of_kin_relation_id,
                                                                        System.Int16? status_id,
                                                                        System.Int32? status_reason_id,
                                                                        System.DateTime? status_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter person_type_cd_Parameter = ObjDBManager.CreateSqlParameter("person_type_cd", person_type_cd, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(person_type_cd_Parameter);
            SqlParameter title_Parameter = ObjDBManager.CreateSqlParameter("title", title, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(title_Parameter);
            SqlParameter first_nm_Parameter = ObjDBManager.CreateSqlParameter("first_nm", first_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(first_nm_Parameter);
            SqlParameter middle_nm_Parameter = ObjDBManager.CreateSqlParameter("middle_nm", middle_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(middle_nm_Parameter);
            SqlParameter last_nm_Parameter = ObjDBManager.CreateSqlParameter("last_nm", last_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(last_nm_Parameter);
            SqlParameter short_nm_Parameter = ObjDBManager.CreateSqlParameter("short_nm", short_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(short_nm_Parameter);
            SqlParameter gender_Parameter = ObjDBManager.CreateSqlParameter("gender", gender, SqlDbType.Char, ParameterDirection.Input);
            sqlParameters.Add(gender_Parameter);
            SqlParameter marital_status_Parameter = ObjDBManager.CreateSqlParameter("marital_status", marital_status, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(marital_status_Parameter);
            SqlParameter fh_name_Type_Parameter = ObjDBManager.CreateSqlParameter("fh_name_Type", fh_name_Type, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(fh_name_Type_Parameter);
            SqlParameter father_husband_nm_Parameter = ObjDBManager.CreateSqlParameter("father_husband_nm", father_husband_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(father_husband_nm_Parameter);
            SqlParameter birth_dt_Parameter = ObjDBManager.CreateSqlParameter("birth_dt", birth_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(birth_dt_Parameter);
            SqlParameter is_foreign_initiate_Parameter = ObjDBManager.CreateSqlParameter("is_foreign_initiate", is_foreign_initiate, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(is_foreign_initiate_Parameter);
            SqlParameter initiation_id_Parameter = ObjDBManager.CreateSqlParameter("initiation_id", initiation_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(initiation_id_Parameter);
            SqlParameter next_of_kin_nm_Parameter = ObjDBManager.CreateSqlParameter("next_of_kin_nm", next_of_kin_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(next_of_kin_nm_Parameter);
            SqlParameter next_of_kin_relation_id_Parameter = ObjDBManager.CreateSqlParameter("next_of_kin_relation_id", next_of_kin_relation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(next_of_kin_relation_id_Parameter);
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            SqlParameter status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("status_reason_id", status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(status_reason_id_Parameter);
            SqlParameter status_dt_Parameter = ObjDBManager.CreateSqlParameter("status_dt", status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(status_dt_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdResidentsORVisitorsDetails", sqlParameters);

            return taskString;
        }



        public DataSet UpdResidentsORVisitorsDocuments(System.Int32? person_id,
                                                                    System.Int16? document_sq,
                                                                    System.Int32? document_type_id,
                                                                    System.String document_no,
                                                                    System.DateTime? issue_dt,
                                                                    System.DateTime? expiry_dt,
                                                                    System.String issue_place,
                                                                    System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter document_sq_Parameter = ObjDBManager.CreateSqlParameter("document_sq", document_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(document_sq_Parameter);
            SqlParameter document_type_id_Parameter = ObjDBManager.CreateSqlParameter("document_type_id", document_type_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(document_type_id_Parameter);
            SqlParameter document_no_Parameter = ObjDBManager.CreateSqlParameter("document_no", document_no, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(document_no_Parameter);
            SqlParameter issue_dt_Parameter = ObjDBManager.CreateSqlParameter("issue_dt", issue_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(issue_dt_Parameter);
            SqlParameter expiry_dt_Parameter = ObjDBManager.CreateSqlParameter("expiry_dt", expiry_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(expiry_dt_Parameter);
            SqlParameter issue_place_Parameter = ObjDBManager.CreateSqlParameter("issue_place", issue_place, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(issue_place_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdResidentsORVisitorsDocuments", sqlParameters);

            return dset;
        }

        public string UpdResidentsORVisitorsDocumentsAsTask(System.Int32? person_id,
                                                                        System.Int16? document_sq,
                                                                        System.Int32? document_type_id,
                                                                        System.String document_no,
                                                                        System.DateTime? issue_dt,
                                                                        System.DateTime? expiry_dt,
                                                                        System.String issue_place,
                                                                        System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter document_sq_Parameter = ObjDBManager.CreateSqlParameter("document_sq", document_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(document_sq_Parameter);
            SqlParameter document_type_id_Parameter = ObjDBManager.CreateSqlParameter("document_type_id", document_type_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(document_type_id_Parameter);
            SqlParameter document_no_Parameter = ObjDBManager.CreateSqlParameter("document_no", document_no, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(document_no_Parameter);
            SqlParameter issue_dt_Parameter = ObjDBManager.CreateSqlParameter("issue_dt", issue_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(issue_dt_Parameter);
            SqlParameter expiry_dt_Parameter = ObjDBManager.CreateSqlParameter("expiry_dt", expiry_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(expiry_dt_Parameter);
            SqlParameter issue_place_Parameter = ObjDBManager.CreateSqlParameter("issue_place", issue_place, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(issue_place_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdResidentsORVisitorsDocuments", sqlParameters);

            return taskString;
        }



        public DataSet UpdResidentsORVisitorsQualifications(System.Int32? person_id,
                                                                        System.Int16? qualification_sq,
                                                                        System.Int16? qualification_id,
                                                                        System.Int16? qlfctn_subject_id,
                                                                        System.Int16? qualification_year,
                                                                        System.String institution_nm,
                                                                        System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter qualification_sq_Parameter = ObjDBManager.CreateSqlParameter("qualification_sq", qualification_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_sq_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            SqlParameter qlfctn_subject_id_Parameter = ObjDBManager.CreateSqlParameter("qlfctn_subject_id", qlfctn_subject_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qlfctn_subject_id_Parameter);
            SqlParameter qualification_year_Parameter = ObjDBManager.CreateSqlParameter("qualification_year", qualification_year, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_year_Parameter);
            SqlParameter institution_nm_Parameter = ObjDBManager.CreateSqlParameter("institution_nm", institution_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_nm_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdResidentsORVisitorsQualifications", sqlParameters);

            return dset;
        }

        public string UpdResidentsORVisitorsQualificationsAsTask(System.Int32? person_id,
                                                                            System.Int16? qualification_sq,
                                                                            System.Int16? qualification_id,
                                                                            System.Int16? qlfctn_subject_id,
                                                                            System.Int16? qualification_year,
                                                                            System.String institution_nm,
                                                                            System.String remarks)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter qualification_sq_Parameter = ObjDBManager.CreateSqlParameter("qualification_sq", qualification_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_sq_Parameter);
            SqlParameter qualification_id_Parameter = ObjDBManager.CreateSqlParameter("qualification_id", qualification_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_id_Parameter);
            SqlParameter qlfctn_subject_id_Parameter = ObjDBManager.CreateSqlParameter("qlfctn_subject_id", qlfctn_subject_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qlfctn_subject_id_Parameter);
            SqlParameter qualification_year_Parameter = ObjDBManager.CreateSqlParameter("qualification_year", qualification_year, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(qualification_year_Parameter);
            SqlParameter institution_nm_Parameter = ObjDBManager.CreateSqlParameter("institution_nm", institution_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(institution_nm_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdResidentsORVisitorsQualifications", sqlParameters);

            return taskString;
        }



        public DataSet UpdResidentsORVisitorsRelativesinSewa(System.Int32? person_id,
                                                                        System.Int32? relative_sewadar_id,
                                                                        System.Int16? relation_id,
                                                                        System.Int32? OldRelativeSewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter relative_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("relative_sewadar_id", relative_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(relative_sewadar_id_Parameter);
            SqlParameter relation_id_Parameter = ObjDBManager.CreateSqlParameter("relation_id", relation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(relation_id_Parameter);
            SqlParameter OldRelativeSewadar_id_Parameter = ObjDBManager.CreateSqlParameter("OldRelativeSewadar_id", OldRelativeSewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(OldRelativeSewadar_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdResidentsORVisitorsRelativesinSewa", sqlParameters);

            return dset;
        }

        public string UpdResidentsORVisitorsRelativesinSewaAsTask(System.Int32? person_id,
                                                                                System.Int32? relative_sewadar_id,
                                                                                System.Int16? relation_id,
                                                                                System.Int32? OldRelativeSewadar_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter relative_sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("relative_sewadar_id", relative_sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(relative_sewadar_id_Parameter);
            SqlParameter relation_id_Parameter = ObjDBManager.CreateSqlParameter("relation_id", relation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(relation_id_Parameter);
            SqlParameter OldRelativeSewadar_id_Parameter = ObjDBManager.CreateSqlParameter("OldRelativeSewadar_id", OldRelativeSewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(OldRelativeSewadar_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdResidentsORVisitorsRelativesinSewa", sqlParameters);

            return taskString;
        }



        public DataSet UpdResidentsORVisitorsSkills(System.Int32? person_id,
                                                                System.Int16? skill_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter skill_id_Parameter = ObjDBManager.CreateSqlParameter("skill_id", skill_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(skill_id_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdResidentsORVisitorsSkills", sqlParameters);

            return dset;
        }

        public string UpdResidentsORVisitorsSkillsAsTask(System.Int32? person_id,
                                                                    System.Int16? skill_id)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter skill_id_Parameter = ObjDBManager.CreateSqlParameter("skill_id", skill_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(skill_id_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdResidentsORVisitorsSkills", sqlParameters);

            return taskString;
        }



        public DataSet UpdSecurityClearance(System.Int32? person_id,
                                                        System.String security_status,
                                                        System.DateTime? security_status_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter security_status_Parameter = ObjDBManager.CreateSqlParameter("security_status", security_status, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(security_status_Parameter);
            SqlParameter security_status_dt_Parameter = ObjDBManager.CreateSqlParameter("security_status_dt", security_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(security_status_dt_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdSecurityClearance", sqlParameters);

            return dset;
        }

        public string UpdSecurityClearanceAsTask(System.Int32? person_id,
                                                            System.String security_status,
                                                            System.DateTime? security_status_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter security_status_Parameter = ObjDBManager.CreateSqlParameter("security_status", security_status, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(security_status_Parameter);
            SqlParameter security_status_dt_Parameter = ObjDBManager.CreateSqlParameter("security_status_dt", security_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(security_status_dt_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdSecurityClearance", sqlParameters);

            return taskString;
        }



        public DataSet UpdSewadarContractDetails(System.Int32? sewadar_id,
                                                            System.Int16? contract_id,
                                                            System.Int16? month_from,
                                                            System.Int16? old_month_from,
                                                            System.Int16? month_till,
                                                            System.Int32? amount)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter contract_id_Parameter = ObjDBManager.CreateSqlParameter("contract_id", contract_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(contract_id_Parameter);
            SqlParameter month_from_Parameter = ObjDBManager.CreateSqlParameter("month_from", month_from, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(month_from_Parameter);
            SqlParameter old_month_from_Parameter = ObjDBManager.CreateSqlParameter("old_month_from", old_month_from, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(old_month_from_Parameter);
            SqlParameter month_till_Parameter = ObjDBManager.CreateSqlParameter("month_till", month_till, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(month_till_Parameter);
            SqlParameter amount_Parameter = ObjDBManager.CreateSqlParameter("amount", amount, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(amount_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdSewadarContractDetails", sqlParameters);

            return dset;
        }

        public string UpdSewadarContractDetailsAsTask(System.Int32? sewadar_id,
                                                                    System.Int16? contract_id,
                                                                    System.Int16? month_from,
                                                                    System.Int16? old_month_from,
                                                                    System.Int16? month_till,
                                                                    System.Int32? amount)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter contract_id_Parameter = ObjDBManager.CreateSqlParameter("contract_id", contract_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(contract_id_Parameter);
            SqlParameter month_from_Parameter = ObjDBManager.CreateSqlParameter("month_from", month_from, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(month_from_Parameter);
            SqlParameter old_month_from_Parameter = ObjDBManager.CreateSqlParameter("old_month_from", old_month_from, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(old_month_from_Parameter);
            SqlParameter month_till_Parameter = ObjDBManager.CreateSqlParameter("month_till", month_till, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(month_till_Parameter);
            SqlParameter amount_Parameter = ObjDBManager.CreateSqlParameter("amount", amount, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(amount_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdSewadarContractDetails", sqlParameters);

            return taskString;
        }



        public DataSet UpdSewadarContracts(System.Int32? sewadar_id,
                                                        System.Int16? contract_id,
                                                        System.Byte? contract_years,
                                                        System.String remarks,
                                                        System.DateTime? effective_from,
                                                        System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter contract_id_Parameter = ObjDBManager.CreateSqlParameter("contract_id", contract_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(contract_id_Parameter);
            SqlParameter contract_years_Parameter = ObjDBManager.CreateSqlParameter("contract_years", contract_years, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(contract_years_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdSewadarContracts", sqlParameters);

            return dset;
        }

        public string UpdSewadarContractsAsTask(System.Int32? sewadar_id,
                                                            System.Int16? contract_id,
                                                            System.Byte? contract_years,
                                                            System.String remarks,
                                                            System.DateTime? effective_from,
                                                            System.DateTime? effective_till)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter contract_id_Parameter = ObjDBManager.CreateSqlParameter("contract_id", contract_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(contract_id_Parameter);
            SqlParameter contract_years_Parameter = ObjDBManager.CreateSqlParameter("contract_years", contract_years, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(contract_years_Parameter);
            SqlParameter remarks_Parameter = ObjDBManager.CreateSqlParameter("remarks", remarks, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(remarks_Parameter);
            SqlParameter effective_from_Parameter = ObjDBManager.CreateSqlParameter("effective_from", effective_from, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_from_Parameter);
            SqlParameter effective_till_Parameter = ObjDBManager.CreateSqlParameter("effective_till", effective_till, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(effective_till_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdSewadarContracts", sqlParameters);

            return taskString;
        }



        public DataSet UpdSewadarOfficeInformation(System.Int32? person_id,
                                                                System.Int16? working_unit_id,
                                                                System.Int16? designation_id,
                                                                System.Byte? sewadar_type_id,
                                                                System.Int16? grade_id,
                                                                System.Int32? status_reason_id,
                                                                System.DateTime? trial_dt,
                                                                System.DateTime? joining_dt,
                                                                System.String payment_mode,
                                                                System.String bank_nm,
                                                                System.String bank_account_cd,
                                                                System.Byte? accmdtn_for_adults,
                                                                System.Byte? accmdtn_for_children,
                                                                System.Int16? status_id,
                                                                System.DateTime? status_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter working_unit_id_Parameter = ObjDBManager.CreateSqlParameter("working_unit_id", working_unit_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(working_unit_id_Parameter);
            SqlParameter designation_id_Parameter = ObjDBManager.CreateSqlParameter("designation_id", designation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(designation_id_Parameter);
            SqlParameter sewadar_type_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_type_id", sewadar_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(sewadar_type_id_Parameter);
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(grade_id_Parameter);
            SqlParameter status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("status_reason_id", status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(status_reason_id_Parameter);
            SqlParameter trial_dt_Parameter = ObjDBManager.CreateSqlParameter("trial_dt", trial_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(trial_dt_Parameter);
            SqlParameter joining_dt_Parameter = ObjDBManager.CreateSqlParameter("joining_dt", joining_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(joining_dt_Parameter);
            SqlParameter payment_mode_Parameter = ObjDBManager.CreateSqlParameter("payment_mode", payment_mode, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(payment_mode_Parameter);
            SqlParameter bank_nm_Parameter = ObjDBManager.CreateSqlParameter("bank_nm", bank_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(bank_nm_Parameter);
            SqlParameter bank_account_cd_Parameter = ObjDBManager.CreateSqlParameter("bank_account_cd", bank_account_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(bank_account_cd_Parameter);
            SqlParameter accmdtn_for_adults_Parameter = ObjDBManager.CreateSqlParameter("accmdtn_for_adults", accmdtn_for_adults, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(accmdtn_for_adults_Parameter);
            SqlParameter accmdtn_for_children_Parameter = ObjDBManager.CreateSqlParameter("accmdtn_for_children", accmdtn_for_children, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(accmdtn_for_children_Parameter);
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            SqlParameter status_dt_Parameter = ObjDBManager.CreateSqlParameter("status_dt", status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(status_dt_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdSewadarOfficeInformation", sqlParameters);

            return dset;
        }

        public string UpdSewadarOfficeInformationAsTask(System.Int32? person_id,
                                                                    System.Int16? working_unit_id,
                                                                    System.Int16? designation_id,
                                                                    System.Byte? sewadar_type_id,
                                                                    System.Int16? grade_id,
                                                                    System.Int32? status_reason_id,
                                                                    System.DateTime? trial_dt,
                                                                    System.DateTime? joining_dt,
                                                                    System.String payment_mode,
                                                                    System.String bank_nm,
                                                                    System.String bank_account_cd,
                                                                    System.Byte? accmdtn_for_adults,
                                                                    System.Byte? accmdtn_for_children,
                                                                    System.Int16? status_id,
                                                                    System.DateTime? status_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter working_unit_id_Parameter = ObjDBManager.CreateSqlParameter("working_unit_id", working_unit_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(working_unit_id_Parameter);
            SqlParameter designation_id_Parameter = ObjDBManager.CreateSqlParameter("designation_id", designation_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(designation_id_Parameter);
            SqlParameter sewadar_type_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_type_id", sewadar_type_id, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(sewadar_type_id_Parameter);
            SqlParameter grade_id_Parameter = ObjDBManager.CreateSqlParameter("grade_id", grade_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(grade_id_Parameter);
            SqlParameter status_reason_id_Parameter = ObjDBManager.CreateSqlParameter("status_reason_id", status_reason_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(status_reason_id_Parameter);
            SqlParameter trial_dt_Parameter = ObjDBManager.CreateSqlParameter("trial_dt", trial_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(trial_dt_Parameter);
            SqlParameter joining_dt_Parameter = ObjDBManager.CreateSqlParameter("joining_dt", joining_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(joining_dt_Parameter);
            SqlParameter payment_mode_Parameter = ObjDBManager.CreateSqlParameter("payment_mode", payment_mode, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(payment_mode_Parameter);
            SqlParameter bank_nm_Parameter = ObjDBManager.CreateSqlParameter("bank_nm", bank_nm, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(bank_nm_Parameter);
            SqlParameter bank_account_cd_Parameter = ObjDBManager.CreateSqlParameter("bank_account_cd", bank_account_cd, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(bank_account_cd_Parameter);
            SqlParameter accmdtn_for_adults_Parameter = ObjDBManager.CreateSqlParameter("accmdtn_for_adults", accmdtn_for_adults, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(accmdtn_for_adults_Parameter);
            SqlParameter accmdtn_for_children_Parameter = ObjDBManager.CreateSqlParameter("accmdtn_for_children", accmdtn_for_children, SqlDbType.TinyInt, ParameterDirection.Input);
            sqlParameters.Add(accmdtn_for_children_Parameter);
            SqlParameter status_id_Parameter = ObjDBManager.CreateSqlParameter("status_id", status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(status_id_Parameter);
            SqlParameter status_dt_Parameter = ObjDBManager.CreateSqlParameter("status_dt", status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(status_dt_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdSewadarOfficeInformation", sqlParameters);

            return taskString;
        }



        public DataSet UpdSewadars(System.Int32? sewadar_id,
                                                System.String initials)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter initials_Parameter = ObjDBManager.CreateSqlParameter("initials", initials, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(initials_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdSewadars", sqlParameters);

            return dset;
        }

        public string UpdSewadarsAsTask(System.Int32? sewadar_id,
                                                    System.String initials)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter sewadar_id_Parameter = ObjDBManager.CreateSqlParameter("sewadar_id", sewadar_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(sewadar_id_Parameter);
            SqlParameter initials_Parameter = ObjDBManager.CreateSqlParameter("initials", initials, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(initials_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdSewadars", sqlParameters);

            return taskString;
        }



        public DataSet UpdWorkExperienceDetails(System.Int32? person_id,
                                                            System.Int16? experience_sq,
                                                            System.DateTime? from_dt,
                                                            System.DateTime? from_dt_Old,
                                                            System.DateTime? to_dt,
                                                            System.String organization,
                                                            System.String designation,
                                                            System.String responsibility,
                                                            System.String work_dsc)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter experience_sq_Parameter = ObjDBManager.CreateSqlParameter("experience_sq", experience_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(experience_sq_Parameter);
            SqlParameter from_dt_Parameter = ObjDBManager.CreateSqlParameter("from_dt", from_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_dt_Parameter);
            SqlParameter from_dt_Old_Parameter = ObjDBManager.CreateSqlParameter("from_dt_Old", from_dt_Old, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_dt_Old_Parameter);
            SqlParameter to_dt_Parameter = ObjDBManager.CreateSqlParameter("to_dt", to_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_dt_Parameter);
            SqlParameter organization_Parameter = ObjDBManager.CreateSqlParameter("organization", organization, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(organization_Parameter);
            SqlParameter designation_Parameter = ObjDBManager.CreateSqlParameter("designation", designation, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(designation_Parameter);
            SqlParameter responsibility_Parameter = ObjDBManager.CreateSqlParameter("responsibility", responsibility, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(responsibility_Parameter);
            SqlParameter work_dsc_Parameter = ObjDBManager.CreateSqlParameter("work_dsc", work_dsc, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(work_dsc_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpdWorkExperienceDetails", sqlParameters);

            return dset;
        }

        public string UpdWorkExperienceDetailsAsTask(System.Int32? person_id,
                                                                System.Int16? experience_sq,
                                                                System.DateTime? from_dt,
                                                                System.DateTime? from_dt_Old,
                                                                System.DateTime? to_dt,
                                                                System.String organization,
                                                                System.String designation,
                                                                System.String responsibility,
                                                                System.String work_dsc)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter experience_sq_Parameter = ObjDBManager.CreateSqlParameter("experience_sq", experience_sq, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(experience_sq_Parameter);
            SqlParameter from_dt_Parameter = ObjDBManager.CreateSqlParameter("from_dt", from_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_dt_Parameter);
            SqlParameter from_dt_Old_Parameter = ObjDBManager.CreateSqlParameter("from_dt_Old", from_dt_Old, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(from_dt_Old_Parameter);
            SqlParameter to_dt_Parameter = ObjDBManager.CreateSqlParameter("to_dt", to_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(to_dt_Parameter);
            SqlParameter organization_Parameter = ObjDBManager.CreateSqlParameter("organization", organization, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(organization_Parameter);
            SqlParameter designation_Parameter = ObjDBManager.CreateSqlParameter("designation", designation, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(designation_Parameter);
            SqlParameter responsibility_Parameter = ObjDBManager.CreateSqlParameter("responsibility", responsibility, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(responsibility_Parameter);
            SqlParameter work_dsc_Parameter = ObjDBManager.CreateSqlParameter("work_dsc", work_dsc, SqlDbType.VarChar, ParameterDirection.Input);
            sqlParameters.Add(work_dsc_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpdWorkExperienceDetails", sqlParameters);

            return taskString;
        }



        public DataSet UpIdCardRequestList(System.Int32? person_id,
                                                        System.Int16? request_status_id,
                                                        System.DateTime? valid_upto_dt,
                                                        System.DateTime? request_status_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter request_status_id_Parameter = ObjDBManager.CreateSqlParameter("request_status_id", request_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(request_status_id_Parameter);
            SqlParameter valid_upto_dt_Parameter = ObjDBManager.CreateSqlParameter("valid_upto_dt", valid_upto_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(valid_upto_dt_Parameter);
            SqlParameter request_status_dt_Parameter = ObjDBManager.CreateSqlParameter("request_status_dt", request_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(request_status_dt_Parameter);
            DataSet dset = ObjDBManager.ExecuteStoredProc("UpIdCardRequestList", sqlParameters);

            return dset;
        }

        public string UpIdCardRequestListAsTask(System.Int32? person_id,
                                                            System.Int16? request_status_id,
                                                            System.DateTime? valid_upto_dt,
                                                            System.DateTime? request_status_dt)
        {
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter person_id_Parameter = ObjDBManager.CreateSqlParameter("person_id", person_id, SqlDbType.Int, ParameterDirection.Input);
            sqlParameters.Add(person_id_Parameter);
            SqlParameter request_status_id_Parameter = ObjDBManager.CreateSqlParameter("request_status_id", request_status_id, SqlDbType.SmallInt, ParameterDirection.Input);
            sqlParameters.Add(request_status_id_Parameter);
            SqlParameter valid_upto_dt_Parameter = ObjDBManager.CreateSqlParameter("valid_upto_dt", valid_upto_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(valid_upto_dt_Parameter);
            SqlParameter request_status_dt_Parameter = ObjDBManager.CreateSqlParameter("request_status_dt", request_status_dt, SqlDbType.DateTime, ParameterDirection.Input);
            sqlParameters.Add(request_status_dt_Parameter);
            string taskString = ObjDBManager.GetPrintableSQLString("UpIdCardRequestList", sqlParameters);

            return taskString;
        }


















































































    }


    public class V_sewadar_effective_gradesSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition sewadar_id = new SQLSelectQueryWhereClauseCondition("sewadar_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition grade_id = new SQLSelectQueryWhereClauseCondition("grade_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition effective_from_dt = new SQLSelectQueryWhereClauseCondition("effective_from_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition effective_till_dt = new SQLSelectQueryWhereClauseCondition("effective_till_dt", typeof(System.DateTime));
        public V_sewadar_effective_gradesSQLSelectQuery()
        {
            this.SqlObjectName = "V_sewadar_effective_grades";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(sewadar_id);
            this.lstConditions.Add(grade_id);
            this.lstConditions.Add(effective_from_dt);
            this.lstConditions.Add(effective_till_dt);
        }
    }


    public class V_sewadar_effective_working_unitsSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition sewadar_id = new SQLSelectQueryWhereClauseCondition("sewadar_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition working_unit_id = new SQLSelectQueryWhereClauseCondition("working_unit_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition effective_from_dt = new SQLSelectQueryWhereClauseCondition("effective_from_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition effective_till_dt = new SQLSelectQueryWhereClauseCondition("effective_till_dt", typeof(System.DateTime));
        public V_sewadar_effective_working_unitsSQLSelectQuery()
        {
            this.SqlObjectName = "V_sewadar_effective_working_units";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(sewadar_id);
            this.lstConditions.Add(working_unit_id);
            this.lstConditions.Add(effective_from_dt);
            this.lstConditions.Add(effective_till_dt);
        }
    }


    public class V_sewadar_gradesSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition sewadar_id = new SQLSelectQueryWhereClauseCondition("sewadar_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition grade_id = new SQLSelectQueryWhereClauseCondition("grade_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition effective_dt = new SQLSelectQueryWhereClauseCondition("effective_dt", typeof(System.DateTime));
        public V_sewadar_gradesSQLSelectQuery()
        {
            this.SqlObjectName = "V_sewadar_grades";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(sewadar_id);
            this.lstConditions.Add(grade_id);
            this.lstConditions.Add(effective_dt);
        }
    }


    public class V_sewadar_working_unitsSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition sewadar_id = new SQLSelectQueryWhereClauseCondition("sewadar_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition working_unit_id = new SQLSelectQueryWhereClauseCondition("working_unit_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition effective_dt = new SQLSelectQueryWhereClauseCondition("effective_dt", typeof(System.DateTime));
        public V_sewadar_working_unitsSQLSelectQuery()
        {
            this.SqlObjectName = "V_sewadar_working_units";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(sewadar_id);
            this.lstConditions.Add(working_unit_id);
            this.lstConditions.Add(effective_dt);
        }
    }


    public class ViewAllotTransferVacateSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition file_no = new SQLSelectQueryWhereClauseCondition("file_no", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition name = new SQLSelectQueryWhereClauseCondition("name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition title = new SQLSelectQueryWhereClauseCondition("title", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition first_nm = new SQLSelectQueryWhereClauseCondition("first_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition middle_nm = new SQLSelectQueryWhereClauseCondition("middle_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition short_nm = new SQLSelectQueryWhereClauseCondition("short_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition last_nm = new SQLSelectQueryWhereClauseCondition("last_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition fh_name_type = new SQLSelectQueryWhereClauseCondition("fh_name_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition father_husband_nm = new SQLSelectQueryWhereClauseCondition("father_husband_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition birth_dt = new SQLSelectQueryWhereClauseCondition("birth_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition initiation_id = new SQLSelectQueryWhereClauseCondition("initiation_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition place_nm = new SQLSelectQueryWhereClauseCondition("place_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition monthly_income = new SQLSelectQueryWhereClauseCondition("monthly_income", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition currency_id = new SQLSelectQueryWhereClauseCondition("currency_id", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition currency_abbr = new SQLSelectQueryWhereClauseCondition("currency_abbr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition income_source_nm = new SQLSelectQueryWhereClauseCondition("income_source_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition commercial_activity = new SQLSelectQueryWhereClauseCondition("commercial_activity", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition medical_status = new SQLSelectQueryWhereClauseCondition("medical_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition medical_status_dt = new SQLSelectQueryWhereClauseCondition("medical_status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition medical_status_remarks = new SQLSelectQueryWhereClauseCondition("medical_status_remarks", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition security_status = new SQLSelectQueryWhereClauseCondition("security_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition security_status_dt = new SQLSelectQueryWhereClauseCondition("security_status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition status_id = new SQLSelectQueryWhereClauseCondition("status_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition blood_group = new SQLSelectQueryWhereClauseCondition("blood_group", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition is_diabetic = new SQLSelectQueryWhereClauseCondition("is_diabetic", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition grade_id = new SQLSelectQueryWhereClauseCondition("grade_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition trial_dt = new SQLSelectQueryWhereClauseCondition("trial_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition payment_mode = new SQLSelectQueryWhereClauseCondition("payment_mode", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition joining_dt = new SQLSelectQueryWhereClauseCondition("joining_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition bank_nm = new SQLSelectQueryWhereClauseCondition("bank_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition bank_account_cd = new SQLSelectQueryWhereClauseCondition("bank_account_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition accmdtn_for_adults = new SQLSelectQueryWhereClauseCondition("accmdtn_for_adults", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition accmdtn_for_children = new SQLSelectQueryWhereClauseCondition("accmdtn_for_children", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition initials = new SQLSelectQueryWhereClauseCondition("initials", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition grade_nm = new SQLSelectQueryWhereClauseCondition("grade_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_id = new SQLSelectQueryWhereClauseCondition("working_unit_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_id = new SQLSelectQueryWhereClauseCondition("designation_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Relation_ID = new SQLSelectQueryWhereClauseCondition("Relation_ID", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition relation_nm = new SQLSelectQueryWhereClauseCondition("relation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition next_of_kin_nm = new SQLSelectQueryWhereClauseCondition("next_of_kin_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Spouse_Sewadar_ID = new SQLSelectQueryWhereClauseCondition("Spouse_Sewadar_ID", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Spouse_Sewadar_Nm = new SQLSelectQueryWhereClauseCondition("Spouse_Sewadar_Nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Sponsor_Sewadar_ID = new SQLSelectQueryWhereClauseCondition("Sponsor_Sewadar_ID", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Sponsor_Sewadar_Nm = new SQLSelectQueryWhereClauseCondition("Sponsor_Sewadar_Nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition location_short_nm = new SQLSelectQueryWhereClauseCondition("location_short_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition housing_location_id = new SQLSelectQueryWhereClauseCondition("housing_location_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition house_id = new SQLSelectQueryWhereClauseCondition("house_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition housenamefortop = new SQLSelectQueryWhereClauseCondition("housenamefortop", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition housing_short_nm = new SQLSelectQueryWhereClauseCondition("housing_short_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition allocation_id = new SQLSelectQueryWhereClauseCondition("allocation_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition notification_dt = new SQLSelectQueryWhereClauseCondition("notification_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition Notification_no = new SQLSelectQueryWhereClauseCondition("Notification_no", typeof(System.String));
        public ViewAllotTransferVacateSQLSelectQuery()
        {
            this.SqlObjectName = "ViewAllotTransferVacate";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(file_no);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(name);
            this.lstConditions.Add(title);
            this.lstConditions.Add(first_nm);
            this.lstConditions.Add(middle_nm);
            this.lstConditions.Add(short_nm);
            this.lstConditions.Add(last_nm);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(fh_name_type);
            this.lstConditions.Add(father_husband_nm);
            this.lstConditions.Add(birth_dt);
            this.lstConditions.Add(initiation_id);
            this.lstConditions.Add(place_nm);
            this.lstConditions.Add(age);
            this.lstConditions.Add(monthly_income);
            this.lstConditions.Add(currency_id);
            this.lstConditions.Add(currency_abbr);
            this.lstConditions.Add(income_source_nm);
            this.lstConditions.Add(commercial_activity);
            this.lstConditions.Add(medical_status);
            this.lstConditions.Add(medical_status_dt);
            this.lstConditions.Add(medical_status_remarks);
            this.lstConditions.Add(security_status);
            this.lstConditions.Add(security_status_dt);
            this.lstConditions.Add(status_id);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(blood_group);
            this.lstConditions.Add(is_diabetic);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(grade_id);
            this.lstConditions.Add(trial_dt);
            this.lstConditions.Add(payment_mode);
            this.lstConditions.Add(joining_dt);
            this.lstConditions.Add(bank_nm);
            this.lstConditions.Add(bank_account_cd);
            this.lstConditions.Add(accmdtn_for_adults);
            this.lstConditions.Add(accmdtn_for_children);
            this.lstConditions.Add(initials);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(grade_nm);
            this.lstConditions.Add(working_unit_id);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(designation_id);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(Relation_ID);
            this.lstConditions.Add(relation_nm);
            this.lstConditions.Add(next_of_kin_nm);
            this.lstConditions.Add(Spouse_Sewadar_ID);
            this.lstConditions.Add(Spouse_Sewadar_Nm);
            this.lstConditions.Add(Sponsor_Sewadar_ID);
            this.lstConditions.Add(Sponsor_Sewadar_Nm);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(location_short_nm);
            this.lstConditions.Add(housing_location_id);
            this.lstConditions.Add(house_id);
            this.lstConditions.Add(housenamefortop);
            this.lstConditions.Add(housing_short_nm);
            this.lstConditions.Add(allocation_id);
            this.lstConditions.Add(notification_dt);
            this.lstConditions.Add(Notification_no);
        }
    }


    public class ViewChildren_facilitiesSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition children_facility_id = new SQLSelectQueryWhereClauseCondition("children_facility_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition children_facility_cd = new SQLSelectQueryWhereClauseCondition("children_facility_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition children_facility_nm = new SQLSelectQueryWhereClauseCondition("children_facility_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition children_facility_dsc = new SQLSelectQueryWhereClauseCondition("children_facility_dsc", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition frequency = new SQLSelectQueryWhereClauseCondition("frequency", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition children_facility_set_id = new SQLSelectQueryWhereClauseCondition("children_facility_set_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition children_facility_set_nm = new SQLSelectQueryWhereClauseCondition("children_facility_set_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition are_males_eligible = new SQLSelectQueryWhereClauseCondition("are_males_eligible", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition are_females_eligible = new SQLSelectQueryWhereClauseCondition("are_females_eligible", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition qualification_type = new SQLSelectQueryWhereClauseCondition("qualification_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition facility_type = new SQLSelectQueryWhereClauseCondition("facility_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition facility_amt = new SQLSelectQueryWhereClauseCondition("facility_amt", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition criteria_percentage = new SQLSelectQueryWhereClauseCondition("criteria_percentage", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition criteria_qualification_type = new SQLSelectQueryWhereClauseCondition("criteria_qualification_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition effective_from = new SQLSelectQueryWhereClauseCondition("effective_from", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition effective_till = new SQLSelectQueryWhereClauseCondition("effective_till", typeof(System.DateTime));
        public ViewChildren_facilitiesSQLSelectQuery()
        {
            this.SqlObjectName = "ViewChildren_facilities";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(children_facility_id);
            this.lstConditions.Add(children_facility_cd);
            this.lstConditions.Add(children_facility_nm);
            this.lstConditions.Add(children_facility_dsc);
            this.lstConditions.Add(frequency);
            this.lstConditions.Add(children_facility_set_id);
            this.lstConditions.Add(children_facility_set_nm);
            this.lstConditions.Add(are_males_eligible);
            this.lstConditions.Add(are_females_eligible);
            this.lstConditions.Add(qualification_type);
            this.lstConditions.Add(facility_type);
            this.lstConditions.Add(facility_amt);
            this.lstConditions.Add(criteria_percentage);
            this.lstConditions.Add(criteria_qualification_type);
            this.lstConditions.Add(effective_from);
            this.lstConditions.Add(effective_till);
        }
    }


    public class ViewChildrenEligibleFacilitySQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition SewadarName = new SQLSelectQueryWhereClauseCondition("SewadarName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_id = new SQLSelectQueryWhereClauseCondition("working_unit_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition SewadarStatus = new SQLSelectQueryWhereClauseCondition("SewadarStatus", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition sewadar_age = new SQLSelectQueryWhereClauseCondition("sewadar_age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition sewadar_id = new SQLSelectQueryWhereClauseCondition("sewadar_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition sewadar_gender = new SQLSelectQueryWhereClauseCondition("sewadar_gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition house_no = new SQLSelectQueryWhereClauseCondition("house_no", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DependantName = new SQLSelectQueryWhereClauseCondition("DependantName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_gender = new SQLSelectQueryWhereClauseCondition("dependant_gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_age = new SQLSelectQueryWhereClauseCondition("dependant_age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition relation_nm = new SQLSelectQueryWhereClauseCondition("relation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Dependant_No = new SQLSelectQueryWhereClauseCondition("Dependant_No", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition dependant_institution = new SQLSelectQueryWhereClauseCondition("dependant_institution", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_year = new SQLSelectQueryWhereClauseCondition("dependant_year", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition dependant_qualification_type = new SQLSelectQueryWhereClauseCondition("dependant_qualification_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_qualification = new SQLSelectQueryWhereClauseCondition("dependant_qualification", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_subject = new SQLSelectQueryWhereClauseCondition("dependant_subject", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_occupation = new SQLSelectQueryWhereClauseCondition("dependant_occupation", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition is_dependant = new SQLSelectQueryWhereClauseCondition("is_dependant", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_status = new SQLSelectQueryWhereClauseCondition("dependant_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_status_dt = new SQLSelectQueryWhereClauseCondition("dependant_status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition dependant_id = new SQLSelectQueryWhereClauseCondition("dependant_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition is_staying_at_dera = new SQLSelectQueryWhereClauseCondition("is_staying_at_dera", typeof(System.String));
        public ViewChildrenEligibleFacilitySQLSelectQuery()
        {
            this.SqlObjectName = "ViewChildrenEligibleFacility";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(SewadarName);
            this.lstConditions.Add(working_unit_id);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(SewadarStatus);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(sewadar_age);
            this.lstConditions.Add(sewadar_id);
            this.lstConditions.Add(sewadar_gender);
            this.lstConditions.Add(house_no);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(DependantName);
            this.lstConditions.Add(dependant_gender);
            this.lstConditions.Add(dependant_age);
            this.lstConditions.Add(relation_nm);
            this.lstConditions.Add(Dependant_No);
            this.lstConditions.Add(dependant_institution);
            this.lstConditions.Add(dependant_year);
            this.lstConditions.Add(dependant_qualification_type);
            this.lstConditions.Add(dependant_qualification);
            this.lstConditions.Add(dependant_subject);
            this.lstConditions.Add(dependant_occupation);
            this.lstConditions.Add(is_dependant);
            this.lstConditions.Add(dependant_status);
            this.lstConditions.Add(dependant_status_dt);
            this.lstConditions.Add(dependant_id);
            this.lstConditions.Add(is_staying_at_dera);
        }
    }


    public class ViewChildrenResultsSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition SewadarName = new SQLSelectQueryWhereClauseCondition("SewadarName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_id = new SQLSelectQueryWhereClauseCondition("working_unit_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition SewadarStatus = new SQLSelectQueryWhereClauseCondition("SewadarStatus", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition sewadar_age = new SQLSelectQueryWhereClauseCondition("sewadar_age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition sewadar_id = new SQLSelectQueryWhereClauseCondition("sewadar_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition sewadar_gender = new SQLSelectQueryWhereClauseCondition("sewadar_gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition house_no = new SQLSelectQueryWhereClauseCondition("house_no", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DependantName = new SQLSelectQueryWhereClauseCondition("DependantName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_gender = new SQLSelectQueryWhereClauseCondition("dependant_gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_age = new SQLSelectQueryWhereClauseCondition("dependant_age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition relation_nm = new SQLSelectQueryWhereClauseCondition("relation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Dependant_No = new SQLSelectQueryWhereClauseCondition("Dependant_No", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition dependant_institution = new SQLSelectQueryWhereClauseCondition("dependant_institution", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_year = new SQLSelectQueryWhereClauseCondition("dependant_year", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition dependant_qualification = new SQLSelectQueryWhereClauseCondition("dependant_qualification", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_qualification_Type = new SQLSelectQueryWhereClauseCondition("dependant_qualification_Type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_subject = new SQLSelectQueryWhereClauseCondition("dependant_subject", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_occupation = new SQLSelectQueryWhereClauseCondition("dependant_occupation", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition is_dependant = new SQLSelectQueryWhereClauseCondition("is_dependant", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_status = new SQLSelectQueryWhereClauseCondition("dependant_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_status_dt = new SQLSelectQueryWhereClauseCondition("dependant_status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition dependant_id = new SQLSelectQueryWhereClauseCondition("dependant_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition is_staying_at_dera = new SQLSelectQueryWhereClauseCondition("is_staying_at_dera", typeof(System.String));
        public ViewChildrenResultsSQLSelectQuery()
        {
            this.SqlObjectName = "ViewChildrenResults";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(SewadarName);
            this.lstConditions.Add(working_unit_id);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(SewadarStatus);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(sewadar_age);
            this.lstConditions.Add(sewadar_id);
            this.lstConditions.Add(sewadar_gender);
            this.lstConditions.Add(house_no);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(DependantName);
            this.lstConditions.Add(dependant_gender);
            this.lstConditions.Add(dependant_age);
            this.lstConditions.Add(relation_nm);
            this.lstConditions.Add(Dependant_No);
            this.lstConditions.Add(dependant_institution);
            this.lstConditions.Add(dependant_year);
            this.lstConditions.Add(dependant_qualification);
            this.lstConditions.Add(dependant_qualification_Type);
            this.lstConditions.Add(dependant_subject);
            this.lstConditions.Add(dependant_occupation);
            this.lstConditions.Add(is_dependant);
            this.lstConditions.Add(dependant_status);
            this.lstConditions.Add(dependant_status_dt);
            this.lstConditions.Add(dependant_id);
            this.lstConditions.Add(is_staying_at_dera);
        }
    }


    public class ViewCommonForAllScreensSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition file_no = new SQLSelectQueryWhereClauseCondition("file_no", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition name = new SQLSelectQueryWhereClauseCondition("name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition title = new SQLSelectQueryWhereClauseCondition("title", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition first_nm = new SQLSelectQueryWhereClauseCondition("first_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition middle_nm = new SQLSelectQueryWhereClauseCondition("middle_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition short_nm = new SQLSelectQueryWhereClauseCondition("short_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition last_nm = new SQLSelectQueryWhereClauseCondition("last_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition fh_name_type = new SQLSelectQueryWhereClauseCondition("fh_name_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition father_husband_nm = new SQLSelectQueryWhereClauseCondition("father_husband_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition birth_dt = new SQLSelectQueryWhereClauseCondition("birth_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition is_foreign_initiate = new SQLSelectQueryWhereClauseCondition("is_foreign_initiate", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition initiation_id = new SQLSelectQueryWhereClauseCondition("initiation_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition place_nm = new SQLSelectQueryWhereClauseCondition("place_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition monthly_income = new SQLSelectQueryWhereClauseCondition("monthly_income", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition currency_id = new SQLSelectQueryWhereClauseCondition("currency_id", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition currency_abbr = new SQLSelectQueryWhereClauseCondition("currency_abbr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition income_source_nm = new SQLSelectQueryWhereClauseCondition("income_source_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition commercial_activity = new SQLSelectQueryWhereClauseCondition("commercial_activity", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition is_work_status_ok = new SQLSelectQueryWhereClauseCondition("is_work_status_ok", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition medical_status = new SQLSelectQueryWhereClauseCondition("medical_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition medical_status_dt = new SQLSelectQueryWhereClauseCondition("medical_status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition medical_status_remarks = new SQLSelectQueryWhereClauseCondition("medical_status_remarks", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition security_status = new SQLSelectQueryWhereClauseCondition("security_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition security_status_dt = new SQLSelectQueryWhereClauseCondition("security_status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition status_id = new SQLSelectQueryWhereClauseCondition("status_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition blood_group = new SQLSelectQueryWhereClauseCondition("blood_group", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition is_diabetic = new SQLSelectQueryWhereClauseCondition("is_diabetic", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_status_reason_id = new SQLSelectQueryWhereClauseCondition("person_status_reason_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_status_reason_nm = new SQLSelectQueryWhereClauseCondition("person_status_reason_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition grade_id = new SQLSelectQueryWhereClauseCondition("grade_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition trial_dt = new SQLSelectQueryWhereClauseCondition("trial_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition joining_dt = new SQLSelectQueryWhereClauseCondition("joining_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition payment_mode = new SQLSelectQueryWhereClauseCondition("payment_mode", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition bank_nm = new SQLSelectQueryWhereClauseCondition("bank_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition bank_account_cd = new SQLSelectQueryWhereClauseCondition("bank_account_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition accmdtn_for_adults = new SQLSelectQueryWhereClauseCondition("accmdtn_for_adults", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition accmdtn_for_children = new SQLSelectQueryWhereClauseCondition("accmdtn_for_children", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition initials = new SQLSelectQueryWhereClauseCondition("initials", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition grade_nm = new SQLSelectQueryWhereClauseCondition("grade_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_id = new SQLSelectQueryWhereClauseCondition("working_unit_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_id = new SQLSelectQueryWhereClauseCondition("designation_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Relation_ID = new SQLSelectQueryWhereClauseCondition("Relation_ID", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition relation_nm = new SQLSelectQueryWhereClauseCondition("relation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition next_of_kin_nm = new SQLSelectQueryWhereClauseCondition("next_of_kin_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Spouse_Sewadar_ID = new SQLSelectQueryWhereClauseCondition("Spouse_Sewadar_ID", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Spouse_Sewadar_Nm = new SQLSelectQueryWhereClauseCondition("Spouse_Sewadar_Nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Sponsor_Sewadar_ID = new SQLSelectQueryWhereClauseCondition("Sponsor_Sewadar_ID", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Sponsor_Sewadar_Nm = new SQLSelectQueryWhereClauseCondition("Sponsor_Sewadar_Nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition introduced_by = new SQLSelectQueryWhereClauseCondition("introduced_by", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition notification_dt = new SQLSelectQueryWhereClauseCondition("notification_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition Notification_no = new SQLSelectQueryWhereClauseCondition("Notification_no", typeof(System.String));
        public ViewCommonForAllScreensSQLSelectQuery()
        {
            this.SqlObjectName = "ViewCommonForAllScreens";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(file_no);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(name);
            this.lstConditions.Add(title);
            this.lstConditions.Add(first_nm);
            this.lstConditions.Add(middle_nm);
            this.lstConditions.Add(short_nm);
            this.lstConditions.Add(last_nm);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(fh_name_type);
            this.lstConditions.Add(father_husband_nm);
            this.lstConditions.Add(birth_dt);
            this.lstConditions.Add(is_foreign_initiate);
            this.lstConditions.Add(initiation_id);
            this.lstConditions.Add(place_nm);
            this.lstConditions.Add(monthly_income);
            this.lstConditions.Add(currency_id);
            this.lstConditions.Add(currency_abbr);
            this.lstConditions.Add(income_source_nm);
            this.lstConditions.Add(commercial_activity);
            this.lstConditions.Add(is_work_status_ok);
            this.lstConditions.Add(medical_status);
            this.lstConditions.Add(medical_status_dt);
            this.lstConditions.Add(medical_status_remarks);
            this.lstConditions.Add(security_status);
            this.lstConditions.Add(security_status_dt);
            this.lstConditions.Add(status_id);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(blood_group);
            this.lstConditions.Add(is_diabetic);
            this.lstConditions.Add(person_status_reason_id);
            this.lstConditions.Add(person_status_reason_nm);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(age);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(grade_id);
            this.lstConditions.Add(trial_dt);
            this.lstConditions.Add(joining_dt);
            this.lstConditions.Add(payment_mode);
            this.lstConditions.Add(bank_nm);
            this.lstConditions.Add(bank_account_cd);
            this.lstConditions.Add(accmdtn_for_adults);
            this.lstConditions.Add(accmdtn_for_children);
            this.lstConditions.Add(initials);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(grade_nm);
            this.lstConditions.Add(working_unit_id);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(designation_id);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(Relation_ID);
            this.lstConditions.Add(relation_nm);
            this.lstConditions.Add(next_of_kin_nm);
            this.lstConditions.Add(Spouse_Sewadar_ID);
            this.lstConditions.Add(Spouse_Sewadar_Nm);
            this.lstConditions.Add(Sponsor_Sewadar_ID);
            this.lstConditions.Add(Sponsor_Sewadar_Nm);
            this.lstConditions.Add(introduced_by);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(notification_dt);
            this.lstConditions.Add(Notification_no);
        }
    }


    public class ViewConfidentialInformationSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition file_no = new SQLSelectQueryWhereClauseCondition("file_no", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition name = new SQLSelectQueryWhereClauseCondition("name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition birth_dt = new SQLSelectQueryWhereClauseCondition("birth_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition monthly_income = new SQLSelectQueryWhereClauseCondition("monthly_income", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition currency_id = new SQLSelectQueryWhereClauseCondition("currency_id", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition currency_abbr = new SQLSelectQueryWhereClauseCondition("currency_abbr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition income_source_nm = new SQLSelectQueryWhereClauseCondition("income_source_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition commercial_activity = new SQLSelectQueryWhereClauseCondition("commercial_activity", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition status_id = new SQLSelectQueryWhereClauseCondition("status_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition grade_id = new SQLSelectQueryWhereClauseCondition("grade_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition grade_nm = new SQLSelectQueryWhereClauseCondition("grade_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_id = new SQLSelectQueryWhereClauseCondition("working_unit_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_id = new SQLSelectQueryWhereClauseCondition("designation_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition location_short_nm = new SQLSelectQueryWhereClauseCondition("location_short_nm", typeof(System.String));
        public ViewConfidentialInformationSQLSelectQuery()
        {
            this.SqlObjectName = "ViewConfidentialInformation";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(file_no);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(name);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(birth_dt);
            this.lstConditions.Add(age);
            this.lstConditions.Add(monthly_income);
            this.lstConditions.Add(currency_id);
            this.lstConditions.Add(currency_abbr);
            this.lstConditions.Add(income_source_nm);
            this.lstConditions.Add(commercial_activity);
            this.lstConditions.Add(status_id);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(grade_id);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(grade_nm);
            this.lstConditions.Add(working_unit_id);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(designation_id);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(location_short_nm);
        }
    }


    public class ViewDependantInformationSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition name = new SQLSelectQueryWhereClauseCondition("name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition grade_nm = new SQLSelectQueryWhereClauseCondition("grade_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public ViewDependantInformationSQLSelectQuery()
        {
            this.SqlObjectName = "ViewDependantInformation";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(name);
            this.lstConditions.Add(age);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(grade_nm);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(designation_nm);
        }
    }


    public class ViewExperienceDetailsSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition txn_ts = new SQLSelectQueryWhereClauseCondition("txn_ts", typeof(System.Byte[]));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition name = new SQLSelectQueryWhereClauseCondition("name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition fh_name_type = new SQLSelectQueryWhereClauseCondition("fh_name_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition status_id = new SQLSelectQueryWhereClauseCondition("status_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition grade_id = new SQLSelectQueryWhereClauseCondition("grade_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition grade_nm = new SQLSelectQueryWhereClauseCondition("grade_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_id = new SQLSelectQueryWhereClauseCondition("working_unit_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_id = new SQLSelectQueryWhereClauseCondition("designation_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition job_type = new SQLSelectQueryWhereClauseCondition("job_type", typeof(System.String));
        public ViewExperienceDetailsSQLSelectQuery()
        {
            this.SqlObjectName = "ViewExperienceDetails";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(txn_ts);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(name);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(fh_name_type);
            this.lstConditions.Add(age);
            this.lstConditions.Add(status_id);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(grade_id);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(grade_nm);
            this.lstConditions.Add(working_unit_id);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(designation_id);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(job_type);
        }
    }


    public class ViewExperienceDetailsForRetreiveSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition txn_ts = new SQLSelectQueryWhereClauseCondition("txn_ts", typeof(System.Byte[]));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition name = new SQLSelectQueryWhereClauseCondition("name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition fh_name_type = new SQLSelectQueryWhereClauseCondition("fh_name_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition status_id = new SQLSelectQueryWhereClauseCondition("status_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition grade_id = new SQLSelectQueryWhereClauseCondition("grade_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition grade_nm = new SQLSelectQueryWhereClauseCondition("grade_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_id = new SQLSelectQueryWhereClauseCondition("working_unit_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_id = new SQLSelectQueryWhereClauseCondition("designation_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition job_type = new SQLSelectQueryWhereClauseCondition("job_type", typeof(System.String));
        public ViewExperienceDetailsForRetreiveSQLSelectQuery()
        {
            this.SqlObjectName = "ViewExperienceDetailsForRetreive";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(txn_ts);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(name);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(fh_name_type);
            this.lstConditions.Add(age);
            this.lstConditions.Add(status_id);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(grade_id);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(grade_nm);
            this.lstConditions.Add(working_unit_id);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(designation_id);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(job_type);
        }
    }


    public class ViewGrantDisbursementsSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition SewadarName = new SQLSelectQueryWhereClauseCondition("SewadarName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_id = new SQLSelectQueryWhereClauseCondition("working_unit_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition SewadarStatus = new SQLSelectQueryWhereClauseCondition("SewadarStatus", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition sewadar_age = new SQLSelectQueryWhereClauseCondition("sewadar_age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition sewadar_id = new SQLSelectQueryWhereClauseCondition("sewadar_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition sewadar_gender = new SQLSelectQueryWhereClauseCondition("sewadar_gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition house_no = new SQLSelectQueryWhereClauseCondition("house_no", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_id = new SQLSelectQueryWhereClauseCondition("designation_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition designation_cd = new SQLSelectQueryWhereClauseCondition("designation_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DependantName = new SQLSelectQueryWhereClauseCondition("DependantName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_gender = new SQLSelectQueryWhereClauseCondition("dependant_gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_age = new SQLSelectQueryWhereClauseCondition("dependant_age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition relation_nm = new SQLSelectQueryWhereClauseCondition("relation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_id = new SQLSelectQueryWhereClauseCondition("dependant_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition Dependant_No = new SQLSelectQueryWhereClauseCondition("Dependant_No", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition dependant_institution = new SQLSelectQueryWhereClauseCondition("dependant_institution", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_year = new SQLSelectQueryWhereClauseCondition("dependant_year", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition dependant_qualification = new SQLSelectQueryWhereClauseCondition("dependant_qualification", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_qual_type = new SQLSelectQueryWhereClauseCondition("dependant_qual_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_subject = new SQLSelectQueryWhereClauseCondition("dependant_subject", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition is_dependant = new SQLSelectQueryWhereClauseCondition("is_dependant", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_status = new SQLSelectQueryWhereClauseCondition("dependant_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_status_dt = new SQLSelectQueryWhereClauseCondition("dependant_status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition facility_type = new SQLSelectQueryWhereClauseCondition("facility_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition is_staying_at_dera = new SQLSelectQueryWhereClauseCondition("is_staying_at_dera", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition children_facility_id = new SQLSelectQueryWhereClauseCondition("children_facility_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition children_facility_nm = new SQLSelectQueryWhereClauseCondition("children_facility_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition applicable_unit = new SQLSelectQueryWhereClauseCondition("applicable_unit", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition applicable_year = new SQLSelectQueryWhereClauseCondition("applicable_year", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition claim_amt = new SQLSelectQueryWhereClauseCondition("claim_amt", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition disbursed_amt = new SQLSelectQueryWhereClauseCondition("disbursed_amt", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition disbursement_dt = new SQLSelectQueryWhereClauseCondition("disbursement_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition disbursement_id = new SQLSelectQueryWhereClauseCondition("disbursement_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition effective_from = new SQLSelectQueryWhereClauseCondition("effective_from", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition children_facility_set_id = new SQLSelectQueryWhereClauseCondition("children_facility_set_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition children_facility_set_nm = new SQLSelectQueryWhereClauseCondition("children_facility_set_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition remarks = new SQLSelectQueryWhereClauseCondition("remarks", typeof(System.String));
        public ViewGrantDisbursementsSQLSelectQuery()
        {
            this.SqlObjectName = "ViewGrantDisbursements";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(SewadarName);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(working_unit_id);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(SewadarStatus);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(sewadar_age);
            this.lstConditions.Add(sewadar_id);
            this.lstConditions.Add(sewadar_gender);
            this.lstConditions.Add(house_no);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(designation_id);
            this.lstConditions.Add(designation_cd);
            this.lstConditions.Add(DependantName);
            this.lstConditions.Add(dependant_gender);
            this.lstConditions.Add(dependant_age);
            this.lstConditions.Add(relation_nm);
            this.lstConditions.Add(dependant_id);
            this.lstConditions.Add(Dependant_No);
            this.lstConditions.Add(dependant_institution);
            this.lstConditions.Add(dependant_year);
            this.lstConditions.Add(dependant_qualification);
            this.lstConditions.Add(dependant_qual_type);
            this.lstConditions.Add(dependant_subject);
            this.lstConditions.Add(is_dependant);
            this.lstConditions.Add(dependant_status);
            this.lstConditions.Add(dependant_status_dt);
            this.lstConditions.Add(facility_type);
            this.lstConditions.Add(is_staying_at_dera);
            this.lstConditions.Add(children_facility_id);
            this.lstConditions.Add(children_facility_nm);
            this.lstConditions.Add(applicable_unit);
            this.lstConditions.Add(applicable_year);
            this.lstConditions.Add(claim_amt);
            this.lstConditions.Add(disbursed_amt);
            this.lstConditions.Add(disbursement_dt);
            this.lstConditions.Add(disbursement_id);
            this.lstConditions.Add(effective_from);
            this.lstConditions.Add(children_facility_set_id);
            this.lstConditions.Add(children_facility_set_nm);
            this.lstConditions.Add(remarks);
        }
    }


    public class ViewIDCardRequestDetailsSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition DependantNo = new SQLSelectQueryWhereClauseCondition("DependantNo", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition RelationID = new SQLSelectQueryWhereClauseCondition("RelationID", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition RelationName = new SQLSelectQueryWhereClauseCondition("RelationName", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition Dependant_person_cd = new SQLSelectQueryWhereClauseCondition("Dependant_person_cd", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition SewadarName = new SQLSelectQueryWhereClauseCondition("SewadarName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition SewadarID = new SQLSelectQueryWhereClauseCondition("SewadarID", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition DependantName = new SQLSelectQueryWhereClauseCondition("DependantName", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition DependantID = new SQLSelectQueryWhereClauseCondition("DependantID", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition PersonGender = new SQLSelectQueryWhereClauseCondition("PersonGender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DepGender = new SQLSelectQueryWhereClauseCondition("DepGender", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition PersonMaritalStatus = new SQLSelectQueryWhereClauseCondition("PersonMaritalStatus", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DepMaritalStatus = new SQLSelectQueryWhereClauseCondition("DepMaritalStatus", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition PersonAge = new SQLSelectQueryWhereClauseCondition("PersonAge", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition DepandantAge = new SQLSelectQueryWhereClauseCondition("DepandantAge", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition PersonStatus = new SQLSelectQueryWhereClauseCondition("PersonStatus", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition StatusDate = new SQLSelectQueryWhereClauseCondition("StatusDate", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition SewadarType = new SQLSelectQueryWhereClauseCondition("SewadarType", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition SewadarTypeName = new SQLSelectQueryWhereClauseCondition("SewadarTypeName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition GradeID = new SQLSelectQueryWhereClauseCondition("GradeID", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition GradeName = new SQLSelectQueryWhereClauseCondition("GradeName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition WorkingUnitID = new SQLSelectQueryWhereClauseCondition("WorkingUnitID", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition WorkingUnitNm = new SQLSelectQueryWhereClauseCondition("WorkingUnitNm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DesignationID = new SQLSelectQueryWhereClauseCondition("DesignationID", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition DesignationName = new SQLSelectQueryWhereClauseCondition("DesignationName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition Location_Short_NM = new SQLSelectQueryWhereClauseCondition("Location_Short_NM", typeof(System.String));
        public ViewIDCardRequestDetailsSQLSelectQuery()
        {
            this.SqlObjectName = "ViewIDCardRequestDetails";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(DependantNo);
            this.lstConditions.Add(RelationID);
            this.lstConditions.Add(RelationName);
            this.lstConditions.Add(Dependant_person_cd);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(SewadarName);
            this.lstConditions.Add(SewadarID);
            this.lstConditions.Add(DependantName);
            this.lstConditions.Add(DependantID);
            this.lstConditions.Add(PersonGender);
            this.lstConditions.Add(DepGender);
            this.lstConditions.Add(PersonMaritalStatus);
            this.lstConditions.Add(DepMaritalStatus);
            this.lstConditions.Add(PersonAge);
            this.lstConditions.Add(DepandantAge);
            this.lstConditions.Add(PersonStatus);
            this.lstConditions.Add(StatusDate);
            this.lstConditions.Add(SewadarType);
            this.lstConditions.Add(SewadarTypeName);
            this.lstConditions.Add(GradeID);
            this.lstConditions.Add(GradeName);
            this.lstConditions.Add(WorkingUnitID);
            this.lstConditions.Add(WorkingUnitNm);
            this.lstConditions.Add(DesignationID);
            this.lstConditions.Add(DesignationName);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(Location_Short_NM);
        }
    }


    public class ViewIdCardRequestsSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition requested_dt = new SQLSelectQueryWhereClauseCondition("requested_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition request_reason_id = new SQLSelectQueryWhereClauseCondition("request_reason_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition request_status_id = new SQLSelectQueryWhereClauseCondition("request_status_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition valid_upto_dt = new SQLSelectQueryWhereClauseCondition("valid_upto_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition request_status_dt = new SQLSelectQueryWhereClauseCondition("request_status_dt", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition remarks = new SQLSelectQueryWhereClauseCondition("remarks", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition txn_ts = new SQLSelectQueryWhereClauseCondition("txn_ts", typeof(System.Byte[]));
        public SQLSelectQueryWhereClauseCondition Person_Nm = new SQLSelectQueryWhereClauseCondition("Person_Nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition id_card_request_status_nm = new SQLSelectQueryWhereClauseCondition("id_card_request_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition location_short_nm = new SQLSelectQueryWhereClauseCondition("location_short_nm", typeof(System.String));
        public ViewIdCardRequestsSQLSelectQuery()
        {
            this.SqlObjectName = "ViewIdCardRequests";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(requested_dt);
            this.lstConditions.Add(request_reason_id);
            this.lstConditions.Add(request_status_id);
            this.lstConditions.Add(valid_upto_dt);
            this.lstConditions.Add(request_status_dt);
            this.lstConditions.Add(remarks);
            this.lstConditions.Add(txn_ts);
            this.lstConditions.Add(Person_Nm);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(age);
            this.lstConditions.Add(id_card_request_status_nm);
            this.lstConditions.Add(location_short_nm);
        }
    }


    public class ViewIDCardRequestStatusSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition DependantNo = new SQLSelectQueryWhereClauseCondition("DependantNo", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition RelationID = new SQLSelectQueryWhereClauseCondition("RelationID", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition RelationName = new SQLSelectQueryWhereClauseCondition("RelationName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Dependant_person_cd = new SQLSelectQueryWhereClauseCondition("Dependant_person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition SewadarName = new SQLSelectQueryWhereClauseCondition("SewadarName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition SewadarID = new SQLSelectQueryWhereClauseCondition("SewadarID", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition DependantName = new SQLSelectQueryWhereClauseCondition("DependantName", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition DependantID = new SQLSelectQueryWhereClauseCondition("DependantID", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition PersonGender = new SQLSelectQueryWhereClauseCondition("PersonGender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DepGender = new SQLSelectQueryWhereClauseCondition("DepGender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition PersonMaritalStatus = new SQLSelectQueryWhereClauseCondition("PersonMaritalStatus", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DepMaritalStatus = new SQLSelectQueryWhereClauseCondition("DepMaritalStatus", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition PersonAge = new SQLSelectQueryWhereClauseCondition("PersonAge", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition DepandantAge = new SQLSelectQueryWhereClauseCondition("DepandantAge", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition PersonStatus = new SQLSelectQueryWhereClauseCondition("PersonStatus", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition StatusDate = new SQLSelectQueryWhereClauseCondition("StatusDate", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition SewadarType = new SQLSelectQueryWhereClauseCondition("SewadarType", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition SewadarTypeName = new SQLSelectQueryWhereClauseCondition("SewadarTypeName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition GradeID = new SQLSelectQueryWhereClauseCondition("GradeID", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition GradeName = new SQLSelectQueryWhereClauseCondition("GradeName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition WorkingUnitID = new SQLSelectQueryWhereClauseCondition("WorkingUnitID", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition WorkingUnitNm = new SQLSelectQueryWhereClauseCondition("WorkingUnitNm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DesignationID = new SQLSelectQueryWhereClauseCondition("DesignationID", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition DesignationName = new SQLSelectQueryWhereClauseCondition("DesignationName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition Location_Short_NM = new SQLSelectQueryWhereClauseCondition("Location_Short_NM", typeof(System.String));
        public ViewIDCardRequestStatusSQLSelectQuery()
        {
            this.SqlObjectName = "ViewIDCardRequestStatus";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(DependantNo);
            this.lstConditions.Add(RelationID);
            this.lstConditions.Add(RelationName);
            this.lstConditions.Add(Dependant_person_cd);
            this.lstConditions.Add(SewadarName);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(SewadarID);
            this.lstConditions.Add(DependantName);
            this.lstConditions.Add(DependantID);
            this.lstConditions.Add(PersonGender);
            this.lstConditions.Add(DepGender);
            this.lstConditions.Add(PersonMaritalStatus);
            this.lstConditions.Add(DepMaritalStatus);
            this.lstConditions.Add(PersonAge);
            this.lstConditions.Add(DepandantAge);
            this.lstConditions.Add(PersonStatus);
            this.lstConditions.Add(StatusDate);
            this.lstConditions.Add(SewadarType);
            this.lstConditions.Add(SewadarTypeName);
            this.lstConditions.Add(GradeID);
            this.lstConditions.Add(GradeName);
            this.lstConditions.Add(WorkingUnitID);
            this.lstConditions.Add(WorkingUnitNm);
            this.lstConditions.Add(DesignationID);
            this.lstConditions.Add(DesignationName);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(Location_Short_NM);
        }
    }


    public class ViewIdCardRequestStatusHistorySQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition requested_dt = new SQLSelectQueryWhereClauseCondition("requested_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition id_card_request_reason_nm = new SQLSelectQueryWhereClauseCondition("id_card_request_reason_nm", typeof(System.String));
        public ViewIdCardRequestStatusHistorySQLSelectQuery()
        {
            this.SqlObjectName = "ViewIdCardRequestStatusHistory";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(requested_dt);
            this.lstConditions.Add(id_card_request_reason_nm);
        }
    }


    public class ViewInitiationDetailsForeignerSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition SerialNo = new SQLSelectQueryWhereClauseCondition("SerialNo", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition ParchiNumber = new SQLSelectQueryWhereClauseCondition("ParchiNumber", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Patron = new SQLSelectQueryWhereClauseCondition("Patron", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition PlaceID = new SQLSelectQueryWhereClauseCondition("PlaceID", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition Place = new SQLSelectQueryWhereClauseCondition("Place", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition PersonName = new SQLSelectQueryWhereClauseCondition("PersonName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Sex = new SQLSelectQueryWhereClauseCondition("Sex", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition YOB = new SQLSelectQueryWhereClauseCondition("YOB", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition Profession = new SQLSelectQueryWhereClauseCondition("Profession", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition FatherHusbandName = new SQLSelectQueryWhereClauseCondition("FatherHusbandName", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition InitiationDateFrom = new SQLSelectQueryWhereClauseCondition("InitiationDateFrom", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition InitiationDateTo = new SQLSelectQueryWhereClauseCondition("InitiationDateTo", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition IndianOrigin = new SQLSelectQueryWhereClauseCondition("IndianOrigin", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition ReSittingDate = new SQLSelectQueryWhereClauseCondition("ReSittingDate", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Address = new SQLSelectQueryWhereClauseCondition("Address", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Country = new SQLSelectQueryWhereClauseCondition("Country", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition State = new SQLSelectQueryWhereClauseCondition("State", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition City = new SQLSelectQueryWhereClauseCondition("City", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition District = new SQLSelectQueryWhereClauseCondition("District", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition Postoffice = new SQLSelectQueryWhereClauseCondition("Postoffice", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition Village = new SQLSelectQueryWhereClauseCondition("Village", typeof(System.Int32));
        public ViewInitiationDetailsForeignerSQLSelectQuery()
        {
            this.SqlObjectName = "ViewInitiationDetailsForeigner";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(SerialNo);
            this.lstConditions.Add(ParchiNumber);
            this.lstConditions.Add(Patron);
            this.lstConditions.Add(PlaceID);
            this.lstConditions.Add(Place);
            this.lstConditions.Add(PersonName);
            this.lstConditions.Add(Sex);
            this.lstConditions.Add(YOB);
            this.lstConditions.Add(Profession);
            this.lstConditions.Add(FatherHusbandName);
            this.lstConditions.Add(InitiationDateFrom);
            this.lstConditions.Add(InitiationDateTo);
            this.lstConditions.Add(IndianOrigin);
            this.lstConditions.Add(ReSittingDate);
            this.lstConditions.Add(Address);
            this.lstConditions.Add(Country);
            this.lstConditions.Add(State);
            this.lstConditions.Add(City);
            this.lstConditions.Add(District);
            this.lstConditions.Add(Postoffice);
            this.lstConditions.Add(Village);
        }
    }


    public class ViewInitiationDetailsIndianSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition SerialNo = new SQLSelectQueryWhereClauseCondition("SerialNo", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition Patron = new SQLSelectQueryWhereClauseCondition("Patron", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition PlaceID = new SQLSelectQueryWhereClauseCondition("PlaceID", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition Place = new SQLSelectQueryWhereClauseCondition("Place", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition PersonName = new SQLSelectQueryWhereClauseCondition("PersonName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Sex = new SQLSelectQueryWhereClauseCondition("Sex", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition YOB = new SQLSelectQueryWhereClauseCondition("YOB", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Profession = new SQLSelectQueryWhereClauseCondition("Profession", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition FatherHusbandName = new SQLSelectQueryWhereClauseCondition("FatherHusbandName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition InitiationDateFrom = new SQLSelectQueryWhereClauseCondition("InitiationDateFrom", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition InitiationDateTo = new SQLSelectQueryWhereClauseCondition("InitiationDateTo", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition IndianOrigin = new SQLSelectQueryWhereClauseCondition("IndianOrigin", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition ReSittingDate = new SQLSelectQueryWhereClauseCondition("ReSittingDate", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition ParchiNumber = new SQLSelectQueryWhereClauseCondition("ParchiNumber", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Address = new SQLSelectQueryWhereClauseCondition("Address", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Country = new SQLSelectQueryWhereClauseCondition("Country", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition State = new SQLSelectQueryWhereClauseCondition("State", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition City = new SQLSelectQueryWhereClauseCondition("City", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition District = new SQLSelectQueryWhereClauseCondition("District", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Postoffice = new SQLSelectQueryWhereClauseCondition("Postoffice", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Village = new SQLSelectQueryWhereClauseCondition("Village", typeof(System.String));
        public ViewInitiationDetailsIndianSQLSelectQuery()
        {
            this.SqlObjectName = "ViewInitiationDetailsIndian";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(SerialNo);
            this.lstConditions.Add(Patron);
            this.lstConditions.Add(PlaceID);
            this.lstConditions.Add(Place);
            this.lstConditions.Add(PersonName);
            this.lstConditions.Add(Sex);
            this.lstConditions.Add(YOB);
            this.lstConditions.Add(Profession);
            this.lstConditions.Add(FatherHusbandName);
            this.lstConditions.Add(InitiationDateFrom);
            this.lstConditions.Add(InitiationDateTo);
            this.lstConditions.Add(IndianOrigin);
            this.lstConditions.Add(ReSittingDate);
            this.lstConditions.Add(ParchiNumber);
            this.lstConditions.Add(Address);
            this.lstConditions.Add(Country);
            this.lstConditions.Add(State);
            this.lstConditions.Add(City);
            this.lstConditions.Add(District);
            this.lstConditions.Add(Postoffice);
            this.lstConditions.Add(Village);
        }
    }


    public class ViewInsuranceInformationSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition file_no = new SQLSelectQueryWhereClauseCondition("file_no", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition name = new SQLSelectQueryWhereClauseCondition("name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition birth_dt = new SQLSelectQueryWhereClauseCondition("birth_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition status_id = new SQLSelectQueryWhereClauseCondition("status_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition grade_id = new SQLSelectQueryWhereClauseCondition("grade_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition grade_nm = new SQLSelectQueryWhereClauseCondition("grade_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_id = new SQLSelectQueryWhereClauseCondition("working_unit_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_id = new SQLSelectQueryWhereClauseCondition("designation_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition location_short_nm = new SQLSelectQueryWhereClauseCondition("location_short_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition insurance_type = new SQLSelectQueryWhereClauseCondition("insurance_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition is_insured = new SQLSelectQueryWhereClauseCondition("is_insured", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition not_insured_reason_id = new SQLSelectQueryWhereClauseCondition("not_insured_reason_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition remarks = new SQLSelectQueryWhereClauseCondition("remarks", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition effective_from = new SQLSelectQueryWhereClauseCondition("effective_from", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition effective_till = new SQLSelectQueryWhereClauseCondition("effective_till", typeof(System.DateTime));
        public ViewInsuranceInformationSQLSelectQuery()
        {
            this.SqlObjectName = "ViewInsuranceInformation";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(file_no);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(name);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(birth_dt);
            this.lstConditions.Add(age);
            this.lstConditions.Add(status_id);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(grade_id);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(grade_nm);
            this.lstConditions.Add(working_unit_id);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(designation_id);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(location_short_nm);
            this.lstConditions.Add(insurance_type);
            this.lstConditions.Add(is_insured);
            this.lstConditions.Add(not_insured_reason_id);
            this.lstConditions.Add(remarks);
            this.lstConditions.Add(effective_from);
            this.lstConditions.Add(effective_till);
        }
    }


    public class ViewInsuranceInformationAvoidDuplicateSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition file_no = new SQLSelectQueryWhereClauseCondition("file_no", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition name = new SQLSelectQueryWhereClauseCondition("name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition birth_dt = new SQLSelectQueryWhereClauseCondition("birth_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition status_id = new SQLSelectQueryWhereClauseCondition("status_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition grade_id = new SQLSelectQueryWhereClauseCondition("grade_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition grade_nm = new SQLSelectQueryWhereClauseCondition("grade_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_id = new SQLSelectQueryWhereClauseCondition("working_unit_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_id = new SQLSelectQueryWhereClauseCondition("designation_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition location_short_nm = new SQLSelectQueryWhereClauseCondition("location_short_nm", typeof(System.String));
        public ViewInsuranceInformationAvoidDuplicateSQLSelectQuery()
        {
            this.SqlObjectName = "ViewInsuranceInformationAvoidDuplicate";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(file_no);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(name);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(birth_dt);
            this.lstConditions.Add(age);
            this.lstConditions.Add(status_id);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(grade_id);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(grade_nm);
            this.lstConditions.Add(working_unit_id);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(designation_id);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(location_short_nm);
        }
    }


    public class ViewMedicalCheckupDetailsSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition file_no = new SQLSelectQueryWhereClauseCondition("file_no", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition name = new SQLSelectQueryWhereClauseCondition("name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition title = new SQLSelectQueryWhereClauseCondition("title", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition first_nm = new SQLSelectQueryWhereClauseCondition("first_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition middle_nm = new SQLSelectQueryWhereClauseCondition("middle_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition short_nm = new SQLSelectQueryWhereClauseCondition("short_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition last_nm = new SQLSelectQueryWhereClauseCondition("last_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition fh_name_type = new SQLSelectQueryWhereClauseCondition("fh_name_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition father_husband_nm = new SQLSelectQueryWhereClauseCondition("father_husband_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition birth_dt = new SQLSelectQueryWhereClauseCondition("birth_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition blood_group = new SQLSelectQueryWhereClauseCondition("blood_group", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition is_diabetic = new SQLSelectQueryWhereClauseCondition("is_diabetic", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition medical_status = new SQLSelectQueryWhereClauseCondition("medical_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition medical_status_dt = new SQLSelectQueryWhereClauseCondition("medical_status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition medical_status_remarks = new SQLSelectQueryWhereClauseCondition("medical_status_remarks", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition status_id = new SQLSelectQueryWhereClauseCondition("status_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition person_status_reason_id = new SQLSelectQueryWhereClauseCondition("person_status_reason_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_status_reason_nm = new SQLSelectQueryWhereClauseCondition("person_status_reason_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition grade_id = new SQLSelectQueryWhereClauseCondition("grade_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition trial_dt = new SQLSelectQueryWhereClauseCondition("trial_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition joining_dt = new SQLSelectQueryWhereClauseCondition("joining_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition initials = new SQLSelectQueryWhereClauseCondition("initials", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition grade_nm = new SQLSelectQueryWhereClauseCondition("grade_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_id = new SQLSelectQueryWhereClauseCondition("working_unit_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_id = new SQLSelectQueryWhereClauseCondition("designation_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition notification_dt = new SQLSelectQueryWhereClauseCondition("notification_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition Notification_no = new SQLSelectQueryWhereClauseCondition("Notification_no", typeof(System.String));
        public ViewMedicalCheckupDetailsSQLSelectQuery()
        {
            this.SqlObjectName = "ViewMedicalCheckupDetails";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(file_no);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(name);
            this.lstConditions.Add(title);
            this.lstConditions.Add(first_nm);
            this.lstConditions.Add(middle_nm);
            this.lstConditions.Add(short_nm);
            this.lstConditions.Add(last_nm);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(fh_name_type);
            this.lstConditions.Add(father_husband_nm);
            this.lstConditions.Add(birth_dt);
            this.lstConditions.Add(blood_group);
            this.lstConditions.Add(is_diabetic);
            this.lstConditions.Add(medical_status);
            this.lstConditions.Add(medical_status_dt);
            this.lstConditions.Add(medical_status_remarks);
            this.lstConditions.Add(status_id);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(person_status_reason_id);
            this.lstConditions.Add(person_status_reason_nm);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(age);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(grade_id);
            this.lstConditions.Add(trial_dt);
            this.lstConditions.Add(joining_dt);
            this.lstConditions.Add(initials);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(grade_nm);
            this.lstConditions.Add(working_unit_id);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(designation_id);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(notification_dt);
            this.lstConditions.Add(Notification_no);
        }
    }


    public class ViewNotificationsSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition file_no = new SQLSelectQueryWhereClauseCondition("file_no", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition title = new SQLSelectQueryWhereClauseCondition("title", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition name = new SQLSelectQueryWhereClauseCondition("name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition birth_dt = new SQLSelectQueryWhereClauseCondition("birth_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition status_id = new SQLSelectQueryWhereClauseCondition("status_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition grade_id = new SQLSelectQueryWhereClauseCondition("grade_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition grade_nm = new SQLSelectQueryWhereClauseCondition("grade_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_id = new SQLSelectQueryWhereClauseCondition("working_unit_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_id = new SQLSelectQueryWhereClauseCondition("designation_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition notificationWorkingUnitId = new SQLSelectQueryWhereClauseCondition("notificationWorkingUnitId", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition notificationWorkingUnitName = new SQLSelectQueryWhereClauseCondition("notificationWorkingUnitName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition notificationDesignationId = new SQLSelectQueryWhereClauseCondition("notificationDesignationId", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition notificationSewadarTypeId = new SQLSelectQueryWhereClauseCondition("notificationSewadarTypeId", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition notificationGradeId = new SQLSelectQueryWhereClauseCondition("notificationGradeId", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition notificationStatusId = new SQLSelectQueryWhereClauseCondition("notificationStatusId", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition notificationReasonId = new SQLSelectQueryWhereClauseCondition("notificationReasonId", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition notificationGradeName = new SQLSelectQueryWhereClauseCondition("notificationGradeName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition notificationSewadarTypeName = new SQLSelectQueryWhereClauseCondition("notificationSewadarTypeName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition notificationPersonStatusName = new SQLSelectQueryWhereClauseCondition("notificationPersonStatusName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition notificationStatusReasonName = new SQLSelectQueryWhereClauseCondition("notificationStatusReasonName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition notificationDesignationName = new SQLSelectQueryWhereClauseCondition("notificationDesignationName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition notification_id = new SQLSelectQueryWhereClauseCondition("notification_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition notification_dt = new SQLSelectQueryWhereClauseCondition("notification_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition notification_status_cd = new SQLSelectQueryWhereClauseCondition("notification_status_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition notification_status_nm = new SQLSelectQueryWhereClauseCondition("notification_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition template_id = new SQLSelectQueryWhereClauseCondition("template_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition effective_dt = new SQLSelectQueryWhereClauseCondition("effective_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition notification_status_dt = new SQLSelectQueryWhereClauseCondition("notification_status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition template_nm = new SQLSelectQueryWhereClauseCondition("template_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Notification_No = new SQLSelectQueryWhereClauseCondition("Notification_No", typeof(System.String));
        public ViewNotificationsSQLSelectQuery()
        {
            this.SqlObjectName = "ViewNotifications";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(file_no);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(title);
            this.lstConditions.Add(name);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(birth_dt);
            this.lstConditions.Add(age);
            this.lstConditions.Add(status_id);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(grade_id);
            this.lstConditions.Add(grade_nm);
            this.lstConditions.Add(working_unit_id);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(designation_id);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(notificationWorkingUnitId);
            this.lstConditions.Add(notificationWorkingUnitName);
            this.lstConditions.Add(notificationDesignationId);
            this.lstConditions.Add(notificationSewadarTypeId);
            this.lstConditions.Add(notificationGradeId);
            this.lstConditions.Add(notificationStatusId);
            this.lstConditions.Add(notificationReasonId);
            this.lstConditions.Add(notificationGradeName);
            this.lstConditions.Add(notificationSewadarTypeName);
            this.lstConditions.Add(notificationPersonStatusName);
            this.lstConditions.Add(notificationStatusReasonName);
            this.lstConditions.Add(notificationDesignationName);
            this.lstConditions.Add(notification_id);
            this.lstConditions.Add(notification_dt);
            this.lstConditions.Add(notification_status_cd);
            this.lstConditions.Add(notification_status_nm);
            this.lstConditions.Add(template_id);
            this.lstConditions.Add(effective_dt);
            this.lstConditions.Add(notification_status_dt);
            this.lstConditions.Add(template_nm);
            this.lstConditions.Add(Notification_No);
        }
    }


    public class ViewNotificationsEditSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition template_id = new SQLSelectQueryWhereClauseCondition("template_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition template_nm = new SQLSelectQueryWhereClauseCondition("template_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition template_subject = new SQLSelectQueryWhereClauseCondition("template_subject", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition can_use_for_multiple_sewadars = new SQLSelectQueryWhereClauseCondition("can_use_for_multiple_sewadars", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition effective_from = new SQLSelectQueryWhereClauseCondition("effective_from", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition effective_till = new SQLSelectQueryWhereClauseCondition("effective_till", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition txn_ts = new SQLSelectQueryWhereClauseCondition("txn_ts", typeof(System.Byte[]));
        public ViewNotificationsEditSQLSelectQuery()
        {
            this.SqlObjectName = "ViewNotificationsEdit";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(template_id);
            this.lstConditions.Add(template_nm);
            this.lstConditions.Add(template_subject);
            this.lstConditions.Add(can_use_for_multiple_sewadars);
            this.lstConditions.Add(effective_from);
            this.lstConditions.Add(effective_till);
            this.lstConditions.Add(txn_ts);
        }
    }


    public class ViewNotificationTemplatesSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition template_id = new SQLSelectQueryWhereClauseCondition("template_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition template_nm = new SQLSelectQueryWhereClauseCondition("template_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition template_subject = new SQLSelectQueryWhereClauseCondition("template_subject", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition can_use_for_multiple_sewadars = new SQLSelectQueryWhereClauseCondition("can_use_for_multiple_sewadars", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition effective_from = new SQLSelectQueryWhereClauseCondition("effective_from", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition effective_till = new SQLSelectQueryWhereClauseCondition("effective_till", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition txn_ts = new SQLSelectQueryWhereClauseCondition("txn_ts", typeof(System.Byte[]));
        public ViewNotificationTemplatesSQLSelectQuery()
        {
            this.SqlObjectName = "ViewNotificationTemplates";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(template_id);
            this.lstConditions.Add(template_nm);
            this.lstConditions.Add(template_subject);
            this.lstConditions.Add(can_use_for_multiple_sewadars);
            this.lstConditions.Add(effective_from);
            this.lstConditions.Add(effective_till);
            this.lstConditions.Add(txn_ts);
        }
    }


    public class ViewQuerySQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition PersonID = new SQLSelectQueryWhereClauseCondition("PersonID", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_id = new SQLSelectQueryWhereClauseCondition("dependant_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition dependant_person_cd = new SQLSelectQueryWhereClauseCondition("dependant_person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DependantName = new SQLSelectQueryWhereClauseCondition("DependantName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Dependant_type_cd = new SQLSelectQueryWhereClauseCondition("Dependant_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DependantGender = new SQLSelectQueryWhereClauseCondition("DependantGender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DependantMaritalStatus = new SQLSelectQueryWhereClauseCondition("DependantMaritalStatus", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DependantSkill = new SQLSelectQueryWhereClauseCondition("DependantSkill", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DependantQualYear = new SQLSelectQueryWhereClauseCondition("DependantQualYear", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition DependantStatusName = new SQLSelectQueryWhereClauseCondition("DependantStatusName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DependantStatusDate = new SQLSelectQueryWhereClauseCondition("DependantStatusDate", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition document_no = new SQLSelectQueryWhereClauseCondition("document_no", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition document_type_nm = new SQLSelectQueryWhereClauseCondition("document_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DependantAge = new SQLSelectQueryWhereClauseCondition("DependantAge", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition PersonName = new SQLSelectQueryWhereClauseCondition("PersonName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition spouse_sewadar_id = new SQLSelectQueryWhereClauseCondition("spouse_sewadar_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition house_id = new SQLSelectQueryWhereClauseCondition("house_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition job_type = new SQLSelectQueryWhereClauseCondition("job_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition blood_group = new SQLSelectQueryWhereClauseCondition("blood_group", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Status_id = new SQLSelectQueryWhereClauseCondition("Status_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Age = new SQLSelectQueryWhereClauseCondition("Age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition is_active = new SQLSelectQueryWhereClauseCondition("is_active", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition institution_nm = new SQLSelectQueryWhereClauseCondition("institution_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition qualification_nm = new SQLSelectQueryWhereClauseCondition("qualification_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition qlfctn_subject_nm = new SQLSelectQueryWhereClauseCondition("qlfctn_subject_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition grade_nm = new SQLSelectQueryWhereClauseCondition("grade_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition insurance_type = new SQLSelectQueryWhereClauseCondition("insurance_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition is_insured = new SQLSelectQueryWhereClauseCondition("is_insured", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition organization = new SQLSelectQueryWhereClauseCondition("organization", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition jobDescription = new SQLSelectQueryWhereClauseCondition("jobDescription", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition department = new SQLSelectQueryWhereClauseCondition("department", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition satsang_center_id = new SQLSelectQueryWhereClauseCondition("satsang_center_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition satsang_centre_nm = new SQLSelectQueryWhereClauseCondition("satsang_centre_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition responsibility = new SQLSelectQueryWhereClauseCondition("responsibility", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition skill_nm = new SQLSelectQueryWhereClauseCondition("skill_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition relationship_id = new SQLSelectQueryWhereClauseCondition("relationship_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition relation_nm = new SQLSelectQueryWhereClauseCondition("relation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DependantQual = new SQLSelectQueryWhereClauseCondition("DependantQual", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DependantSubj = new SQLSelectQueryWhereClauseCondition("DependantSubj", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition IS_Dependant = new SQLSelectQueryWhereClauseCondition("IS_Dependant", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition IS_DoingSewa = new SQLSelectQueryWhereClauseCondition("IS_DoingSewa", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition IS_StayingAtDera = new SQLSelectQueryWhereClauseCondition("IS_StayingAtDera", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Occupation = new SQLSelectQueryWhereClauseCondition("Occupation", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition InstitutionName = new SQLSelectQueryWhereClauseCondition("InstitutionName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition location_short_nm = new SQLSelectQueryWhereClauseCondition("location_short_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Spouse_Sewadar_Nm = new SQLSelectQueryWhereClauseCondition("Spouse_Sewadar_Nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Permanent_address1 = new SQLSelectQueryWhereClauseCondition("Permanent_address1", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Permanent_address_City_nm = new SQLSelectQueryWhereClauseCondition("Permanent_address_City_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Permanent_address_State_nm = new SQLSelectQueryWhereClauseCondition("Permanent_address_State_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Permanent_address_Country_nm = new SQLSelectQueryWhereClauseCondition("Permanent_address_Country_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Permanent_address_Pincode = new SQLSelectQueryWhereClauseCondition("Permanent_address_Pincode", typeof(System.String));
        public ViewQuerySQLSelectQuery()
        {
            this.SqlObjectName = "ViewQuery";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(PersonID);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(dependant_id);
            this.lstConditions.Add(dependant_person_cd);
            this.lstConditions.Add(DependantName);
            this.lstConditions.Add(Dependant_type_cd);
            this.lstConditions.Add(DependantGender);
            this.lstConditions.Add(DependantMaritalStatus);
            this.lstConditions.Add(DependantSkill);
            this.lstConditions.Add(DependantQualYear);
            this.lstConditions.Add(DependantStatusName);
            this.lstConditions.Add(DependantStatusDate);
            this.lstConditions.Add(document_no);
            this.lstConditions.Add(document_type_nm);
            this.lstConditions.Add(DependantAge);
            this.lstConditions.Add(PersonName);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(spouse_sewadar_id);
            this.lstConditions.Add(house_id);
            this.lstConditions.Add(job_type);
            this.lstConditions.Add(blood_group);
            this.lstConditions.Add(Status_id);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(Age);
            this.lstConditions.Add(is_active);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(institution_nm);
            this.lstConditions.Add(qualification_nm);
            this.lstConditions.Add(qlfctn_subject_nm);
            this.lstConditions.Add(grade_nm);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(insurance_type);
            this.lstConditions.Add(is_insured);
            this.lstConditions.Add(organization);
            this.lstConditions.Add(jobDescription);
            this.lstConditions.Add(department);
            this.lstConditions.Add(satsang_center_id);
            this.lstConditions.Add(satsang_centre_nm);
            this.lstConditions.Add(responsibility);
            this.lstConditions.Add(skill_nm);
            this.lstConditions.Add(relationship_id);
            this.lstConditions.Add(relation_nm);
            this.lstConditions.Add(DependantQual);
            this.lstConditions.Add(DependantSubj);
            this.lstConditions.Add(IS_Dependant);
            this.lstConditions.Add(IS_DoingSewa);
            this.lstConditions.Add(IS_StayingAtDera);
            this.lstConditions.Add(Occupation);
            this.lstConditions.Add(InstitutionName);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(location_short_nm);
            this.lstConditions.Add(Spouse_Sewadar_Nm);
            this.lstConditions.Add(Permanent_address1);
            this.lstConditions.Add(Permanent_address_City_nm);
            this.lstConditions.Add(Permanent_address_State_nm);
            this.lstConditions.Add(Permanent_address_Country_nm);
            this.lstConditions.Add(Permanent_address_Pincode);
        }
    }


    public class ViewQuerySewadarResidentVisitorSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition PersonID = new SQLSelectQueryWhereClauseCondition("PersonID", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dependant_id = new SQLSelectQueryWhereClauseCondition("dependant_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition dependant_person_cd = new SQLSelectQueryWhereClauseCondition("dependant_person_cd", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition DependantName = new SQLSelectQueryWhereClauseCondition("DependantName", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition DependantGender = new SQLSelectQueryWhereClauseCondition("DependantGender", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition DependantMaritalStatus = new SQLSelectQueryWhereClauseCondition("DependantMaritalStatus", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition DependantSkill = new SQLSelectQueryWhereClauseCondition("DependantSkill", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition DependantQualYear = new SQLSelectQueryWhereClauseCondition("DependantQualYear", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition DependantStatusName = new SQLSelectQueryWhereClauseCondition("DependantStatusName", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition DependantStatusDate = new SQLSelectQueryWhereClauseCondition("DependantStatusDate", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition document_no = new SQLSelectQueryWhereClauseCondition("document_no", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition document_type_nm = new SQLSelectQueryWhereClauseCondition("document_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition DependantAge = new SQLSelectQueryWhereClauseCondition("DependantAge", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition PersonName = new SQLSelectQueryWhereClauseCondition("PersonName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition spouse_sewadar_id = new SQLSelectQueryWhereClauseCondition("spouse_sewadar_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition house_id = new SQLSelectQueryWhereClauseCondition("house_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition job_type = new SQLSelectQueryWhereClauseCondition("job_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition blood_group = new SQLSelectQueryWhereClauseCondition("blood_group", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Status_id = new SQLSelectQueryWhereClauseCondition("Status_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Age = new SQLSelectQueryWhereClauseCondition("Age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition is_active = new SQLSelectQueryWhereClauseCondition("is_active", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition institution_nm = new SQLSelectQueryWhereClauseCondition("institution_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition qualification_nm = new SQLSelectQueryWhereClauseCondition("qualification_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition qlfctn_subject_nm = new SQLSelectQueryWhereClauseCondition("qlfctn_subject_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition grade_nm = new SQLSelectQueryWhereClauseCondition("grade_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition insurance_type = new SQLSelectQueryWhereClauseCondition("insurance_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition is_insured = new SQLSelectQueryWhereClauseCondition("is_insured", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition organization = new SQLSelectQueryWhereClauseCondition("organization", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition jobDescription = new SQLSelectQueryWhereClauseCondition("jobDescription", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition department = new SQLSelectQueryWhereClauseCondition("department", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition satsang_center_id = new SQLSelectQueryWhereClauseCondition("satsang_center_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition satsang_centre_nm = new SQLSelectQueryWhereClauseCondition("satsang_centre_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition responsibility = new SQLSelectQueryWhereClauseCondition("responsibility", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition skill_nm = new SQLSelectQueryWhereClauseCondition("skill_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition relationship_id = new SQLSelectQueryWhereClauseCondition("relationship_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition relation_nm = new SQLSelectQueryWhereClauseCondition("relation_nm", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition DependantQual = new SQLSelectQueryWhereClauseCondition("DependantQual", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition DependantSubj = new SQLSelectQueryWhereClauseCondition("DependantSubj", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition IS_Dependant = new SQLSelectQueryWhereClauseCondition("IS_Dependant", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition IS_DoingSewa = new SQLSelectQueryWhereClauseCondition("IS_DoingSewa", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition IS_StayingAtDera = new SQLSelectQueryWhereClauseCondition("IS_StayingAtDera", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition Occupation = new SQLSelectQueryWhereClauseCondition("Occupation", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition InstitutionName = new SQLSelectQueryWhereClauseCondition("InstitutionName", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition location_short_nm = new SQLSelectQueryWhereClauseCondition("location_short_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Spouse_Sewadar_Nm = new SQLSelectQueryWhereClauseCondition("Spouse_Sewadar_Nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Permanent_address1 = new SQLSelectQueryWhereClauseCondition("Permanent_address1", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Permanent_address_City_nm = new SQLSelectQueryWhereClauseCondition("Permanent_address_City_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Permanent_address_State_nm = new SQLSelectQueryWhereClauseCondition("Permanent_address_State_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Permanent_address_Country_nm = new SQLSelectQueryWhereClauseCondition("Permanent_address_Country_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Permanent_address_Pincode = new SQLSelectQueryWhereClauseCondition("Permanent_address_Pincode", typeof(System.String));
        public ViewQuerySewadarResidentVisitorSQLSelectQuery()
        {
            this.SqlObjectName = "ViewQuerySewadarResidentVisitor";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(PersonID);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(dependant_id);
            this.lstConditions.Add(dependant_person_cd);
            this.lstConditions.Add(DependantName);
            this.lstConditions.Add(DependantGender);
            this.lstConditions.Add(DependantMaritalStatus);
            this.lstConditions.Add(DependantSkill);
            this.lstConditions.Add(DependantQualYear);
            this.lstConditions.Add(DependantStatusName);
            this.lstConditions.Add(DependantStatusDate);
            this.lstConditions.Add(document_no);
            this.lstConditions.Add(document_type_nm);
            this.lstConditions.Add(DependantAge);
            this.lstConditions.Add(PersonName);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(spouse_sewadar_id);
            this.lstConditions.Add(house_id);
            this.lstConditions.Add(job_type);
            this.lstConditions.Add(blood_group);
            this.lstConditions.Add(Status_id);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(Age);
            this.lstConditions.Add(is_active);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(institution_nm);
            this.lstConditions.Add(qualification_nm);
            this.lstConditions.Add(qlfctn_subject_nm);
            this.lstConditions.Add(grade_nm);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(insurance_type);
            this.lstConditions.Add(is_insured);
            this.lstConditions.Add(organization);
            this.lstConditions.Add(jobDescription);
            this.lstConditions.Add(department);
            this.lstConditions.Add(satsang_center_id);
            this.lstConditions.Add(satsang_centre_nm);
            this.lstConditions.Add(responsibility);
            this.lstConditions.Add(skill_nm);
            this.lstConditions.Add(relationship_id);
            this.lstConditions.Add(relation_nm);
            this.lstConditions.Add(DependantQual);
            this.lstConditions.Add(DependantSubj);
            this.lstConditions.Add(IS_Dependant);
            this.lstConditions.Add(IS_DoingSewa);
            this.lstConditions.Add(IS_StayingAtDera);
            this.lstConditions.Add(Occupation);
            this.lstConditions.Add(InstitutionName);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(location_short_nm);
            this.lstConditions.Add(Spouse_Sewadar_Nm);
            this.lstConditions.Add(Permanent_address1);
            this.lstConditions.Add(Permanent_address_City_nm);
            this.lstConditions.Add(Permanent_address_State_nm);
            this.lstConditions.Add(Permanent_address_Country_nm);
            this.lstConditions.Add(Permanent_address_Pincode);
        }
    }


    public class ViewResidentOrVisitorConfidentialInformationSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition job_type = new SQLSelectQueryWhereClauseCondition("job_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition name = new SQLSelectQueryWhereClauseCondition("name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition monthly_income = new SQLSelectQueryWhereClauseCondition("monthly_income", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition currency_id = new SQLSelectQueryWhereClauseCondition("currency_id", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition currency_abbr = new SQLSelectQueryWhereClauseCondition("currency_abbr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition income_source_nm = new SQLSelectQueryWhereClauseCondition("income_source_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition commercial_activity = new SQLSelectQueryWhereClauseCondition("commercial_activity", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition location_short_nm = new SQLSelectQueryWhereClauseCondition("location_short_nm", typeof(System.String));
        public ViewResidentOrVisitorConfidentialInformationSQLSelectQuery()
        {
            this.SqlObjectName = "ViewResidentOrVisitorConfidentialInformation";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(job_type);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(name);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(age);
            this.lstConditions.Add(monthly_income);
            this.lstConditions.Add(currency_id);
            this.lstConditions.Add(currency_abbr);
            this.lstConditions.Add(income_source_nm);
            this.lstConditions.Add(commercial_activity);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(location_short_nm);
        }
    }


    public class ViewResidentOrVisitorDetailsSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition name = new SQLSelectQueryWhereClauseCondition("name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Age = new SQLSelectQueryWhereClauseCondition("Age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition location_short_nm = new SQLSelectQueryWhereClauseCondition("location_short_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public ViewResidentOrVisitorDetailsSQLSelectQuery()
        {
            this.SqlObjectName = "ViewResidentOrVisitorDetails";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(name);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(Age);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(location_short_nm);
            this.lstConditions.Add(person_status_nm);
        }
    }


    public class ViewResidentsORVisitorsDetailsSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition title = new SQLSelectQueryWhereClauseCondition("title", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition first_nm = new SQLSelectQueryWhereClauseCondition("first_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition middle_nm = new SQLSelectQueryWhereClauseCondition("middle_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition last_nm = new SQLSelectQueryWhereClauseCondition("last_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition short_nm = new SQLSelectQueryWhereClauseCondition("short_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition file_no = new SQLSelectQueryWhereClauseCondition("file_no", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition fh_name_type = new SQLSelectQueryWhereClauseCondition("fh_name_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition father_husband_nm = new SQLSelectQueryWhereClauseCondition("father_husband_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition birth_dt = new SQLSelectQueryWhereClauseCondition("birth_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition Age = new SQLSelectQueryWhereClauseCondition("Age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition initiation_id = new SQLSelectQueryWhereClauseCondition("initiation_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition place_nm = new SQLSelectQueryWhereClauseCondition("place_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition status_id = new SQLSelectQueryWhereClauseCondition("status_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition status_reason_id = new SQLSelectQueryWhereClauseCondition("status_reason_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_status_reason_nm = new SQLSelectQueryWhereClauseCondition("person_status_reason_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition Relation_ID = new SQLSelectQueryWhereClauseCondition("Relation_ID", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition relation_nm = new SQLSelectQueryWhereClauseCondition("relation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition next_of_kin_nm = new SQLSelectQueryWhereClauseCondition("next_of_kin_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition location_short_nm = new SQLSelectQueryWhereClauseCondition("location_short_nm", typeof(System.String));
        public ViewResidentsORVisitorsDetailsSQLSelectQuery()
        {
            this.SqlObjectName = "ViewResidentsORVisitorsDetails";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(title);
            this.lstConditions.Add(first_nm);
            this.lstConditions.Add(middle_nm);
            this.lstConditions.Add(last_nm);
            this.lstConditions.Add(short_nm);
            this.lstConditions.Add(file_no);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(fh_name_type);
            this.lstConditions.Add(father_husband_nm);
            this.lstConditions.Add(birth_dt);
            this.lstConditions.Add(Age);
            this.lstConditions.Add(initiation_id);
            this.lstConditions.Add(place_nm);
            this.lstConditions.Add(status_id);
            this.lstConditions.Add(status_reason_id);
            this.lstConditions.Add(person_status_reason_nm);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(Relation_ID);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(relation_nm);
            this.lstConditions.Add(next_of_kin_nm);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(location_short_nm);
        }
    }


    public class ViewResidentsOrVisitorsExperienceDetailsSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition job_type = new SQLSelectQueryWhereClauseCondition("job_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition name = new SQLSelectQueryWhereClauseCondition("name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public ViewResidentsOrVisitorsExperienceDetailsSQLSelectQuery()
        {
            this.SqlObjectName = "ViewResidentsOrVisitorsExperienceDetails";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(job_type);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(name);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(age);
            this.lstConditions.Add(housing_location_addr);
        }
    }


    public class ViewResidentsOrVisitorsExperienceDetailsForRetrevingSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition job_type = new SQLSelectQueryWhereClauseCondition("job_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition name = new SQLSelectQueryWhereClauseCondition("name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public ViewResidentsOrVisitorsExperienceDetailsForRetrevingSQLSelectQuery()
        {
            this.SqlObjectName = "ViewResidentsOrVisitorsExperienceDetailsForRetreving";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(job_type);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(name);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(age);
            this.lstConditions.Add(housing_location_addr);
        }
    }


    public class ViewSecurityClearanceSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition name = new SQLSelectQueryWhereClauseCondition("name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition medical_status = new SQLSelectQueryWhereClauseCondition("medical_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition medical_status_remarks = new SQLSelectQueryWhereClauseCondition("medical_status_remarks", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition security_status = new SQLSelectQueryWhereClauseCondition("security_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition security_status_dt = new SQLSelectQueryWhereClauseCondition("security_status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition grade_id = new SQLSelectQueryWhereClauseCondition("grade_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition grade_nm = new SQLSelectQueryWhereClauseCondition("grade_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_id = new SQLSelectQueryWhereClauseCondition("working_unit_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_id = new SQLSelectQueryWhereClauseCondition("designation_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition introduced_by = new SQLSelectQueryWhereClauseCondition("introduced_by", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Sponsor_Sewadar_Nm = new SQLSelectQueryWhereClauseCondition("Sponsor_Sewadar_Nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition joining_dt = new SQLSelectQueryWhereClauseCondition("joining_dt", typeof(System.DateTime));
        public ViewSecurityClearanceSQLSelectQuery()
        {
            this.SqlObjectName = "ViewSecurityClearance";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(name);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(age);
            this.lstConditions.Add(medical_status);
            this.lstConditions.Add(medical_status_remarks);
            this.lstConditions.Add(security_status);
            this.lstConditions.Add(security_status_dt);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(grade_id);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(grade_nm);
            this.lstConditions.Add(working_unit_id);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(designation_id);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(introduced_by);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(Sponsor_Sewadar_Nm);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(joining_dt);
        }
    }


    public class ViewSewadarContactDetailsSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition txn_ts = new SQLSelectQueryWhereClauseCondition("txn_ts", typeof(System.Byte[]));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition name = new SQLSelectQueryWhereClauseCondition("name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition grade_nm = new SQLSelectQueryWhereClauseCondition("grade_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition status_id = new SQLSelectQueryWhereClauseCondition("status_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dera_houses = new SQLSelectQueryWhereClauseCondition("dera_houses", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Permanent_address_City_nm = new SQLSelectQueryWhereClauseCondition("Permanent_address_City_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Corr_address_City_nm = new SQLSelectQueryWhereClauseCondition("Corr_address_City_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Permanent_address_Pincode = new SQLSelectQueryWhereClauseCondition("Permanent_address_Pincode", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Corr_address_Pincode = new SQLSelectQueryWhereClauseCondition("Corr_address_Pincode", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Correspondence_address_State_nm = new SQLSelectQueryWhereClauseCondition("Correspondence_address_State_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Permanent_address_State_nm = new SQLSelectQueryWhereClauseCondition("Permanent_address_State_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Permanent_address_Country_nm = new SQLSelectQueryWhereClauseCondition("Permanent_address_Country_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Corr_address_Country_nm = new SQLSelectQueryWhereClauseCondition("Corr_address_Country_nm", typeof(System.String));
        public ViewSewadarContactDetailsSQLSelectQuery()
        {
            this.SqlObjectName = "ViewSewadarContactDetails";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(txn_ts);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(name);
            this.lstConditions.Add(age);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(grade_nm);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(status_id);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(dera_houses);
            this.lstConditions.Add(Permanent_address_City_nm);
            this.lstConditions.Add(Corr_address_City_nm);
            this.lstConditions.Add(Permanent_address_Pincode);
            this.lstConditions.Add(Corr_address_Pincode);
            this.lstConditions.Add(Correspondence_address_State_nm);
            this.lstConditions.Add(Permanent_address_State_nm);
            this.lstConditions.Add(Permanent_address_Country_nm);
            this.lstConditions.Add(Corr_address_Country_nm);
        }
    }


    public class ViewSewadarContractDetailsSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition name = new SQLSelectQueryWhereClauseCondition("name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition grade_nm = new SQLSelectQueryWhereClauseCondition("grade_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition status_id = new SQLSelectQueryWhereClauseCondition("status_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition Scale = new SQLSelectQueryWhereClauseCondition("Scale", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition Family = new SQLSelectQueryWhereClauseCondition("Family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition address_line_1 = new SQLSelectQueryWhereClauseCondition("address_line_1", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition location_short_nm = new SQLSelectQueryWhereClauseCondition("location_short_nm", typeof(System.String));
        public ViewSewadarContractDetailsSQLSelectQuery()
        {
            this.SqlObjectName = "ViewSewadarContractDetails";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(name);
            this.lstConditions.Add(age);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(grade_nm);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(status_id);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(Scale);
            this.lstConditions.Add(Family);
            this.lstConditions.Add(address_line_1);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(location_short_nm);
        }
    }


    public class ViewSewadarDetailsSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition name = new SQLSelectQueryWhereClauseCondition("name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition grade_nm = new SQLSelectQueryWhereClauseCondition("grade_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition location_short_nm = new SQLSelectQueryWhereClauseCondition("location_short_nm", typeof(System.String));
        public ViewSewadarDetailsSQLSelectQuery()
        {
            this.SqlObjectName = "ViewSewadarDetails";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(name);
            this.lstConditions.Add(age);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(grade_nm);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(location_short_nm);
        }
    }


    public class ViewSewadarOfficeInformationSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_cd = new SQLSelectQueryWhereClauseCondition("person_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition PersonName = new SQLSelectQueryWhereClauseCondition("PersonName", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition file_no = new SQLSelectQueryWhereClauseCondition("file_no", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_id = new SQLSelectQueryWhereClauseCondition("working_unit_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_id = new SQLSelectQueryWhereClauseCondition("designation_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition Sewadartype_nm = new SQLSelectQueryWhereClauseCondition("Sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition grade_id = new SQLSelectQueryWhereClauseCondition("grade_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition trial_dt = new SQLSelectQueryWhereClauseCondition("trial_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition joining_dt = new SQLSelectQueryWhereClauseCondition("joining_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition payment_mode = new SQLSelectQueryWhereClauseCondition("payment_mode", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition bank_nm = new SQLSelectQueryWhereClauseCondition("bank_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition bank_account_cd = new SQLSelectQueryWhereClauseCondition("bank_account_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition accmdtn_for_adults = new SQLSelectQueryWhereClauseCondition("accmdtn_for_adults", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition accmdtn_for_children = new SQLSelectQueryWhereClauseCondition("accmdtn_for_children", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition grade_nm = new SQLSelectQueryWhereClauseCondition("grade_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition family = new SQLSelectQueryWhereClauseCondition("family", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition status_id = new SQLSelectQueryWhereClauseCondition("status_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition StatusDt = new SQLSelectQueryWhereClauseCondition("StatusDt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition person_status_reason_id = new SQLSelectQueryWhereClauseCondition("person_status_reason_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition person_status_reason_nm = new SQLSelectQueryWhereClauseCondition("person_status_reason_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition medical_Status = new SQLSelectQueryWhereClauseCondition("medical_Status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition medical_status_remarks = new SQLSelectQueryWhereClauseCondition("medical_status_remarks", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition security_status = new SQLSelectQueryWhereClauseCondition("security_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition is_work_status_ok = new SQLSelectQueryWhereClauseCondition("is_work_status_ok", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition housing_location_addr = new SQLSelectQueryWhereClauseCondition("housing_location_addr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition location_short_nm = new SQLSelectQueryWhereClauseCondition("location_short_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition notification_dt = new SQLSelectQueryWhereClauseCondition("notification_dt", typeof(System.DateTime));
        public ViewSewadarOfficeInformationSQLSelectQuery()
        {
            this.SqlObjectName = "ViewSewadarOfficeInformation";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(person_cd);
            this.lstConditions.Add(PersonName);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(file_no);
            this.lstConditions.Add(age);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(working_unit_id);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(designation_id);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(Sewadartype_nm);
            this.lstConditions.Add(grade_id);
            this.lstConditions.Add(trial_dt);
            this.lstConditions.Add(joining_dt);
            this.lstConditions.Add(payment_mode);
            this.lstConditions.Add(bank_nm);
            this.lstConditions.Add(bank_account_cd);
            this.lstConditions.Add(accmdtn_for_adults);
            this.lstConditions.Add(accmdtn_for_children);
            this.lstConditions.Add(grade_nm);
            this.lstConditions.Add(family);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(status_id);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(StatusDt);
            this.lstConditions.Add(person_status_reason_id);
            this.lstConditions.Add(person_status_reason_nm);
            this.lstConditions.Add(medical_Status);
            this.lstConditions.Add(medical_status_remarks);
            this.lstConditions.Add(security_status);
            this.lstConditions.Add(is_work_status_ok);
            this.lstConditions.Add(housing_location_addr);
            this.lstConditions.Add(location_short_nm);
            this.lstConditions.Add(notification_dt);
        }
    }


    public class ViewStatusSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_status_id = new SQLSelectQueryWhereClauseCondition("person_status_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition person_status_cd = new SQLSelectQueryWhereClauseCondition("person_status_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition is_active = new SQLSelectQueryWhereClauseCondition("is_active", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition status_reason_need = new SQLSelectQueryWhereClauseCondition("status_reason_need", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition future_days = new SQLSelectQueryWhereClauseCondition("future_days", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition remarks = new SQLSelectQueryWhereClauseCondition("remarks", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition effective_from = new SQLSelectQueryWhereClauseCondition("effective_from", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition effective_till = new SQLSelectQueryWhereClauseCondition("effective_till", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition txn_ts = new SQLSelectQueryWhereClauseCondition("txn_ts", typeof(System.Byte[]));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition is_application_access = new SQLSelectQueryWhereClauseCondition("is_application_access", typeof(System.String));
        public ViewStatusSQLSelectQuery()
        {
            this.SqlObjectName = "ViewStatus";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_status_id);
            this.lstConditions.Add(person_status_cd);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(is_active);
            this.lstConditions.Add(status_reason_need);
            this.lstConditions.Add(future_days);
            this.lstConditions.Add(remarks);
            this.lstConditions.Add(effective_from);
            this.lstConditions.Add(effective_till);
            this.lstConditions.Add(txn_ts);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(is_application_access);
        }
    }


    public class Vw_dependantsSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition swd_full_name = new SQLSelectQueryWhereClauseCondition("swd_full_name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition swd_person_id = new SQLSelectQueryWhereClauseCondition("swd_person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition swd_file_no = new SQLSelectQueryWhereClauseCondition("swd_file_no", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition swd_dob = new SQLSelectQueryWhereClauseCondition("swd_dob", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition swd_age = new SQLSelectQueryWhereClauseCondition("swd_age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition swd_working_unit_id = new SQLSelectQueryWhereClauseCondition("swd_working_unit_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition swd_working_unit_nm = new SQLSelectQueryWhereClauseCondition("swd_working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition swd_short_house_nm = new SQLSelectQueryWhereClauseCondition("swd_short_house_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition swd_status_cd = new SQLSelectQueryWhereClauseCondition("swd_status_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition swd_status_nm = new SQLSelectQueryWhereClauseCondition("swd_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition swd_is_active = new SQLSelectQueryWhereClauseCondition("swd_is_active", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dep_person_id = new SQLSelectQueryWhereClauseCondition("dep_person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition dep_full_name = new SQLSelectQueryWhereClauseCondition("dep_full_name", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dep_rel = new SQLSelectQueryWhereClauseCondition("dep_rel", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dep_gender = new SQLSelectQueryWhereClauseCondition("dep_gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dep_dob = new SQLSelectQueryWhereClauseCondition("dep_dob", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition dep_age = new SQLSelectQueryWhereClauseCondition("dep_age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition dep_occupation = new SQLSelectQueryWhereClauseCondition("dep_occupation", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dep_is_dependant = new SQLSelectQueryWhereClauseCondition("dep_is_dependant", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dep_is_doing_sewa = new SQLSelectQueryWhereClauseCondition("dep_is_doing_sewa", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dep_status_dt = new SQLSelectQueryWhereClauseCondition("dep_status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition dep_status_cd = new SQLSelectQueryWhereClauseCondition("dep_status_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dep_status_nm = new SQLSelectQueryWhereClauseCondition("dep_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dep_remark = new SQLSelectQueryWhereClauseCondition("dep_remark", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dep_staying_at_dera = new SQLSelectQueryWhereClauseCondition("dep_staying_at_dera", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dep_martial_status = new SQLSelectQueryWhereClauseCondition("dep_martial_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dep_qualification_type = new SQLSelectQueryWhereClauseCondition("dep_qualification_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dep_qualification_cd = new SQLSelectQueryWhereClauseCondition("dep_qualification_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dep_qualification_nm = new SQLSelectQueryWhereClauseCondition("dep_qualification_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dep_inst_nm = new SQLSelectQueryWhereClauseCondition("dep_inst_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition dep_skill_id = new SQLSelectQueryWhereClauseCondition("dep_skill_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition skill_nm = new SQLSelectQueryWhereClauseCondition("skill_nm", typeof(System.String));
        public Vw_dependantsSQLSelectQuery()
        {
            this.SqlObjectName = "Vw_dependants";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(swd_full_name);
            this.lstConditions.Add(swd_person_id);
            this.lstConditions.Add(swd_file_no);
            this.lstConditions.Add(swd_dob);
            this.lstConditions.Add(swd_age);
            this.lstConditions.Add(swd_working_unit_id);
            this.lstConditions.Add(swd_working_unit_nm);
            this.lstConditions.Add(swd_short_house_nm);
            this.lstConditions.Add(swd_status_cd);
            this.lstConditions.Add(swd_status_nm);
            this.lstConditions.Add(swd_is_active);
            this.lstConditions.Add(dep_person_id);
            this.lstConditions.Add(dep_full_name);
            this.lstConditions.Add(dep_rel);
            this.lstConditions.Add(dep_gender);
            this.lstConditions.Add(dep_dob);
            this.lstConditions.Add(dep_age);
            this.lstConditions.Add(dep_occupation);
            this.lstConditions.Add(dep_is_dependant);
            this.lstConditions.Add(dep_is_doing_sewa);
            this.lstConditions.Add(dep_status_dt);
            this.lstConditions.Add(dep_status_cd);
            this.lstConditions.Add(dep_status_nm);
            this.lstConditions.Add(dep_remark);
            this.lstConditions.Add(dep_staying_at_dera);
            this.lstConditions.Add(dep_martial_status);
            this.lstConditions.Add(dep_qualification_type);
            this.lstConditions.Add(dep_qualification_cd);
            this.lstConditions.Add(dep_qualification_nm);
            this.lstConditions.Add(dep_inst_nm);
            this.lstConditions.Add(dep_skill_id);
            this.lstConditions.Add(skill_nm);
        }
    }


    public class Vw_personsSQLSelectQuery : SQLSelectQuery
    {
        public SQLSelectQueryWhereClauseCondition person_id = new SQLSelectQueryWhereClauseCondition("person_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition full_nm = new SQLSelectQueryWhereClauseCondition("full_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_cd = new SQLSelectQueryWhereClauseCondition("person_type_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_type_nm = new SQLSelectQueryWhereClauseCondition("person_type_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition title = new SQLSelectQueryWhereClauseCondition("title", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition first_nm = new SQLSelectQueryWhereClauseCondition("first_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition middle_nm = new SQLSelectQueryWhereClauseCondition("middle_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition last_nm = new SQLSelectQueryWhereClauseCondition("last_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition short_nm = new SQLSelectQueryWhereClauseCondition("short_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition gender = new SQLSelectQueryWhereClauseCondition("gender", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition marital_status = new SQLSelectQueryWhereClauseCondition("marital_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition fh_name_type = new SQLSelectQueryWhereClauseCondition("fh_name_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition father_husband_nm = new SQLSelectQueryWhereClauseCondition("father_husband_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition birth_dt = new SQLSelectQueryWhereClauseCondition("birth_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition age = new SQLSelectQueryWhereClauseCondition("age", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition is_foreign_initiate = new SQLSelectQueryWhereClauseCondition("is_foreign_initiate", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition initiation_id = new SQLSelectQueryWhereClauseCondition("initiation_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition file_no = new SQLSelectQueryWhereClauseCondition("file_no", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition status_id = new SQLSelectQueryWhereClauseCondition("status_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition person_status_cd = new SQLSelectQueryWhereClauseCondition("person_status_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition person_status_nm = new SQLSelectQueryWhereClauseCondition("person_status_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition is_status_active = new SQLSelectQueryWhereClauseCondition("is_status_active", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition is_active = new SQLSelectQueryWhereClauseCondition("is_active", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition status_dt = new SQLSelectQueryWhereClauseCondition("status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition status_reason_id = new SQLSelectQueryWhereClauseCondition("status_reason_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition spouse_sewadar_id = new SQLSelectQueryWhereClauseCondition("spouse_sewadar_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition spouse_nm = new SQLSelectQueryWhereClauseCondition("spouse_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sponsor_sewadar_id = new SQLSelectQueryWhereClauseCondition("sponsor_sewadar_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition sponser_sewadar_nm = new SQLSelectQueryWhereClauseCondition("sponser_sewadar_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition next_of_kin_nm = new SQLSelectQueryWhereClauseCondition("next_of_kin_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition next_of_kin_relation_id = new SQLSelectQueryWhereClauseCondition("next_of_kin_relation_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition next_of_kin_rel_nm = new SQLSelectQueryWhereClauseCondition("next_of_kin_rel_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition house_id = new SQLSelectQueryWhereClauseCondition("house_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition housing_short_nm = new SQLSelectQueryWhereClauseCondition("housing_short_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition job_type = new SQLSelectQueryWhereClauseCondition("job_type", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition income_source_nm = new SQLSelectQueryWhereClauseCondition("income_source_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition currency_id = new SQLSelectQueryWhereClauseCondition("currency_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition currency_abbr = new SQLSelectQueryWhereClauseCondition("currency_abbr", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition currency_nm = new SQLSelectQueryWhereClauseCondition("currency_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition monthly_income = new SQLSelectQueryWhereClauseCondition("monthly_income", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition commercial_activity = new SQLSelectQueryWhereClauseCondition("commercial_activity", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition is_work_status_ok = new SQLSelectQueryWhereClauseCondition("is_work_status_ok", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition work_status_report_dt = new SQLSelectQueryWhereClauseCondition("work_status_report_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition is_diabetic = new SQLSelectQueryWhereClauseCondition("is_diabetic", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition blood_group = new SQLSelectQueryWhereClauseCondition("blood_group", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition medical_status = new SQLSelectQueryWhereClauseCondition("medical_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition medical_status_dt = new SQLSelectQueryWhereClauseCondition("medical_status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition medical_status_remarks = new SQLSelectQueryWhereClauseCondition("medical_status_remarks", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition security_status = new SQLSelectQueryWhereClauseCondition("security_status", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition security_status_dt = new SQLSelectQueryWhereClauseCondition("security_status_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition introduced_by = new SQLSelectQueryWhereClauseCondition("introduced_by", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_id = new SQLSelectQueryWhereClauseCondition("working_unit_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition working_unit_cd = new SQLSelectQueryWhereClauseCondition("working_unit_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition working_unit_nm = new SQLSelectQueryWhereClauseCondition("working_unit_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_id = new SQLSelectQueryWhereClauseCondition("designation_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition designation_cd = new SQLSelectQueryWhereClauseCondition("designation_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition designation_nm = new SQLSelectQueryWhereClauseCondition("designation_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadar_type_id = new SQLSelectQueryWhereClauseCondition("sewadar_type_id", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition sewadartype_nm = new SQLSelectQueryWhereClauseCondition("sewadartype_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition sewadar_type_used_in_RMS = new SQLSelectQueryWhereClauseCondition("sewadar_type_used_in_RMS", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition grade_id = new SQLSelectQueryWhereClauseCondition("grade_id", typeof(System.Int16));
        public SQLSelectQueryWhereClauseCondition grade_nm = new SQLSelectQueryWhereClauseCondition("grade_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition notification_id = new SQLSelectQueryWhereClauseCondition("notification_id", typeof(System.Int32));
        public SQLSelectQueryWhereClauseCondition initials = new SQLSelectQueryWhereClauseCondition("initials", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition trial_dt = new SQLSelectQueryWhereClauseCondition("trial_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition joining_dt = new SQLSelectQueryWhereClauseCondition("joining_dt", typeof(System.DateTime));
        public SQLSelectQueryWhereClauseCondition payment_mode = new SQLSelectQueryWhereClauseCondition("payment_mode", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition bank_nm = new SQLSelectQueryWhereClauseCondition("bank_nm", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition bank_account_cd = new SQLSelectQueryWhereClauseCondition("bank_account_cd", typeof(System.String));
        public SQLSelectQueryWhereClauseCondition accmdtn_for_adults = new SQLSelectQueryWhereClauseCondition("accmdtn_for_adults", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition accmdtn_for_children = new SQLSelectQueryWhereClauseCondition("accmdtn_for_children", typeof(System.Byte));
        public SQLSelectQueryWhereClauseCondition is_retired = new SQLSelectQueryWhereClauseCondition("is_retired", typeof(System.String));
        public Vw_personsSQLSelectQuery()
        {
            this.SqlObjectName = "Vw_persons";
            this.SQLObjectType = SQLObjectTypes.View;

            this.lstConditions.Add(person_id);
            this.lstConditions.Add(full_nm);
            this.lstConditions.Add(person_type_cd);
            this.lstConditions.Add(person_type_nm);
            this.lstConditions.Add(title);
            this.lstConditions.Add(first_nm);
            this.lstConditions.Add(middle_nm);
            this.lstConditions.Add(last_nm);
            this.lstConditions.Add(short_nm);
            this.lstConditions.Add(gender);
            this.lstConditions.Add(marital_status);
            this.lstConditions.Add(fh_name_type);
            this.lstConditions.Add(father_husband_nm);
            this.lstConditions.Add(birth_dt);
            this.lstConditions.Add(age);
            this.lstConditions.Add(is_foreign_initiate);
            this.lstConditions.Add(initiation_id);
            this.lstConditions.Add(file_no);
            this.lstConditions.Add(status_id);
            this.lstConditions.Add(person_status_cd);
            this.lstConditions.Add(person_status_nm);
            this.lstConditions.Add(is_status_active);
            this.lstConditions.Add(is_active);
            this.lstConditions.Add(status_dt);
            this.lstConditions.Add(status_reason_id);
            this.lstConditions.Add(spouse_sewadar_id);
            this.lstConditions.Add(spouse_nm);
            this.lstConditions.Add(sponsor_sewadar_id);
            this.lstConditions.Add(sponser_sewadar_nm);
            this.lstConditions.Add(next_of_kin_nm);
            this.lstConditions.Add(next_of_kin_relation_id);
            this.lstConditions.Add(next_of_kin_rel_nm);
            this.lstConditions.Add(house_id);
            this.lstConditions.Add(housing_short_nm);
            this.lstConditions.Add(job_type);
            this.lstConditions.Add(income_source_nm);
            this.lstConditions.Add(currency_id);
            this.lstConditions.Add(currency_abbr);
            this.lstConditions.Add(currency_nm);
            this.lstConditions.Add(monthly_income);
            this.lstConditions.Add(commercial_activity);
            this.lstConditions.Add(is_work_status_ok);
            this.lstConditions.Add(work_status_report_dt);
            this.lstConditions.Add(is_diabetic);
            this.lstConditions.Add(blood_group);
            this.lstConditions.Add(medical_status);
            this.lstConditions.Add(medical_status_dt);
            this.lstConditions.Add(medical_status_remarks);
            this.lstConditions.Add(security_status);
            this.lstConditions.Add(security_status_dt);
            this.lstConditions.Add(introduced_by);
            this.lstConditions.Add(working_unit_id);
            this.lstConditions.Add(working_unit_cd);
            this.lstConditions.Add(working_unit_nm);
            this.lstConditions.Add(designation_id);
            this.lstConditions.Add(designation_cd);
            this.lstConditions.Add(designation_nm);
            this.lstConditions.Add(sewadar_type_id);
            this.lstConditions.Add(sewadartype_nm);
            this.lstConditions.Add(sewadar_type_used_in_RMS);
            this.lstConditions.Add(grade_id);
            this.lstConditions.Add(grade_nm);
            this.lstConditions.Add(notification_id);
            this.lstConditions.Add(initials);
            this.lstConditions.Add(trial_dt);
            this.lstConditions.Add(joining_dt);
            this.lstConditions.Add(payment_mode);
            this.lstConditions.Add(bank_nm);
            this.lstConditions.Add(bank_account_cd);
            this.lstConditions.Add(accmdtn_for_adults);
            this.lstConditions.Add(accmdtn_for_children);
            this.lstConditions.Add(is_retired);
        }
    }
}
