//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.225.
// 
#pragma warning disable 1591

namespace DCC.UMB.CDF.DbManagerWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DBManagerWSSoap", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBNull))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MarshalByRefObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SqlParameter[]))]
    public partial class DBManagerWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PingOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyClientStillActiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisposeConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback BeginTransOperationCompleted;
        
        private System.Threading.SendOrPostCallback BeginTransWithIsolationLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitTransOperationCompleted;
        
        private System.Threading.SendOrPostCallback RollbackTransOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteSQLOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteStoredProcOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteStoredProcWithNoParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteScalarOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsReaderClosedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchemaTableOfCurrentReaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadNextBucketFromDataReaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteReaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteReaderSQLOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseReaderAndConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsReportFileExistingOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportOutputOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DBManagerWS() {
            this.Url = "http://localhost:1935/DBManager/DBManagerWS.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event PingCompletedEventHandler PingCompleted;
        
        /// <remarks/>
        public event CreateConnectionCompletedEventHandler CreateConnectionCompleted;
        
        /// <remarks/>
        public event NotifyClientStillActiveCompletedEventHandler NotifyClientStillActiveCompleted;
        
        /// <remarks/>
        public event DisposeConnectionCompletedEventHandler DisposeConnectionCompleted;
        
        /// <remarks/>
        public event BeginTransCompletedEventHandler BeginTransCompleted;
        
        /// <remarks/>
        public event BeginTransWithIsolationLevelCompletedEventHandler BeginTransWithIsolationLevelCompleted;
        
        /// <remarks/>
        public event CommitTransCompletedEventHandler CommitTransCompleted;
        
        /// <remarks/>
        public event RollbackTransCompletedEventHandler RollbackTransCompleted;
        
        /// <remarks/>
        public event ExecuteSQLCompletedEventHandler ExecuteSQLCompleted;
        
        /// <remarks/>
        public event ExecuteStoredProcCompletedEventHandler ExecuteStoredProcCompleted;
        
        /// <remarks/>
        public event ExecuteStoredProcWithNoParameterCompletedEventHandler ExecuteStoredProcWithNoParameterCompleted;
        
        /// <remarks/>
        public event ExecuteScalarCompletedEventHandler ExecuteScalarCompleted;
        
        /// <remarks/>
        public event IsReaderClosedCompletedEventHandler IsReaderClosedCompleted;
        
        /// <remarks/>
        public event GetSchemaTableOfCurrentReaderCompletedEventHandler GetSchemaTableOfCurrentReaderCompleted;
        
        /// <remarks/>
        public event ReadNextBucketFromDataReaderCompletedEventHandler ReadNextBucketFromDataReaderCompleted;
        
        /// <remarks/>
        public event ExecuteReaderCompletedEventHandler ExecuteReaderCompleted;
        
        /// <remarks/>
        public event ExecuteReaderSQLCompletedEventHandler ExecuteReaderSQLCompleted;
        
        /// <remarks/>
        public event CloseReaderAndConnectionCompletedEventHandler CloseReaderAndConnectionCompleted;
        
        /// <remarks/>
        public event IsReportFileExistingCompletedEventHandler IsReportFileExistingCompleted;
        
        /// <remarks/>
        public event UploadReportCompletedEventHandler UploadReportCompleted;
        
        /// <remarks/>
        public event GetReportOutputCompletedEventHandler GetReportOutputCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Ping", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Ping() {
            object[] results = this.Invoke("Ping", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        /// <remarks/>
        public void PingAsync(object userState) {
            if ((this.PingOperationCompleted == null)) {
                this.PingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingOperationCompleted);
            }
            this.InvokeAsync("Ping", new object[0], this.PingOperationCompleted, userState);
        }
        
        private void OnPingOperationCompleted(object arg) {
            if ((this.PingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingCompleted(this, new PingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateConnection", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateConnection(string guid, string applicationId, string userId, string serverName, string clientName) {
            this.Invoke("CreateConnection", new object[] {
                        guid,
                        applicationId,
                        userId,
                        serverName,
                        clientName});
        }
        
        /// <remarks/>
        public void CreateConnectionAsync(string guid, string applicationId, string userId, string serverName, string clientName) {
            this.CreateConnectionAsync(guid, applicationId, userId, serverName, clientName, null);
        }
        
        /// <remarks/>
        public void CreateConnectionAsync(string guid, string applicationId, string userId, string serverName, string clientName, object userState) {
            if ((this.CreateConnectionOperationCompleted == null)) {
                this.CreateConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateConnectionOperationCompleted);
            }
            this.InvokeAsync("CreateConnection", new object[] {
                        guid,
                        applicationId,
                        userId,
                        serverName,
                        clientName}, this.CreateConnectionOperationCompleted, userState);
        }
        
        private void OnCreateConnectionOperationCompleted(object arg) {
            if ((this.CreateConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateConnectionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/NotifyClientStillActive", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void NotifyClientStillActive(string guid) {
            this.Invoke("NotifyClientStillActive", new object[] {
                        guid});
        }
        
        /// <remarks/>
        public void NotifyClientStillActiveAsync(string guid) {
            this.NotifyClientStillActiveAsync(guid, null);
        }
        
        /// <remarks/>
        public void NotifyClientStillActiveAsync(string guid, object userState) {
            if ((this.NotifyClientStillActiveOperationCompleted == null)) {
                this.NotifyClientStillActiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyClientStillActiveOperationCompleted);
            }
            this.InvokeAsync("NotifyClientStillActive", new object[] {
                        guid}, this.NotifyClientStillActiveOperationCompleted, userState);
        }
        
        private void OnNotifyClientStillActiveOperationCompleted(object arg) {
            if ((this.NotifyClientStillActiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyClientStillActiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DisposeConnection", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DisposeConnection(string guid) {
            this.Invoke("DisposeConnection", new object[] {
                        guid});
        }
        
        /// <remarks/>
        public void DisposeConnectionAsync(string guid) {
            this.DisposeConnectionAsync(guid, null);
        }
        
        /// <remarks/>
        public void DisposeConnectionAsync(string guid, object userState) {
            if ((this.DisposeConnectionOperationCompleted == null)) {
                this.DisposeConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisposeConnectionOperationCompleted);
            }
            this.InvokeAsync("DisposeConnection", new object[] {
                        guid}, this.DisposeConnectionOperationCompleted, userState);
        }
        
        private void OnDisposeConnectionOperationCompleted(object arg) {
            if ((this.DisposeConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisposeConnectionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BeginTrans", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void BeginTrans(string guid) {
            this.Invoke("BeginTrans", new object[] {
                        guid});
        }
        
        /// <remarks/>
        public void BeginTransAsync(string guid) {
            this.BeginTransAsync(guid, null);
        }
        
        /// <remarks/>
        public void BeginTransAsync(string guid, object userState) {
            if ((this.BeginTransOperationCompleted == null)) {
                this.BeginTransOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBeginTransOperationCompleted);
            }
            this.InvokeAsync("BeginTrans", new object[] {
                        guid}, this.BeginTransOperationCompleted, userState);
        }
        
        private void OnBeginTransOperationCompleted(object arg) {
            if ((this.BeginTransCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BeginTransCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BeginTransWithIsolationLevel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void BeginTransWithIsolationLevel(string guid, IsolationLevel isolationLevel) {
            this.Invoke("BeginTransWithIsolationLevel", new object[] {
                        guid,
                        isolationLevel});
        }
        
        /// <remarks/>
        public void BeginTransWithIsolationLevelAsync(string guid, IsolationLevel isolationLevel) {
            this.BeginTransWithIsolationLevelAsync(guid, isolationLevel, null);
        }
        
        /// <remarks/>
        public void BeginTransWithIsolationLevelAsync(string guid, IsolationLevel isolationLevel, object userState) {
            if ((this.BeginTransWithIsolationLevelOperationCompleted == null)) {
                this.BeginTransWithIsolationLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBeginTransWithIsolationLevelOperationCompleted);
            }
            this.InvokeAsync("BeginTransWithIsolationLevel", new object[] {
                        guid,
                        isolationLevel}, this.BeginTransWithIsolationLevelOperationCompleted, userState);
        }
        
        private void OnBeginTransWithIsolationLevelOperationCompleted(object arg) {
            if ((this.BeginTransWithIsolationLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BeginTransWithIsolationLevelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CommitTrans", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CommitTrans(string guid) {
            this.Invoke("CommitTrans", new object[] {
                        guid});
        }
        
        /// <remarks/>
        public void CommitTransAsync(string guid) {
            this.CommitTransAsync(guid, null);
        }
        
        /// <remarks/>
        public void CommitTransAsync(string guid, object userState) {
            if ((this.CommitTransOperationCompleted == null)) {
                this.CommitTransOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitTransOperationCompleted);
            }
            this.InvokeAsync("CommitTrans", new object[] {
                        guid}, this.CommitTransOperationCompleted, userState);
        }
        
        private void OnCommitTransOperationCompleted(object arg) {
            if ((this.CommitTransCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitTransCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RollbackTrans", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RollbackTrans(string guid) {
            this.Invoke("RollbackTrans", new object[] {
                        guid});
        }
        
        /// <remarks/>
        public void RollbackTransAsync(string guid) {
            this.RollbackTransAsync(guid, null);
        }
        
        /// <remarks/>
        public void RollbackTransAsync(string guid, object userState) {
            if ((this.RollbackTransOperationCompleted == null)) {
                this.RollbackTransOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRollbackTransOperationCompleted);
            }
            this.InvokeAsync("RollbackTrans", new object[] {
                        guid}, this.RollbackTransOperationCompleted, userState);
        }
        
        private void OnRollbackTransOperationCompleted(object arg) {
            if ((this.RollbackTransCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RollbackTransCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteSQL", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ExecuteSQL(string sqlString, string guid) {
            object[] results = this.Invoke("ExecuteSQL", new object[] {
                        sqlString,
                        guid});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteSQLAsync(string sqlString, string guid) {
            this.ExecuteSQLAsync(sqlString, guid, null);
        }
        
        /// <remarks/>
        public void ExecuteSQLAsync(string sqlString, string guid, object userState) {
            if ((this.ExecuteSQLOperationCompleted == null)) {
                this.ExecuteSQLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteSQLOperationCompleted);
            }
            this.InvokeAsync("ExecuteSQL", new object[] {
                        sqlString,
                        guid}, this.ExecuteSQLOperationCompleted, userState);
        }
        
        private void OnExecuteSQLOperationCompleted(object arg) {
            if ((this.ExecuteSQLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteSQLCompleted(this, new ExecuteSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteStoredProc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ExecuteStoredProc(string storedProcedureName, SqlParameter[] parameters, string guid) {
            object[] results = this.Invoke("ExecuteStoredProc", new object[] {
                        storedProcedureName,
                        parameters,
                        guid});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteStoredProcAsync(string storedProcedureName, SqlParameter[] parameters, string guid) {
            this.ExecuteStoredProcAsync(storedProcedureName, parameters, guid, null);
        }
        
        /// <remarks/>
        public void ExecuteStoredProcAsync(string storedProcedureName, SqlParameter[] parameters, string guid, object userState) {
            if ((this.ExecuteStoredProcOperationCompleted == null)) {
                this.ExecuteStoredProcOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteStoredProcOperationCompleted);
            }
            this.InvokeAsync("ExecuteStoredProc", new object[] {
                        storedProcedureName,
                        parameters,
                        guid}, this.ExecuteStoredProcOperationCompleted, userState);
        }
        
        private void OnExecuteStoredProcOperationCompleted(object arg) {
            if ((this.ExecuteStoredProcCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteStoredProcCompleted(this, new ExecuteStoredProcCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteStoredProcWithNoParameter", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ExecuteStoredProcWithNoParameter(string storedProcedureName, string guid) {
            object[] results = this.Invoke("ExecuteStoredProcWithNoParameter", new object[] {
                        storedProcedureName,
                        guid});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteStoredProcWithNoParameterAsync(string storedProcedureName, string guid) {
            this.ExecuteStoredProcWithNoParameterAsync(storedProcedureName, guid, null);
        }
        
        /// <remarks/>
        public void ExecuteStoredProcWithNoParameterAsync(string storedProcedureName, string guid, object userState) {
            if ((this.ExecuteStoredProcWithNoParameterOperationCompleted == null)) {
                this.ExecuteStoredProcWithNoParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteStoredProcWithNoParameterOperationCompleted);
            }
            this.InvokeAsync("ExecuteStoredProcWithNoParameter", new object[] {
                        storedProcedureName,
                        guid}, this.ExecuteStoredProcWithNoParameterOperationCompleted, userState);
        }
        
        private void OnExecuteStoredProcWithNoParameterOperationCompleted(object arg) {
            if ((this.ExecuteStoredProcWithNoParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteStoredProcWithNoParameterCompleted(this, new ExecuteStoredProcWithNoParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteScalar", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object ExecuteScalar(string sqlString, string guid) {
            object[] results = this.Invoke("ExecuteScalar", new object[] {
                        sqlString,
                        guid});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteScalarAsync(string sqlString, string guid) {
            this.ExecuteScalarAsync(sqlString, guid, null);
        }
        
        /// <remarks/>
        public void ExecuteScalarAsync(string sqlString, string guid, object userState) {
            if ((this.ExecuteScalarOperationCompleted == null)) {
                this.ExecuteScalarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteScalarOperationCompleted);
            }
            this.InvokeAsync("ExecuteScalar", new object[] {
                        sqlString,
                        guid}, this.ExecuteScalarOperationCompleted, userState);
        }
        
        private void OnExecuteScalarOperationCompleted(object arg) {
            if ((this.ExecuteScalarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteScalarCompleted(this, new ExecuteScalarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsReaderClosed", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsReaderClosed(string guid) {
            object[] results = this.Invoke("IsReaderClosed", new object[] {
                        guid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsReaderClosedAsync(string guid) {
            this.IsReaderClosedAsync(guid, null);
        }
        
        /// <remarks/>
        public void IsReaderClosedAsync(string guid, object userState) {
            if ((this.IsReaderClosedOperationCompleted == null)) {
                this.IsReaderClosedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsReaderClosedOperationCompleted);
            }
            this.InvokeAsync("IsReaderClosed", new object[] {
                        guid}, this.IsReaderClosedOperationCompleted, userState);
        }
        
        private void OnIsReaderClosedOperationCompleted(object arg) {
            if ((this.IsReaderClosedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsReaderClosedCompleted(this, new IsReaderClosedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSchemaTableOfCurrentReader", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetSchemaTableOfCurrentReader(string guid) {
            object[] results = this.Invoke("GetSchemaTableOfCurrentReader", new object[] {
                        guid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetSchemaTableOfCurrentReaderAsync(string guid) {
            this.GetSchemaTableOfCurrentReaderAsync(guid, null);
        }
        
        /// <remarks/>
        public void GetSchemaTableOfCurrentReaderAsync(string guid, object userState) {
            if ((this.GetSchemaTableOfCurrentReaderOperationCompleted == null)) {
                this.GetSchemaTableOfCurrentReaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchemaTableOfCurrentReaderOperationCompleted);
            }
            this.InvokeAsync("GetSchemaTableOfCurrentReader", new object[] {
                        guid}, this.GetSchemaTableOfCurrentReaderOperationCompleted, userState);
        }
        
        private void OnGetSchemaTableOfCurrentReaderOperationCompleted(object arg) {
            if ((this.GetSchemaTableOfCurrentReaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchemaTableOfCurrentReaderCompleted(this, new GetSchemaTableOfCurrentReaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReadNextBucketFromDataReader", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ReadNextBucketFromDataReader(string guid, int bucketSize) {
            object[] results = this.Invoke("ReadNextBucketFromDataReader", new object[] {
                        guid,
                        bucketSize});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ReadNextBucketFromDataReaderAsync(string guid, int bucketSize) {
            this.ReadNextBucketFromDataReaderAsync(guid, bucketSize, null);
        }
        
        /// <remarks/>
        public void ReadNextBucketFromDataReaderAsync(string guid, int bucketSize, object userState) {
            if ((this.ReadNextBucketFromDataReaderOperationCompleted == null)) {
                this.ReadNextBucketFromDataReaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadNextBucketFromDataReaderOperationCompleted);
            }
            this.InvokeAsync("ReadNextBucketFromDataReader", new object[] {
                        guid,
                        bucketSize}, this.ReadNextBucketFromDataReaderOperationCompleted, userState);
        }
        
        private void OnReadNextBucketFromDataReaderOperationCompleted(object arg) {
            if ((this.ReadNextBucketFromDataReaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadNextBucketFromDataReaderCompleted(this, new ReadNextBucketFromDataReaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteReader", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ExecuteReader(string guid, string storedProcedureName, SqlParameter[] parameters, int bucketSize) {
            object[] results = this.Invoke("ExecuteReader", new object[] {
                        guid,
                        storedProcedureName,
                        parameters,
                        bucketSize});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteReaderAsync(string guid, string storedProcedureName, SqlParameter[] parameters, int bucketSize) {
            this.ExecuteReaderAsync(guid, storedProcedureName, parameters, bucketSize, null);
        }
        
        /// <remarks/>
        public void ExecuteReaderAsync(string guid, string storedProcedureName, SqlParameter[] parameters, int bucketSize, object userState) {
            if ((this.ExecuteReaderOperationCompleted == null)) {
                this.ExecuteReaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteReaderOperationCompleted);
            }
            this.InvokeAsync("ExecuteReader", new object[] {
                        guid,
                        storedProcedureName,
                        parameters,
                        bucketSize}, this.ExecuteReaderOperationCompleted, userState);
        }
        
        private void OnExecuteReaderOperationCompleted(object arg) {
            if ((this.ExecuteReaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteReaderCompleted(this, new ExecuteReaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteReaderSQL", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ExecuteReaderSQL(string guid, string sqlString, int bucketSize) {
            object[] results = this.Invoke("ExecuteReaderSQL", new object[] {
                        guid,
                        sqlString,
                        bucketSize});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteReaderSQLAsync(string guid, string sqlString, int bucketSize) {
            this.ExecuteReaderSQLAsync(guid, sqlString, bucketSize, null);
        }
        
        /// <remarks/>
        public void ExecuteReaderSQLAsync(string guid, string sqlString, int bucketSize, object userState) {
            if ((this.ExecuteReaderSQLOperationCompleted == null)) {
                this.ExecuteReaderSQLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteReaderSQLOperationCompleted);
            }
            this.InvokeAsync("ExecuteReaderSQL", new object[] {
                        guid,
                        sqlString,
                        bucketSize}, this.ExecuteReaderSQLOperationCompleted, userState);
        }
        
        private void OnExecuteReaderSQLOperationCompleted(object arg) {
            if ((this.ExecuteReaderSQLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteReaderSQLCompleted(this, new ExecuteReaderSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CloseReaderAndConnection", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CloseReaderAndConnection(string guid) {
            this.Invoke("CloseReaderAndConnection", new object[] {
                        guid});
        }
        
        /// <remarks/>
        public void CloseReaderAndConnectionAsync(string guid) {
            this.CloseReaderAndConnectionAsync(guid, null);
        }
        
        /// <remarks/>
        public void CloseReaderAndConnectionAsync(string guid, object userState) {
            if ((this.CloseReaderAndConnectionOperationCompleted == null)) {
                this.CloseReaderAndConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseReaderAndConnectionOperationCompleted);
            }
            this.InvokeAsync("CloseReaderAndConnection", new object[] {
                        guid}, this.CloseReaderAndConnectionOperationCompleted, userState);
        }
        
        private void OnCloseReaderAndConnectionOperationCompleted(object arg) {
            if ((this.CloseReaderAndConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseReaderAndConnectionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsReportFileExisting", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsReportFileExisting(string packageId, string relativeReportFilePath) {
            object[] results = this.Invoke("IsReportFileExisting", new object[] {
                        packageId,
                        relativeReportFilePath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsReportFileExistingAsync(string packageId, string relativeReportFilePath) {
            this.IsReportFileExistingAsync(packageId, relativeReportFilePath, null);
        }
        
        /// <remarks/>
        public void IsReportFileExistingAsync(string packageId, string relativeReportFilePath, object userState) {
            if ((this.IsReportFileExistingOperationCompleted == null)) {
                this.IsReportFileExistingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsReportFileExistingOperationCompleted);
            }
            this.InvokeAsync("IsReportFileExisting", new object[] {
                        packageId,
                        relativeReportFilePath}, this.IsReportFileExistingOperationCompleted, userState);
        }
        
        private void OnIsReportFileExistingOperationCompleted(object arg) {
            if ((this.IsReportFileExistingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsReportFileExistingCompleted(this, new IsReportFileExistingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadReport(string packageId, string relativePathStartingWithBackSlash, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] reportFileContents) {
            this.Invoke("UploadReport", new object[] {
                        packageId,
                        relativePathStartingWithBackSlash,
                        reportFileContents});
        }
        
        /// <remarks/>
        public void UploadReportAsync(string packageId, string relativePathStartingWithBackSlash, byte[] reportFileContents) {
            this.UploadReportAsync(packageId, relativePathStartingWithBackSlash, reportFileContents, null);
        }
        
        /// <remarks/>
        public void UploadReportAsync(string packageId, string relativePathStartingWithBackSlash, byte[] reportFileContents, object userState) {
            if ((this.UploadReportOperationCompleted == null)) {
                this.UploadReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadReportOperationCompleted);
            }
            this.InvokeAsync("UploadReport", new object[] {
                        packageId,
                        relativePathStartingWithBackSlash,
                        reportFileContents}, this.UploadReportOperationCompleted, userState);
        }
        
        private void OnUploadReportOperationCompleted(object arg) {
            if ((this.UploadReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadReportCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReportOutput", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetReportOutput(string relativeReportFilePath, System.Data.DataTable parameterValues, string serverName, string dbName, string userRoleId, string applicationId) {
            object[] results = this.Invoke("GetReportOutput", new object[] {
                        relativeReportFilePath,
                        parameterValues,
                        serverName,
                        dbName,
                        userRoleId,
                        applicationId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetReportOutputAsync(string relativeReportFilePath, System.Data.DataTable parameterValues, string serverName, string dbName, string userRoleId, string applicationId) {
            this.GetReportOutputAsync(relativeReportFilePath, parameterValues, serverName, dbName, userRoleId, applicationId, null);
        }
        
        /// <remarks/>
        public void GetReportOutputAsync(string relativeReportFilePath, System.Data.DataTable parameterValues, string serverName, string dbName, string userRoleId, string applicationId, object userState) {
            if ((this.GetReportOutputOperationCompleted == null)) {
                this.GetReportOutputOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportOutputOperationCompleted);
            }
            this.InvokeAsync("GetReportOutput", new object[] {
                        relativeReportFilePath,
                        parameterValues,
                        serverName,
                        dbName,
                        userRoleId,
                        applicationId}, this.GetReportOutputOperationCompleted, userState);
        }
        
        private void OnGetReportOutputOperationCompleted(object arg) {
            if ((this.GetReportOutputCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportOutputCompleted(this, new GetReportOutputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum IsolationLevel {
        
        /// <remarks/>
        Unspecified,
        
        /// <remarks/>
        Chaos,
        
        /// <remarks/>
        ReadUncommitted,
        
        /// <remarks/>
        ReadCommitted,
        
        /// <remarks/>
        RepeatableRead,
        
        /// <remarks/>
        Serializable,
        
        /// <remarks/>
        Snapshot,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SqlParameter : DbParameter {
        
        private SqlCompareOptions compareInfoField;
        
        private string xmlSchemaCollectionDatabaseField;
        
        private string xmlSchemaCollectionOwningSchemaField;
        
        private string xmlSchemaCollectionNameField;
        
        private int localeIdField;
        
        private byte precisionField;
        
        private byte scaleField;
        
        private SqlDbType sqlDbTypeField;
        
        private object sqlValueField;
        
        private string udtTypeNameField;
        
        private string typeNameField;
        
        private int offsetField;
        
        public SqlParameter() {
            this.precisionField = ((byte)(0));
            this.scaleField = ((byte)(0));
        }
        
        /// <remarks/>
        public SqlCompareOptions CompareInfo {
            get {
                return this.compareInfoField;
            }
            set {
                this.compareInfoField = value;
            }
        }
        
        /// <remarks/>
        public string XmlSchemaCollectionDatabase {
            get {
                return this.xmlSchemaCollectionDatabaseField;
            }
            set {
                this.xmlSchemaCollectionDatabaseField = value;
            }
        }
        
        /// <remarks/>
        public string XmlSchemaCollectionOwningSchema {
            get {
                return this.xmlSchemaCollectionOwningSchemaField;
            }
            set {
                this.xmlSchemaCollectionOwningSchemaField = value;
            }
        }
        
        /// <remarks/>
        public string XmlSchemaCollectionName {
            get {
                return this.xmlSchemaCollectionNameField;
            }
            set {
                this.xmlSchemaCollectionNameField = value;
            }
        }
        
        /// <remarks/>
        public int LocaleId {
            get {
                return this.localeIdField;
            }
            set {
                this.localeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(typeof(byte), "0")]
        public byte Precision {
            get {
                return this.precisionField;
            }
            set {
                this.precisionField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(typeof(byte), "0")]
        public byte Scale {
            get {
                return this.scaleField;
            }
            set {
                this.scaleField = value;
            }
        }
        
        /// <remarks/>
        public SqlDbType SqlDbType {
            get {
                return this.sqlDbTypeField;
            }
            set {
                this.sqlDbTypeField = value;
            }
        }
        
        /// <remarks/>
        public object SqlValue {
            get {
                return this.sqlValueField;
            }
            set {
                this.sqlValueField = value;
            }
        }
        
        /// <remarks/>
        public string UdtTypeName {
            get {
                return this.udtTypeNameField;
            }
            set {
                this.udtTypeNameField = value;
            }
        }
        
        /// <remarks/>
        public string TypeName {
            get {
                return this.typeNameField;
            }
            set {
                this.typeNameField = value;
            }
        }
        
        /// <remarks/>
        public int Offset {
            get {
                return this.offsetField;
            }
            set {
                this.offsetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum SqlCompareOptions {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        IgnoreCase = 2,
        
        /// <remarks/>
        IgnoreNonSpace = 4,
        
        /// <remarks/>
        IgnoreKanaType = 8,
        
        /// <remarks/>
        IgnoreWidth = 16,
        
        /// <remarks/>
        BinarySort = 32,
        
        /// <remarks/>
        BinarySort2 = 64,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum SqlDbType {
        
        /// <remarks/>
        BigInt,
        
        /// <remarks/>
        Binary,
        
        /// <remarks/>
        Bit,
        
        /// <remarks/>
        Char,
        
        /// <remarks/>
        DateTime,
        
        /// <remarks/>
        Decimal,
        
        /// <remarks/>
        Float,
        
        /// <remarks/>
        Image,
        
        /// <remarks/>
        Int,
        
        /// <remarks/>
        Money,
        
        /// <remarks/>
        NChar,
        
        /// <remarks/>
        NText,
        
        /// <remarks/>
        NVarChar,
        
        /// <remarks/>
        Real,
        
        /// <remarks/>
        UniqueIdentifier,
        
        /// <remarks/>
        SmallDateTime,
        
        /// <remarks/>
        SmallInt,
        
        /// <remarks/>
        SmallMoney,
        
        /// <remarks/>
        Text,
        
        /// <remarks/>
        Timestamp,
        
        /// <remarks/>
        TinyInt,
        
        /// <remarks/>
        VarBinary,
        
        /// <remarks/>
        VarChar,
        
        /// <remarks/>
        Variant,
        
        /// <remarks/>
        Xml,
        
        /// <remarks/>
        Udt,
        
        /// <remarks/>
        Structured,
        
        /// <remarks/>
        Date,
        
        /// <remarks/>
        Time,
        
        /// <remarks/>
        DateTime2,
        
        /// <remarks/>
        DateTimeOffset,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DBNull {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DbParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SqlParameter))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public abstract partial class MarshalByRefObject {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SqlParameter))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public abstract partial class DbParameter : MarshalByRefObject {
        
        private DbType dbTypeField;
        
        private ParameterDirection directionField;
        
        private bool isNullableField;
        
        private string parameterNameField;
        
        private int sizeField;
        
        private string sourceColumnField;
        
        private bool sourceColumnNullMappingField;
        
        private DataRowVersion sourceVersionField;
        
        private object valueField;
        
        public DbParameter() {
            this.directionField = ParameterDirection.Input;
            this.parameterNameField = "";
            this.sourceColumnField = "";
            this.sourceColumnNullMappingField = false;
            this.sourceVersionField = DataRowVersion.Current;
        }
        
        /// <remarks/>
        public DbType DbType {
            get {
                return this.dbTypeField;
            }
            set {
                this.dbTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(ParameterDirection.Input)]
        public ParameterDirection Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        public bool IsNullable {
            get {
                return this.isNullableField;
            }
            set {
                this.isNullableField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute("")]
        public string ParameterName {
            get {
                return this.parameterNameField;
            }
            set {
                this.parameterNameField = value;
            }
        }
        
        /// <remarks/>
        public int Size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute("")]
        public string SourceColumn {
            get {
                return this.sourceColumnField;
            }
            set {
                this.sourceColumnField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool SourceColumnNullMapping {
            get {
                return this.sourceColumnNullMappingField;
            }
            set {
                this.sourceColumnNullMappingField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(DataRowVersion.Current)]
        public DataRowVersion SourceVersion {
            get {
                return this.sourceVersionField;
            }
            set {
                this.sourceVersionField = value;
            }
        }
        
        /// <remarks/>
        public object Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum DbType {
        
        /// <remarks/>
        AnsiString,
        
        /// <remarks/>
        Binary,
        
        /// <remarks/>
        Byte,
        
        /// <remarks/>
        Boolean,
        
        /// <remarks/>
        Currency,
        
        /// <remarks/>
        Date,
        
        /// <remarks/>
        DateTime,
        
        /// <remarks/>
        Decimal,
        
        /// <remarks/>
        Double,
        
        /// <remarks/>
        Guid,
        
        /// <remarks/>
        Int16,
        
        /// <remarks/>
        Int32,
        
        /// <remarks/>
        Int64,
        
        /// <remarks/>
        Object,
        
        /// <remarks/>
        SByte,
        
        /// <remarks/>
        Single,
        
        /// <remarks/>
        String,
        
        /// <remarks/>
        Time,
        
        /// <remarks/>
        UInt16,
        
        /// <remarks/>
        UInt32,
        
        /// <remarks/>
        UInt64,
        
        /// <remarks/>
        VarNumeric,
        
        /// <remarks/>
        AnsiStringFixedLength,
        
        /// <remarks/>
        StringFixedLength,
        
        /// <remarks/>
        Xml,
        
        /// <remarks/>
        DateTime2,
        
        /// <remarks/>
        DateTimeOffset,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ParameterDirection {
        
        /// <remarks/>
        Input,
        
        /// <remarks/>
        Output,
        
        /// <remarks/>
        InputOutput,
        
        /// <remarks/>
        ReturnValue,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum DataRowVersion {
        
        /// <remarks/>
        Original,
        
        /// <remarks/>
        Current,
        
        /// <remarks/>
        Proposed,
        
        /// <remarks/>
        Default,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PingCompletedEventHandler(object sender, PingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateConnectionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void NotifyClientStillActiveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DisposeConnectionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void BeginTransCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void BeginTransWithIsolationLevelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CommitTransCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RollbackTransCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExecuteSQLCompletedEventHandler(object sender, ExecuteSQLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteSQLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteSQLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExecuteStoredProcCompletedEventHandler(object sender, ExecuteStoredProcCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteStoredProcCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteStoredProcCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExecuteStoredProcWithNoParameterCompletedEventHandler(object sender, ExecuteStoredProcWithNoParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteStoredProcWithNoParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteStoredProcWithNoParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExecuteScalarCompletedEventHandler(object sender, ExecuteScalarCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteScalarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteScalarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IsReaderClosedCompletedEventHandler(object sender, IsReaderClosedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsReaderClosedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsReaderClosedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSchemaTableOfCurrentReaderCompletedEventHandler(object sender, GetSchemaTableOfCurrentReaderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchemaTableOfCurrentReaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchemaTableOfCurrentReaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReadNextBucketFromDataReaderCompletedEventHandler(object sender, ReadNextBucketFromDataReaderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadNextBucketFromDataReaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadNextBucketFromDataReaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExecuteReaderCompletedEventHandler(object sender, ExecuteReaderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteReaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteReaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExecuteReaderSQLCompletedEventHandler(object sender, ExecuteReaderSQLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteReaderSQLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteReaderSQLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CloseReaderAndConnectionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IsReportFileExistingCompletedEventHandler(object sender, IsReportFileExistingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsReportFileExistingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsReportFileExistingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UploadReportCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetReportOutputCompletedEventHandler(object sender, GetReportOutputCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportOutputCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportOutputCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591